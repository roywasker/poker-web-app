{"version":3,"file":"static/js/590.fe278157.chunk.js","mappings":";uIAyCO,MAAMA,EAAsB,OAavBC,GAAZ,SAAYA,GACVA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,eACAA,EAAAA,EAAA,eACAA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,kBACD,CAPD,CAAYA,IAAAA,EAOX,KAED,MAAMC,EAA2D,CAC/D,MAASD,EAASE,MAClB,QAAWF,EAASG,QACpB,KAAQH,EAASI,KACjB,KAAQJ,EAASK,KACjB,MAASL,EAASM,MAClB,OAAUN,EAASO,QAMfC,EAA4BR,EAASI,KAmBrCK,EAAgB,CACpB,CAACT,EAASE,OAAQ,MAClB,CAACF,EAASG,SAAU,MACpB,CAACH,EAASI,MAAO,OACjB,CAACJ,EAASK,MAAO,OACjB,CAACL,EAASM,OAAQ,SAQdI,EAAgC,SAACC,EAAUC,GAC/C,GAAIA,EAAUD,EAASE,SACrB,OAEF,MAAMC,GAAM,IAAIC,MAAOC,cACjBC,EAASR,EAAcG,GAC7B,IAAIK,EAMF,MAAM,IAAIC,MACR,8DAA8DN,MAPtD,QAAAO,EAAAC,UAAAC,OAN+CC,EAAI,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,EAAA,GAAAJ,UAAAI,GAO7DC,QAAQR,GACN,IAAIH,OAASH,EAASe,WACnBJ,EAOT,QAEaK,EAOXC,WAAAA,CAAmBF,GAAA,KAAIA,KAAJA,EAUX,KAASG,UAAGrB,EAsBZ,KAAWsB,YAAepB,EAc1B,KAAeqB,gBAAsB,KA1C3ChC,EAAUiC,KAAKC,MAQjB,YAAIpB,GACF,OAAOoB,KAAKJ,UAGd,YAAIhB,CAASqB,GACX,KAAMA,KAAOlC,GACX,MAAM,IAAImC,UAAU,kBAAkBD,+BAExCD,KAAKJ,UAAYK,EAInBE,WAAAA,CAAYF,GACVD,KAAKJ,UAA2B,kBAARK,EAAmBjC,EAAkBiC,GAAOA,EAQtE,cAAIG,GACF,OAAOJ,KAAKH,YAEd,cAAIO,CAAWH,GACb,GAAmB,oBAARA,EACT,MAAM,IAAIC,UAAU,qDAEtBF,KAAKH,YAAcI,EAOrB,kBAAII,GACF,OAAOL,KAAKF,gBAEd,kBAAIO,CAAeJ,GACjBD,KAAKF,gBAAkBG,EAOzBK,KAAAA,GAAwB,QAAAC,EAAApB,UAAAC,OAAfC,EAAe,IAAAC,MAAAiB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAfnB,EAAemB,GAAArB,UAAAqB,GACtBR,KAAKF,iBAAmBE,KAAKF,gBAAgBE,KAAMjC,EAASE,SAAUoB,GACtEW,KAAKH,YAAYG,KAAMjC,EAASE,SAAUoB,GAE5CoB,GAAAA,GAAsB,QAAAC,EAAAvB,UAAAC,OAAfC,EAAe,IAAAC,MAAAoB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAftB,EAAesB,GAAAxB,UAAAwB,GACpBX,KAAKF,iBACHE,KAAKF,gBAAgBE,KAAMjC,EAASG,WAAYmB,GAClDW,KAAKH,YAAYG,KAAMjC,EAASG,WAAYmB,GAE9CuB,IAAAA,GAAuB,QAAAC,EAAA1B,UAAAC,OAAfC,EAAe,IAAAC,MAAAuB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAfzB,EAAeyB,GAAA3B,UAAA2B,GACrBd,KAAKF,iBAAmBE,KAAKF,gBAAgBE,KAAMjC,EAASI,QAASkB,GACrEW,KAAKH,YAAYG,KAAMjC,EAASI,QAASkB,GAE3C0B,IAAAA,GAAuB,QAAAC,EAAA7B,UAAAC,OAAfC,EAAe,IAAAC,MAAA0B,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAf5B,EAAe4B,GAAA9B,UAAA8B,GACrBjB,KAAKF,iBAAmBE,KAAKF,gBAAgBE,KAAMjC,EAASK,QAASiB,GACrEW,KAAKH,YAAYG,KAAMjC,EAASK,QAASiB,GAE3C6B,KAAAA,GAAwB,QAAAC,EAAAhC,UAAAC,OAAfC,EAAe,IAAAC,MAAA6B,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAf/B,EAAe+B,GAAAjC,UAAAiC,GACtBpB,KAAKF,iBAAmBE,KAAKF,gBAAgBE,KAAMjC,EAASM,SAAUgB,GACtEW,KAAKH,YAAYG,KAAMjC,EAASM,SAAUgB,qUCjN9C,MCqBagC,EAAY,CAIvBC,aAAa,EAIbC,YAAY,EAKZC,YAAa,qBCZFC,EAAS,SAAUC,EAAoBC,GAClD,IAAKD,EACH,MAAME,EAAeD,EAEzB,EAKaC,EAAiB,SAAUD,GACtC,OAAO,IAAI1C,MACT,sBACEoC,EAAUG,YACV,6BACAG,EAEN,ECrBME,EAAoB,SAAUC,GAElC,MAAMC,EAAgB,GACtB,IAAIC,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAI1C,OAAQ6C,IAAK,CACnC,IAAIC,EAAIJ,EAAIK,WAAWF,GACnBC,EAAI,IACNH,EAAIC,KAAOE,EACFA,EAAI,MACbH,EAAIC,KAAQE,GAAK,EAAK,IACtBH,EAAIC,KAAY,GAAJE,EAAU,KAEL,SAAZ,MAAJA,IACDD,EAAI,EAAIH,EAAI1C,QACyB,SAAZ,MAAxB0C,EAAIK,WAAWF,EAAI,KAGpBC,EAAI,QAAgB,KAAJA,IAAe,KAA6B,KAAtBJ,EAAIK,aAAaF,IACvDF,EAAIC,KAAQE,GAAK,GAAM,IACvBH,EAAIC,KAASE,GAAK,GAAM,GAAM,IAC9BH,EAAIC,KAASE,GAAK,EAAK,GAAM,IAC7BH,EAAIC,KAAY,GAAJE,EAAU,MAEtBH,EAAIC,KAAQE,GAAK,GAAM,IACvBH,EAAIC,KAASE,GAAK,EAAK,GAAM,IAC7BH,EAAIC,KAAY,GAAJE,EAAU,IAEzB,CACD,OAAOH,CACT,EA6DaK,EAAiB,CAI5BC,eAAgB,KAKhBC,eAAgB,KAMhBC,sBAAuB,KAMvBC,sBAAuB,KAMvBC,kBACE,iEAKF,gBAAIC,GACF,OAAO1C,KAAKyC,kBAAoB,KACjC,EAKD,wBAAIE,GACF,OAAO3C,KAAKyC,kBAAoB,KACjC,EASDG,mBAAoC,oBAATC,KAW3BC,eAAAA,CAAgBC,EAA8BC,GAC5C,IAAK1D,MAAM2D,QAAQF,GACjB,MAAM9D,MAAM,iDAGde,KAAKkD,QAEL,MAAMC,EAAgBH,EAClBhD,KAAKuC,sBACLvC,KAAKqC,eAEHe,EAAS,GAEf,IAAK,IAAInB,EAAI,EAAGA,EAAIc,EAAM3D,OAAQ6C,GAAK,EAAG,CACxC,MAAMoB,EAAQN,EAAMd,GACdqB,EAAYrB,EAAI,EAAIc,EAAM3D,OAC1BmE,EAAQD,EAAYP,EAAMd,EAAI,GAAK,EACnCuB,EAAYvB,EAAI,EAAIc,EAAM3D,OAC1BqE,EAAQD,EAAYT,EAAMd,EAAI,GAAK,EAEnCyB,EAAWL,GAAS,EACpBM,GAAqB,EAARN,IAAiB,EAAME,GAAS,EACnD,IAAIK,GAAqB,GAARL,IAAiB,EAAME,GAAS,EAC7CI,EAAmB,GAARJ,EAEVD,IACHK,EAAW,GAENP,IACHM,EAAW,KAIfR,EAAOrD,KACLoD,EAAcO,GACdP,EAAcQ,GACdR,EAAcS,GACdT,EAAcU,GAEjB,CAED,OAAOT,EAAOU,KAAK,GACpB,EAUDC,YAAAA,CAAahB,EAAeC,GAG1B,OAAIhD,KAAK4C,qBAAuBI,EACvBgB,KAAKjB,GAEP/C,KAAK8C,gBAAgBjB,EAAkBkB,GAAQC,EACvD,EAUDiB,YAAAA,CAAalB,EAAeC,GAG1B,OAAIhD,KAAK4C,qBAAuBI,EACvBH,KAAKE,GA5LQ,SAAUmB,GAElC,MAAMnC,EAAgB,GACtB,IAAIoC,EAAM,EACRjC,EAAI,EACN,KAAOiC,EAAMD,EAAM9E,QAAQ,CACzB,MAAMgF,EAAKF,EAAMC,KACjB,GAAIC,EAAK,IACPrC,EAAIG,KAAOmC,OAAOC,aAAaF,QAC1B,GAAIA,EAAK,KAAOA,EAAK,IAAK,CAC/B,MAAMG,EAAKL,EAAMC,KACjBpC,EAAIG,KAAOmC,OAAOC,cAAoB,GAALF,IAAY,EAAW,GAALG,EACpD,MAAM,GAAIH,EAAK,KAAOA,EAAK,IAAK,CAE/B,MAGMI,IACI,EAALJ,IAAW,IAAa,GAJlBF,EAAMC,OAImB,IAAa,GAHtCD,EAAMC,OAGuC,EAAW,GAFxDD,EAAMC,MAGf,MACFpC,EAAIG,KAAOmC,OAAOC,aAAa,OAAUE,GAAK,KAC9CzC,EAAIG,KAAOmC,OAAOC,aAAa,OAAc,KAAJE,GAC1C,KAAM,CACL,MAAMD,EAAKL,EAAMC,KACXM,EAAKP,EAAMC,KACjBpC,EAAIG,KAAOmC,OAAOC,cACT,GAALF,IAAY,IAAa,GAALG,IAAY,EAAW,GAALE,EAE3C,CACF,CACD,OAAO1C,EAAI+B,KAAK,GAClB,CA+JWY,CAAkB1E,KAAK2E,wBAAwB5B,EAAOC,GAC9D,EAiBD2B,uBAAAA,CAAwB5B,EAAeC,GACrChD,KAAKkD,QAEL,MAAM0B,EAAgB5B,EAClBhD,KAAKwC,sBACLxC,KAAKsC,eAEHc,EAAmB,GAEzB,IAAK,IAAInB,EAAI,EAAGA,EAAIc,EAAM3D,QAAU,CAClC,MAAMiE,EAAQuB,EAAc7B,EAAM8B,OAAO5C,MAGnCsB,EADYtB,EAAIc,EAAM3D,OACFwF,EAAc7B,EAAM8B,OAAO5C,IAAM,IACzDA,EAEF,MACMwB,EADYxB,EAAIc,EAAM3D,OACFwF,EAAc7B,EAAM8B,OAAO5C,IAAM,KACzDA,EAEF,MACM6C,EADY7C,EAAIc,EAAM3D,OACFwF,EAAc7B,EAAM8B,OAAO5C,IAAM,GAG3D,KAFEA,EAEW,MAAToB,GAA0B,MAATE,GAA0B,MAATE,GAA0B,MAATqB,EACrD,MAAM,IAAIC,EAGZ,MAAMrB,EAAYL,GAAS,EAAME,GAAS,EAG1C,GAFAH,EAAOrD,KAAK2D,GAEE,KAAVD,EAAc,CAChB,MAAME,EAAaJ,GAAS,EAAK,IAASE,GAAS,EAGnD,GAFAL,EAAOrD,KAAK4D,GAEE,KAAVmB,EAAc,CAChB,MAAMlB,EAAaH,GAAS,EAAK,IAAQqB,EACzC1B,EAAOrD,KAAK6D,EACb,CACF,CACF,CAED,OAAOR,CACR,EAODF,KAAAA,GACE,IAAKlD,KAAKqC,eAAgB,CACxBrC,KAAKqC,eAAiB,CAAC,EACvBrC,KAAKsC,eAAiB,CAAC,EACvBtC,KAAKuC,sBAAwB,CAAC,EAC9BvC,KAAKwC,sBAAwB,CAAC,EAG9B,IAAK,IAAIP,EAAI,EAAGA,EAAIjC,KAAK0C,aAAatD,OAAQ6C,IAC5CjC,KAAKqC,eAAeJ,GAAKjC,KAAK0C,aAAamC,OAAO5C,GAClDjC,KAAKsC,eAAetC,KAAKqC,eAAeJ,IAAMA,EAC9CjC,KAAKuC,sBAAsBN,GAAKjC,KAAK2C,qBAAqBkC,OAAO5C,GACjEjC,KAAKwC,sBAAsBxC,KAAKuC,sBAAsBN,IAAMA,EAGxDA,GAAKjC,KAAKyC,kBAAkBrD,SAC9BY,KAAKsC,eAAetC,KAAK2C,qBAAqBkC,OAAO5C,IAAMA,EAC3DjC,KAAKwC,sBAAsBxC,KAAK0C,aAAamC,OAAO5C,IAAMA,EAG/D,CACF,GAMG,MAAO8C,UAAgC9F,MAA7CU,WAAAA,uBACW,KAAIF,KAAG,yBACjB,EAKM,MAAMuF,EAAe,SAAUlD,GACpC,MAAMmD,EAAYpD,EAAkBC,GACpC,OAAOM,EAAOU,gBAAgBmC,GAAW,EAC3C,EAMaC,EAAgC,SAAUpD,GAErD,OAAOkD,EAAalD,GAAKqD,QAAQ,MAAO,GAC1C,EAWaC,EAAe,SAAUtD,GACpC,IACE,OAAOM,EAAO6B,aAAanC,GAAK,EACjC,CAAC,MAAOuD,GACP7F,QAAQ0B,MAAM,wBAAyBmE,EACxC,CACD,OAAO,IACT,ECpWM,SAAUC,EAAYC,GAC1B,OAAOC,OAAWC,EAAWF,EAC/B,CAgBgB,SAAAC,EAAWE,EAAiBC,GAC1C,KAAMA,aAAkBC,QACtB,OAAOD,EAGT,OAAQA,EAAOhG,aACb,KAAKb,KAIH,OAAO,IAAIA,KADO6G,EACQE,WAE5B,KAAKD,YACYH,IAAXC,IACFA,EAAS,CAAC,GAEZ,MACF,KAAKpG,MAEHoG,EAAS,GACT,MAEF,QAEE,OAAOC,EAGX,IAAK,MAAMG,KAAQH,EAEZA,EAAOI,eAAeD,IAad,cAbmCA,IAG/CJ,EAAmCI,GAAQN,EACzCE,EAAmCI,GACnCH,EAAmCG,KAIxC,OAAOJ,CACT,CCrBA,MAAMM,EAAwBA,eCjC5B,GAAoB,qBAATC,KACT,OAAOA,KAET,GAAsB,qBAAXC,OACT,OAAOA,OAET,GAAsB,qBAAXC,EAAAA,EACT,OAAOA,EAAAA,EAET,MAAM,IAAIlH,MAAM,kCAClB,CDwBEmH,GAAYC,sBA2CDC,EAAcA,KACzB,IACE,OAEEN,KArC6BO,MACjC,GAAuB,qBAAZC,QACT,OAEF,MAAMC,EAAqBD,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYH,sBACvC,OAAII,EACKC,KAAKC,MAAMF,QADpB,CAEC,EA+BGF,IA5BwBK,MAC5B,GAAwB,qBAAbC,SACT,OAEF,IAAIC,EACJ,IACEA,EAAQD,SAASE,OAAOD,MAAM,gCAC/B,CAAC,MAAOzB,GAGP,MACD,CACD,MAAM2B,EAAUF,GAAS1B,EAAa0B,EAAM,IAC5C,OAAOE,GAAWN,KAAKC,MAAMK,EAAQ,EAgBjCJ,EAEH,CAAC,MAAOvB,GAQP,YADA7F,QAAQoB,KAAK,+CAA+CyE,IAE7D,GAmBU4B,EACXC,IAEA,MAAMC,EAZND,KACuB,IAAAE,EAAAC,EAAA,OAA4B,QAA5BA,EAAe,QAAfD,EAAAd,WAAe,IAAAc,OAAA,EAAAA,EAAAE,qBAAa,IAAAD,OAAA,EAAAA,EAAGH,EAAY,EAWrDK,CAAuBL,GACpC,IAAKC,EACH,OAEF,MAAMK,EAAiBL,EAAKM,YAAY,KACxC,GAAID,GAAkB,GAAKA,EAAiB,IAAML,EAAK/H,OACrD,MAAM,IAAIH,MAAM,gBAAgBkI,yCAGlC,MAAMO,EAAOC,SAASR,EAAKS,UAAUJ,EAAiB,GAAI,IAC1D,MAAgB,MAAZL,EAAK,GAEA,CAACA,EAAKS,UAAU,EAAGJ,EAAiB,GAAIE,GAExC,CAACP,EAAKS,UAAU,EAAGJ,GAAiBE,EAC5C,EAOUG,EAAsBA,KAAyC,IAAAT,EAC1E,OAAa,QAAbA,EAAAd,WAAa,IAAAc,OAAA,EAAAA,EAAEU,MAAM,QEjJVC,EAIXpI,WAAAA,GAFA,KAAAqI,OAAoC,OACpC,KAAAC,QAAqC,OAEnCjI,KAAKkI,QAAU,IAAIC,SAAQ,CAACF,EAASD,KACnChI,KAAKiI,QAAUA,EACfjI,KAAKgI,OAASA,CAAmC,GAEpD,CAODI,YAAAA,CACEC,GAEA,MAAO,CAACnH,EAAOqE,KACTrE,EACFlB,KAAKgI,OAAO9G,GAEZlB,KAAKiI,QAAQ1C,GAES,oBAAb8C,IAGTrI,KAAKkI,QAAQI,OAAM,SAIK,IAApBD,EAASjJ,OACXiJ,EAASnH,GAETmH,EAASnH,EAAOqE,GAEnB,CAEJ,ECsCa,SAAAgD,EACdC,EACAC,GAEA,GAAID,EAAME,IACR,MAAM,IAAIzJ,MACR,gHAIJ,MAKM0J,EAAUF,GAAa,eACvBG,EAAMJ,EAAMI,KAAO,EACnBC,EAAML,EAAMK,KAAOL,EAAMM,QAC/B,IAAKD,EACH,MAAM,IAAI5J,MAAM,wDAGlB,MAAM8J,EAAOnD,OAAAoD,OAAA,CAEXC,IAAK,kCAAkCN,IACvCO,IAAKP,EACLC,MACAO,IAAKP,EAAM,KACXQ,UAAWR,EACXC,MACAC,QAASD,EACTQ,SAAU,CACRC,iBAAkB,SAClBC,WAAY,CAAE,IAIbf,GAKL,MAAO,CACLtD,EAA8BwB,KAAK8C,UAjCtB,CACbC,IAAK,OACLC,KAAM,SAgCNxE,EAA8BwB,KAAK8C,UAAUT,IAH7B,IAKhBjF,KAAK,IACT,UChHgB6F,IACd,MACuB,qBAAdC,WAC2B,kBAA3BA,UAAqB,UAErBA,UAAqB,UAErB,EAEX,UASgBC,IACd,MACoB,qBAAX3D,WAGJA,OAAgB,SAAKA,OAAiB,UAAKA,OAAiB,WAC/D,oDAAoD4D,KAAKH,IAE7D,UA+EgBI,IACd,MACuB,kBAAdH,WAAmD,gBAAzBA,UAAmB,OAExD,UAuBgBI,IACd,OAAiC,IAA1B3I,EAAUC,cAAiD,IAAzBD,EAAUE,UACrD,UAgBgB0I,IACd,IACE,MAA4B,kBAAdC,SACf,CAAC,MAAO7E,GACP,OAAO,CACR,CACH,UASgB8E,IACd,OAAO,IAAIhC,SAAQ,CAACF,EAASD,KAC3B,IACE,IAAIoC,GAAoB,EACxB,MAAMC,EACJ,0DACIC,EAAUrE,KAAKiE,UAAUK,KAAKF,GACpCC,EAAQE,UAAY,KAClBF,EAAQG,OAAOC,QAEVN,GACHnE,KAAKiE,UAAUS,eAAeN,GAEhCpC,GAAQ,EAAK,EAEfqC,EAAQM,gBAAkB,KACxBR,GAAW,CAAK,EAGlBE,EAAQO,QAAU,WAChB7C,GAAoB,QAAbZ,EAAAkD,EAAQpJ,aAAK,IAAAkG,OAAA,EAAAA,EAAEzF,UAAW,GAAG,CAEvC,CAAC,MAAOT,GACP8G,EAAO9G,EACR,IAEL,CCnJM,MAAO4J,UAAsB7L,MAIjCU,WAAAA,CAEWoL,EACTpJ,EAEOqJ,GAEPC,MAAMtJ,GALG,KAAIoJ,KAAJA,EAGF,KAAUC,WAAVA,EAPA,KAAIvL,KAdI,gBA6BfmG,OAAOsF,eAAelL,KAAM8K,EAAcK,WAItClM,MAAMmM,mBACRnM,MAAMmM,kBAAkBpL,KAAMqL,EAAaF,UAAUG,OAExD,QAGUD,EAIX1L,WAAAA,CACmB4L,EACAC,EACAC,GAFA,KAAOF,QAAPA,EACA,KAAWC,YAAXA,EACA,KAAMC,OAANA,CACf,CAEJH,MAAAA,CACEP,GAGA,MAAMC,GAAc7L,UAAAC,QAAA,OAAAqG,EAAAtG,UAAA,KAAyB,CAAC,EACxCuM,EAAW,GAAG1L,KAAKuL,WAAWR,IAC9BY,EAAW3L,KAAKyL,OAAOV,GAEvBpJ,EAAUgK,EAUpB,SAAyBA,EAAkBC,GACzC,OAAOD,EAASxG,QAAQ0G,GAAS,CAACC,EAAGC,KACnC,MAAMxG,EAAQqG,EAAKG,GACnB,OAAgB,MAATxG,EAAgBlB,OAAOkB,GAAS,IAAIwG,KAAO,GAEtD,CAf+BC,CAAgBL,EAAUX,GAAc,QAE7DiB,EAAc,GAAGjM,KAAKwL,gBAAgB7J,MAAY+J,MAIxD,OAFc,IAAIZ,EAAcY,EAAUO,EAAajB,EAGxD,EAUH,MAAMa,EAAU,gBChHV,SAAUK,EAASpK,GACvB,OAAO4E,KAAKC,MAAM7E,EACpB,CAOM,SAAU0H,EAAUoC,GACxB,OAAOlF,KAAK8C,UAAUoC,EACxB,CCIO,MAAMO,EAAS,SAAU3D,GAC9B,IAAI4D,EAAS,CAAE,EACbC,EAAiB,CAAC,EAClBT,EAAO,CAAE,EACTU,EAAY,GAEd,IACE,MAAMC,EAAQ/D,EAAMgE,MAAM,KAC1BJ,EAASF,EAAS9G,EAAamH,EAAM,KAAO,IAC5CF,EAASH,EAAS9G,EAAamH,EAAM,KAAO,IAC5CD,EAAYC,EAAM,GAClBX,EAAOS,EAAU,GAAK,CAAC,SAChBA,EAAU,CAClB,CAAC,MAAOhH,GAAK,CAEd,MAAO,CACL+G,SACAC,SACAT,OACAU,YAEJ,EAqEaG,EAAgB,SAAUjE,GACrC,MACE6D,EADcF,EAAO3D,GACJ6D,OAEnB,QAASA,GAA4B,kBAAXA,GAAuBA,EAAOtG,eAAe,MACzE,EASa2G,EAAU,SAAUlE,GAC/B,MAAM6D,EAAiBF,EAAO3D,GAAO6D,OACrC,MAAyB,kBAAXA,IAA2C,IAApBA,EAAc,KACrD,EChIgB,SAAAM,EAA2BC,EAAQb,GACjD,OAAOnG,OAAOuF,UAAUpF,eAAe8G,KAAKD,EAAKb,EACnD,CAEgB,SAAAe,EACdF,EACAb,GAEA,OAAInG,OAAOuF,UAAUpF,eAAe8G,KAAKD,EAAKb,GACrCa,EAAIb,QAEX,CAEJ,CAEM,SAAUgB,EAAQH,GACtB,IAAK,MAAMb,KAAOa,EAChB,GAAIhH,OAAOuF,UAAUpF,eAAe8G,KAAKD,EAAKb,GAC5C,OAAO,EAGX,OAAO,CACT,UAEgBiB,EACdJ,EACAK,EACAC,GAEA,MAAMC,EAAkC,CAAC,EACzC,IAAK,MAAMpB,KAAOa,EACZhH,OAAOuF,UAAUpF,eAAe8G,KAAKD,EAAKb,KAC5CoB,EAAIpB,GAAOkB,EAAGJ,KAAKK,EAAYN,EAAIb,GAAMA,EAAKa,IAGlD,OAAOO,CACT,CAKgB,SAAAC,EAAUC,EAAWC,GACnC,GAAID,IAAMC,EACR,OAAO,EAGT,MAAMC,EAAQ3H,OAAO4H,KAAKH,GACpBI,EAAQ7H,OAAO4H,KAAKF,GAC1B,IAAK,MAAMI,KAAKH,EAAO,CACrB,IAAKE,EAAME,SAASD,GAClB,OAAO,EAGT,MAAME,EAASP,EAA8BK,GACvCG,EAASP,EAA8BI,GAC7C,GAAII,EAASF,IAAUE,EAASD,IAC9B,IAAKT,EAAUQ,EAAOC,GACpB,OAAO,OAEJ,GAAID,IAAUC,EACnB,OAAO,CAEV,CAED,IAAK,MAAMH,KAAKD,EACd,IAAKF,EAAMI,SAASD,GAClB,OAAO,EAGX,OAAO,CACT,CAEA,SAASI,EAASC,GAChB,OAAiB,OAAVA,GAAmC,kBAAVA,CAClC,CCrEM,SAAUC,EAAYC,GAG1B,MAAMC,EAAS,GACf,IAAK,MAAOnC,EAAKxG,KAAUK,OAAOuI,QAAQF,GACpC3O,MAAM2D,QAAQsC,GAChBA,EAAM6I,SAAQC,IACZH,EAAOnO,KACLuO,mBAAmBvC,GAAO,IAAMuC,mBAAmBD,GACpD,IAGHH,EAAOnO,KAAKuO,mBAAmBvC,GAAO,IAAMuC,mBAAmB/I,IAGnE,OAAO2I,EAAO9O,OAAS,IAAM8O,EAAOpK,KAAK,KAAO,EAClD,OCGayK,EAuCX5O,WAAAA,GAjCQ,KAAM6O,OAAa,GAMnB,KAAIC,KAAa,GAOjB,KAAEC,GAAa,GAMf,KAAIC,KAAa,GAKjB,KAAMC,OAAW,EAKjB,KAAMC,OAAW,EAKvB7O,KAAK8O,UAAY,GAEjB9O,KAAK2O,KAAK,GAAK,IACf,IAAK,IAAI1M,EAAI,EAAGA,EAAIjC,KAAK8O,YAAa7M,EACpCjC,KAAK2O,KAAK1M,GAAK,EAGjBjC,KAAK+O,OACN,CAEDA,KAAAA,GACE/O,KAAKwO,OAAO,GAAK,WACjBxO,KAAKwO,OAAO,GAAK,WACjBxO,KAAKwO,OAAO,GAAK,WACjBxO,KAAKwO,OAAO,GAAK,UACjBxO,KAAKwO,OAAO,GAAK,WAEjBxO,KAAK4O,OAAS,EACd5O,KAAK6O,OAAS,CACf,CAQDG,SAAAA,CAAUC,EAAqCC,GACxCA,IACHA,EAAS,GAGX,MAAMC,EAAInP,KAAK0O,GAGf,GAAmB,kBAARO,EACT,IAAK,IAAIhN,EAAI,EAAGA,EAAI,GAAIA,IAStBkN,EAAElN,GACCgN,EAAI9M,WAAW+M,IAAW,GAC1BD,EAAI9M,WAAW+M,EAAS,IAAM,GAC9BD,EAAI9M,WAAW+M,EAAS,IAAM,EAC/BD,EAAI9M,WAAW+M,EAAS,GAC1BA,GAAU,OAGZ,IAAK,IAAIjN,EAAI,EAAGA,EAAI,GAAIA,IACtBkN,EAAElN,GACCgN,EAAIC,IAAW,GACfD,EAAIC,EAAS,IAAM,GACnBD,EAAIC,EAAS,IAAM,EACpBD,EAAIC,EAAS,GACfA,GAAU,EAKd,IAAK,IAAIjN,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,MAAMmN,EAAID,EAAElN,EAAI,GAAKkN,EAAElN,EAAI,GAAKkN,EAAElN,EAAI,IAAMkN,EAAElN,EAAI,IAClDkN,EAAElN,GAA+B,YAAxBmN,GAAK,EAAMA,IAAM,GAC3B,CAED,IAKIC,EAAG3B,EALHL,EAAIrN,KAAKwO,OAAO,GAChBlB,EAAItN,KAAKwO,OAAO,GAChBtM,EAAIlC,KAAKwO,OAAO,GAChBc,EAAItP,KAAKwO,OAAO,GAChBnJ,EAAIrF,KAAKwO,OAAO,GAIpB,IAAK,IAAIvM,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACvBA,EAAI,GACFA,EAAI,IACNoN,EAAIC,EAAKhC,GAAKpL,EAAIoN,GAClB5B,EAAI,aAEJ2B,EAAI/B,EAAIpL,EAAIoN,EACZ5B,EAAI,YAGFzL,EAAI,IACNoN,EAAK/B,EAAIpL,EAAMoN,GAAKhC,EAAIpL,GACxBwL,EAAI,aAEJ2B,EAAI/B,EAAIpL,EAAIoN,EACZ5B,EAAI,YAIR,MAAM0B,GAAO/B,GAAK,EAAMA,IAAM,IAAOgC,EAAIhK,EAAIqI,EAAIyB,EAAElN,GAAM,WACzDoD,EAAIiK,EACJA,EAAIpN,EACJA,EAA8B,YAAxBoL,GAAK,GAAOA,IAAM,GACxBA,EAAID,EACJA,EAAI+B,CACL,CAEDpP,KAAKwO,OAAO,GAAMxO,KAAKwO,OAAO,GAAKnB,EAAK,WACxCrN,KAAKwO,OAAO,GAAMxO,KAAKwO,OAAO,GAAKlB,EAAK,WACxCtN,KAAKwO,OAAO,GAAMxO,KAAKwO,OAAO,GAAKtM,EAAK,WACxClC,KAAKwO,OAAO,GAAMxO,KAAKwO,OAAO,GAAKc,EAAK,WACxCtP,KAAKwO,OAAO,GAAMxO,KAAKwO,OAAO,GAAKnJ,EAAK,UACzC,CAEDkK,MAAAA,CAAOrL,EAAwC9E,GAE7C,GAAa,MAAT8E,EACF,YAGauB,IAAXrG,IACFA,EAAS8E,EAAM9E,QAGjB,MAAMoQ,EAAmBpQ,EAASY,KAAK8O,UACvC,IAAIW,EAAI,EAER,MAAMR,EAAMjP,KAAKyO,KACjB,IAAIiB,EAAQ1P,KAAK4O,OAGjB,KAAOa,EAAIrQ,GAAQ,CAKjB,GAAc,IAAVsQ,EACF,KAAOD,GAAKD,GACVxP,KAAKgP,UAAU9K,EAAOuL,GACtBA,GAAKzP,KAAK8O,UAId,GAAqB,kBAAV5K,GACT,KAAOuL,EAAIrQ,GAIT,GAHA6P,EAAIS,GAASxL,EAAM/B,WAAWsN,KAC5BC,IACAD,EACEC,IAAU1P,KAAK8O,UAAW,CAC5B9O,KAAKgP,UAAUC,GACfS,EAAQ,EAER,KACD,OAGH,KAAOD,EAAIrQ,GAIT,GAHA6P,EAAIS,GAASxL,EAAMuL,KACjBC,IACAD,EACEC,IAAU1P,KAAK8O,UAAW,CAC5B9O,KAAKgP,UAAUC,GACfS,EAAQ,EAER,KACD,CAGN,CAED1P,KAAK4O,OAASc,EACd1P,KAAK6O,QAAUzP,CAChB,CAGDuQ,MAAAA,GACE,MAAMA,EAAmB,GACzB,IAAIC,EAA0B,EAAd5P,KAAK6O,OAGjB7O,KAAK4O,OAAS,GAChB5O,KAAKuP,OAAOvP,KAAK2O,KAAM,GAAK3O,KAAK4O,QAEjC5O,KAAKuP,OAAOvP,KAAK2O,KAAM3O,KAAK8O,WAAa9O,KAAK4O,OAAS,KAIzD,IAAK,IAAI3M,EAAIjC,KAAK8O,UAAY,EAAG7M,GAAK,GAAIA,IACxCjC,KAAKyO,KAAKxM,GAAiB,IAAZ2N,EACfA,GAAa,IAGf5P,KAAKgP,UAAUhP,KAAKyO,MAEpB,IAAIgB,EAAI,EACR,IAAK,IAAIxN,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI4N,EAAI,GAAIA,GAAK,EAAGA,GAAK,EAC5BF,EAAOF,GAAMzP,KAAKwO,OAAOvM,IAAM4N,EAAK,MAClCJ,EAGN,OAAOE,CACR,EC9Na,SAAAG,EAAYC,EAAgBC,GAC1C,MAAO,GAAGD,aAAkBC,aAC9B,CC1BO,MAAMC,EAAoB,SAAUnO,GACzC,MAAMC,EAAgB,GACtB,IAAIC,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAI1C,OAAQ6C,IAAK,CACnC,IAAIC,EAAIJ,EAAIK,WAAWF,GAGvB,GAAIC,GAAK,OAAUA,GAAK,MAAQ,CAC9B,MAAMgO,EAAOhO,EAAI,MACjBD,IACAR,EAAOQ,EAAIH,EAAI1C,OAAQ,2CAEvB8C,EAAI,OAAWgO,GAAQ,KADXpO,EAAIK,WAAWF,GAAK,MAEjC,CAEGC,EAAI,IACNH,EAAIC,KAAOE,EACFA,EAAI,MACbH,EAAIC,KAAQE,GAAK,EAAK,IACtBH,EAAIC,KAAY,GAAJE,EAAU,KACbA,EAAI,OACbH,EAAIC,KAAQE,GAAK,GAAM,IACvBH,EAAIC,KAASE,GAAK,EAAK,GAAM,IAC7BH,EAAIC,KAAY,GAAJE,EAAU,MAEtBH,EAAIC,KAAQE,GAAK,GAAM,IACvBH,EAAIC,KAASE,GAAK,GAAM,GAAM,IAC9BH,EAAIC,KAASE,GAAK,EAAK,GAAM,IAC7BH,EAAIC,KAAY,GAAJE,EAAU,IAEzB,CACD,OAAOH,CACT,EAOaoO,EAAe,SAAUrO,GACpC,IAAIE,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAI1C,OAAQ6C,IAAK,CACnC,MAAMC,EAAIJ,EAAIK,WAAWF,GACrBC,EAAI,IACNF,IACSE,EAAI,KACbF,GAAK,EACIE,GAAK,OAAUA,GAAK,OAE7BF,GAAK,EACLC,KAEAD,GAAK,CAER,CACD,OAAOA,CACT,ECrEM,SAAUoO,EACd7E,GAEA,OAAIA,GAAYA,EAA+B8E,UACrC9E,EAA+B8E,UAEhC9E,CAEX,0KCXO,IAAI/J,EAAc,GAMnB,SAAU8O,EAAcC,GAC5B/O,EAAc+O,CAChB,OCEaC,EAOX7Q,WAAAA,CAAoB8Q,GAAA,KAAWA,YAAXA,EALZ,KAAOC,QAAG,YAWlBC,GAAAA,CAAI5E,EAAaxG,GACF,MAATA,EACFvF,KAAKyQ,YAAYG,WAAW5Q,KAAK6Q,cAAc9E,IAE/C/L,KAAKyQ,YAAYK,QAAQ9Q,KAAK6Q,cAAc9E,IAAMvC,EAAAA,EAAAA,IAAUjE,IAOhEwL,GAAAA,CAAIhF,GACF,MAAMiF,EAAYhR,KAAKyQ,YAAYQ,QAAQjR,KAAK6Q,cAAc9E,IAC9D,OAAiB,MAAbiF,EACK,MAEA9E,EAAAA,EAAAA,IAAS8E,GAIpBE,MAAAA,CAAOnF,GACL/L,KAAKyQ,YAAYG,WAAW5Q,KAAK6Q,cAAc9E,IAKjD8E,aAAAA,CAAcpR,GACZ,OAAOO,KAAK0Q,QAAUjR,EAGxB0R,QAAAA,GACE,OAAOnR,KAAKyQ,YAAYU,kBCjDfC,EAAbzR,WAAAA,GACU,KAAM0R,OAA6B,CAAC,EAqB5C,KAAiBC,mBAAG,EAnBpBX,GAAAA,CAAI5E,EAAaxG,GACF,MAATA,SACKvF,KAAKqR,OAAOtF,GAEnB/L,KAAKqR,OAAOtF,GAAOxG,EAIvBwL,GAAAA,CAAIhF,GACF,OAAIY,EAAAA,EAAAA,IAAS3M,KAAKqR,OAAQtF,GACjB/L,KAAKqR,OAAOtF,GAEd,KAGTmF,MAAAA,CAAOnF,UACE/L,KAAKqR,OAAOtF,ICXvB,MAAMwF,EAAmB,SACvBC,GAEA,IAGE,GACoB,qBAAXtL,QAC2B,qBAA3BA,OAAOsL,GACd,CAEA,MAAMC,EAAavL,OAAOsL,GAG1B,OAFAC,EAAWX,QAAQ,oBAAqB,SACxCW,EAAWb,WAAW,qBACf,IAAIJ,EAAkBiB,IAE/B,MAAOpM,GAAI,CAIb,OAAO,IAAI+L,CACb,EAGaM,EAAoBH,EAAiB,gBAGrCI,EAAiBJ,EAAiB,kBCxBzCK,EAAY,IAAIlS,EAAAA,GAAO,sBAKhBmS,EAA+B,WAC1C,IAAIC,EAAK,EACT,OAAO,WACL,OAAOA,GACT,CACF,CAL4C,GAY/BC,EAAO,SAAUjQ,GAC5B,MAAMmD,GAAYgL,EAAAA,EAAAA,IAAkBnO,GAC9BiQ,EAAO,IAAIxD,EAAAA,GACjBwD,EAAKxC,OAAOtK,GACZ,MAAM+M,EAAYD,EAAKpC,SACvB,OAAOvN,EAAAA,GAAOU,gBAAgBkP,EAChC,EAEMC,EAAmB,WACvB,IAAItQ,EAAU,GACd,IAAK,IAAIM,EAAI,EAAGA,EAAI9C,UAAQC,OAAQ6C,IAAK,CACvC,MAAMiQ,EAAcjQ,EAAC,GAAA9C,UAAAC,QAAD6C,OAACwD,EAAAtG,UAAD8C,GAElB3C,MAAM2D,QAAQiP,IACbA,GACgB,kBAARA,GAEwB,kBAAvBA,EAAY9S,OAEtBuC,GAAWsQ,EAAiBE,MAAM,KAAMD,GAExCvQ,GADwB,kBAARuQ,GACL1I,EAAAA,EAAAA,IAAU0I,GAEVA,EAEbvQ,GAAW,IAGb,OAAOA,CACT,EAKO,IAAIyQ,EAAuC,KAK9CC,GAAY,EAOT,MAAMC,EAAgB,SAC3BC,EACAC,IAEA/Q,EAAAA,EAAAA,KACG+Q,IAA0B,IAAZD,IAAgC,IAAZA,EACnC,+CAEc,IAAZA,GACFX,EAAUhT,SAAWb,EAAAA,GAASG,QAC9BkU,EAASR,EAAUnR,IAAIgS,KAAKb,GACxBY,GACFb,EAAehB,IAAI,mBAAmB,IAEZ,oBAAZ4B,EAChBH,EAASG,GAETH,EAAS,KACTT,EAAeT,OAAO,mBAE1B,EAEazQ,EAAM,WAQjB,IAPkB,IAAd4R,IACFA,GAAY,EACG,OAAXD,IAA6D,IAA1CT,EAAeZ,IAAI,oBACxCuB,GAAc,IAIdF,EAAQ,SAAAlT,EAAAC,UAAAC,OARkBsT,EAAkB,IAAApT,MAAAJ,GAAAsB,EAAA,EAAAA,EAAAtB,EAAAsB,IAAlBkS,EAAkBlS,GAAArB,UAAAqB,GAS9C,MAAMmB,EAAUsQ,EAAiBE,MAAM,KAAMO,GAC7CN,EAAOzQ,GAEX,EAEagR,EAAa,SACxBC,GAEA,OAAO,WAA+B,QAAArS,EAAApB,UAAAC,OAAlBsT,EAAkB,IAAApT,MAAAiB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAlB+R,EAAkB/R,GAAAxB,UAAAwB,GACpCF,EAAImS,KAAWF,EACjB,CACF,EAEaxR,EAAQ,WACnB,MAAMS,EAAU,4BAA8BsQ,KAAiB9S,WAC/DyS,EAAU1Q,MAAMS,EAClB,EAEakR,EAAQ,WACnB,MAAMlR,EAAU,yBAAyBsQ,KAAiB9S,aAE1D,MADAyS,EAAU1Q,MAAMS,GACV,IAAI1C,MAAM0C,EAClB,EAEaZ,EAAO,WAClB,MAAMY,EAAU,qBAAuBsQ,KAAiB9S,WACxDyS,EAAU7Q,KAAKY,EACjB,EAgCamR,EAAsB,SAAUlH,GAC3C,MACkB,kBAATA,IACNA,IAASA,GACRA,IAASmH,OAAOC,mBAChBpH,IAASmH,OAAOE,kBAEtB,EAiDaC,EAAW,aAKXC,EAAW,aAKXC,EAAc,SAAU/F,EAAWC,GAC9C,GAAID,IAAMC,EACR,OAAO,EACF,GAAID,IAAM6F,GAAY5F,IAAM6F,EACjC,OAAQ,EACH,GAAI7F,IAAM4F,GAAY7F,IAAM8F,EACjC,OAAO,EACF,CACL,MAAME,EAASC,EAAYjG,GACzBkG,EAASD,EAAYhG,GAEvB,OAAe,OAAX+F,EACa,OAAXE,EACKF,EAASE,IAAW,EAAIlG,EAAEjO,OAASkO,EAAElO,OAASiU,EAASE,GAEtD,EAEU,OAAXA,EACF,EAEAlG,EAAIC,GAAK,EAAI,EAG1B,EAKakG,EAAgB,SAAUnG,EAAWC,GAChD,OAAID,IAAMC,EACD,EACED,EAAIC,GACL,EAED,CAEX,EAEamG,EAAa,SACxB1H,EACAa,GAEA,GAAIA,GAAOb,KAAOa,EAChB,OAAOA,EAAIb,GAEX,MAAM,IAAI9M,MACR,yBAA2B8M,EAAM,iBAAkBvC,EAAAA,EAAAA,IAAUoD,GAGnE,EAEa8G,EAAoB,SAAU9G,GACzC,GAAmB,kBAARA,GAA4B,OAARA,EAC7B,OAAOpD,EAAAA,EAAAA,IAAUoD,GAGnB,MAAMY,EAAO,GAEb,IAAK,MAAME,KAAKd,EACdY,EAAKzN,KAAK2N,GAIZF,EAAKmG,OACL,IAAI5H,EAAM,IACV,IAAK,IAAI9J,EAAI,EAAGA,EAAIuL,EAAKpO,OAAQ6C,IACrB,IAANA,IACF8J,GAAO,KAETA,IAAOvC,EAAAA,EAAAA,IAAUgE,EAAKvL,IACtB8J,GAAO,IACPA,GAAO2H,EAAkB9G,EAAIY,EAAKvL,KAIpC,OADA8J,GAAO,IACAA,CACT,EAQa6H,EAAoB,SAC/B9R,EACA+R,GAEA,MAAMC,EAAMhS,EAAI1C,OAEhB,GAAI0U,GAAOD,EACT,MAAO,CAAC/R,GAGV,MAAMiS,EAAW,GACjB,IAAK,IAAI7R,EAAI,EAAGA,EAAI4R,EAAK5R,GAAK2R,EACxB3R,EAAI2R,EAAUC,EAChBC,EAAShU,KAAK+B,EAAI8F,UAAU1F,EAAG4R,IAE/BC,EAAShU,KAAK+B,EAAI8F,UAAU1F,EAAGA,EAAI2R,IAGvC,OAAOE,CACT,EAQgB,SAAAC,EAAKpH,EAAaK,GAChC,IAAK,MAAMlB,KAAOa,EACZA,EAAI7G,eAAegG,IACrBkB,EAAGlB,EAAKa,EAAIb,GAGlB,CAsBO,MAAMkI,EAAwB,SAAUC,IAC7CzS,EAAAA,EAAAA,KAAQqR,EAAoBoB,GAAI,uBAEhC,MAEMC,EAAO,KACb,IAAIC,EAAG/O,EAAGgK,EAAGgF,EAAIpS,EAIP,IAANiS,GACF7O,EAAI,EACJgK,EAAI,EACJ+E,EAAI,EAAIF,KAAOI,IAAW,EAAI,IAE9BF,EAAIF,EAAI,GACRA,EAAIK,KAAKC,IAAIN,KAEJK,KAAKE,IAAI,GAAG,OAEnBJ,EAAKE,KAAKG,IAAIH,KAAKI,MAAMJ,KAAK9T,IAAIyT,GAAKK,KAAKK,KAAMT,GAClD9O,EAAIgP,EAAKF,EACT9E,EAAIkF,KAAKM,MAAMX,EAAIK,KAAKE,IAAI,EAlBtB,GAkBiCJ,GAAME,KAAKE,IAAI,EAlBhD,OAqBNpP,EAAI,EACJgK,EAAIkF,KAAKM,MAAMX,EAAIK,KAAKE,IAAI,GAAG,SAKnC,MAAMK,EAAO,GACb,IAAK7S,EA5BK,GA4BMA,EAAGA,GAAK,EACtB6S,EAAK/U,KAAKsP,EAAI,EAAI,EAAI,GACtBA,EAAIkF,KAAKI,MAAMtF,EAAI,GAErB,IAAKpN,EAjCS,GAiCEA,EAAGA,GAAK,EACtB6S,EAAK/U,KAAKsF,EAAI,EAAI,EAAI,GACtBA,EAAIkP,KAAKI,MAAMtP,EAAI,GAErByP,EAAK/U,KAAKqU,EAAI,EAAI,GAClBU,EAAKC,UACL,MAAMjT,EAAMgT,EAAKhR,KAAK,IAGtB,IAAIkR,EAAgB,GACpB,IAAK/S,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,IAAIgT,EAAUtN,SAAS7F,EAAIoT,OAAOjT,EAAG,GAAI,GAAGkP,SAAS,IAC9B,IAAnB8D,EAAQ7V,SACV6V,EAAU,IAAMA,GAElBD,GAAgCC,EAElC,OAAOD,EAAcG,aACvB,EAiDO,MAAMC,EAAkB,IAAIC,OAAO,qBAe7B/B,EAAc,SAAUxR,GACnC,GAAIsT,EAAgBtL,KAAKhI,GAAM,CAC7B,MAAMwT,EAASvC,OAAOjR,GACtB,GAAIwT,IAbsB,YAaMA,GARN,WASxB,OAAOA,EAGX,OAAO,IACT,EAmBaC,EAAiB,SAAUtI,GACtC,IACEA,IACA,MAAO5H,GAEPmQ,YAAW,KAKT,MAAMC,EAAQpQ,EAAEoQ,OAAS,GAEzB,MADA1U,EAAK,yCAA0C0U,GACzCpQ,CAAC,GACNkP,KAAKI,MAAM,IAElB,EA+Dae,EAAwB,SACnCzI,EACA0I,GAEA,MAAMC,EAA2BJ,WAAWvI,EAAI0I,GAiBhD,MAdqB,kBAAZC,GAES,qBAATC,MAEPA,KAAiB,WAGjBA,KAAKC,WAAWF,GAEY,kBAAZA,GAAyBA,EAAuB,OAE/DA,EAAuB,QAGnBA,CACT,QC9lBaG,EAIXpW,WAAAA,CACEqW,EACQC,GAAA,KAAgBA,iBAAhBA,EAERjW,KAAKkW,QAAUF,EAAIvW,MACf0W,EAAAA,EAAAA,IAAqBH,IAAQA,EAAII,SAASC,gBAC5CrW,KAAKsW,uBAAyBN,EAAII,SAASC,eAE7CrW,KAAKuW,SAA2B,OAAhBN,QAAA,IAAAA,OAAA,EAAAA,EAAkBO,aAAa,CAAEC,UAAU,IACtDzW,KAAKuW,UACQ,OAAhBN,QAAA,IAAAA,GAAAA,EAAkBlF,MAAM2F,MAAKH,GAAavW,KAAKuW,SAAWA,IAI9DI,QAAAA,CAASC,GACP,GAAI5W,KAAKsW,uBAAwB,CAC/B,GAAIM,EACF,MAAM,IAAI3X,MACR,qFAGJ,OAAOkJ,QAAQF,QAAQ,CAAEO,MAAOxI,KAAKsW,yBAEvC,OAAKtW,KAAKuW,SAeHvW,KAAKuW,SAASI,SAASC,GAdrB,IAAIzO,SAA6B,CAACF,EAASD,KAKhDwN,YAAW,KACLxV,KAAKuW,SACPvW,KAAK2W,SAASC,GAAcF,KAAKzO,EAASD,GAE1CC,EAAQ,QAET,EAAE,IAMX4O,sBAAAA,CAAuBC,SACA,QAArB1P,EAAApH,KAAKiW,wBAAgB,IAAA7O,GAAAA,EACjB2J,MACD2F,MAAKH,GAAYA,EAASQ,iBAAiBD,KAGhDE,qBAAAA,GACEjW,EACE,oDAAoDf,KAAKkW,+FChDlDe,EAGXtX,WAAAA,CACUuX,EACAC,EACAC,GAFA,KAAQF,SAARA,EACA,KAAgBC,iBAAhBA,EACA,KAAaC,cAAbA,EALF,KAAKC,MAAgC,KAO3CrX,KAAKqX,MAAQD,EAAcZ,aAAa,CAAEC,UAAU,IAC/CzW,KAAKqX,OACRD,EAAcE,QAAOC,GAASvX,KAAKqX,MAAQE,IAI/CZ,QAAAA,CAASC,GACP,OAAK5W,KAAKqX,MAgBHrX,KAAKqX,MAAMV,SAASC,GAActO,OAAMpH,GAGzCA,GAAwB,+BAAfA,EAAM6J,MACjBtK,EAAI,kEACG,MAEA0H,QAAQH,OAAO9G,KAtBjB,IAAIiH,SAA+B,CAACF,EAASD,KAKlDwN,YAAW,KACLxV,KAAKqX,MACPrX,KAAK2W,SAASC,GAAcF,KAAKzO,EAASD,GAE1CC,EAAQ,QAET,EAAE,IAgBX4O,sBAAAA,CAAuBC,GAGjB9W,KAAKqX,MACPrX,KAAKqX,MAAMG,qBAAqBV,GAEhC9W,KAAKoX,cACFrG,MACA2F,MAAKa,GAAQA,EAAKC,qBAAqBV,KAI9CW,yBAAAA,CAA0BX,GACxB9W,KAAKoX,cACFrG,MACA2F,MAAKa,GAAQA,EAAKG,wBAAwBZ,KAG/CE,qBAAAA,GACE,IAAIW,EACF,0DACA3X,KAAKkX,SADL,iFAIE,eAAgBlX,KAAKmX,iBACvBQ,GACE,uJAGO,mBAAoB3X,KAAKmX,iBAClCQ,GACE,2JAIFA,GACE,kKAIJ5W,EAAK4W,UAKIC,EAIXjY,WAAAA,CAAoBkY,GAAA,KAAWA,YAAXA,EAEpBlB,QAAAA,CAASC,GACP,OAAOzO,QAAQF,QAAQ,CACrB4P,YAAa7X,KAAK6X,cAItBhB,sBAAAA,CAAuBC,GAGrBA,EAAS9W,KAAK6X,aAGhBJ,yBAAAA,CAA0BX,GAAwC,CAElEE,qBAAAA,GAAqB,EAlBdY,EAAKE,MAAG,QC7GV,MAAMC,EAAmB,IAYnBC,EACX,6EAMWC,EAAwB,KAExBC,EAAY,YAEZC,EAAe,qBCTfC,EAaXzY,WAAAA,CACEwH,EACgBkR,EACAC,EACAC,GAKsD,IAJtDC,EAAqBrZ,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GACrBsZ,EAAyBtZ,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,MACzBuZ,EAAyCvZ,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GACzCwZ,EAA2BxZ,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GAC3ByZ,EAAAzZ,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAkD,KAPlD,KAAMkZ,OAANA,EACA,KAASC,UAATA,EACA,KAAaC,cAAbA,EACA,KAASC,UAATA,EACA,KAAcC,eAAdA,EACA,KAA6BC,8BAA7BA,EACA,KAAeC,gBAAfA,EACA,KAAeC,gBAAfA,EAEhB5Y,KAAK6Y,MAAQ1R,EAAKgO,cAClBnV,KAAK8Y,QAAU9Y,KAAK6Y,MAAM3D,OAAOlV,KAAK6Y,MAAME,QAAQ,KAAO,GAC3D/Y,KAAKgZ,aACFtH,EAAkBX,IAAI,QAAU5J,IAAoBnH,KAAK6Y,MAG9DI,eAAAA,GACE,MAA0C,OAAnCjZ,KAAKgZ,aAAa9D,OAAO,EAAG,GAGrCgE,YAAAA,GACE,MACmB,mBAAjBlZ,KAAK8Y,SACY,wBAAjB9Y,KAAK8Y,QAIT,QAAI3R,GACF,OAAOnH,KAAK6Y,MAGd,QAAI1R,CAAKgS,GACHA,IAAYnZ,KAAKgZ,eACnBhZ,KAAKgZ,aAAeG,EAChBnZ,KAAKiZ,mBACPvH,EAAkBf,IAAI,QAAU3Q,KAAK6Y,MAAO7Y,KAAKgZ,eAKvD7H,QAAAA,GACE,IAAIrP,EAAM9B,KAAKoZ,cAIf,OAHIpZ,KAAKyY,iBACP3W,GAAO,IAAM9B,KAAKyY,eAAiB,KAE9B3W,EAGTsX,WAAAA,GACE,MAAMC,EAAWrZ,KAAKqY,OAAS,WAAa,UACtCiB,EAAQtZ,KAAK0Y,8BACf,OAAO1Y,KAAKsY,YACZ,GACJ,MAAO,GAAGe,IAAWrZ,KAAKmH,QAAQmS,cAmBtBC,EACdC,EACA9P,EACAwE,GAKA,IAAIuL,EACJ,IAJAhY,EAAAA,EAAAA,IAAuB,kBAATiI,EAAmB,+BACjCjI,EAAAA,EAAAA,IAAyB,kBAAXyM,EAAqB,gCAG/BxE,IAASwO,EACXuB,GACGD,EAASnB,OAAS,SAAW,SAAWmB,EAASR,aAAe,YAC9D,IAAItP,IAASyO,EAMlB,MAAM,IAAIlZ,MAAM,4BAA8ByK,GAL9C+P,GACGD,EAASnB,OAAS,WAAa,WAChCmB,EAASR,aACT,SA/BN,SAAiCQ,GAC/B,OACEA,EAASrS,OAASqS,EAASR,cAC3BQ,EAASN,gBACTM,EAASd,6BAEb,EA6BMgB,CAAwBF,KAC1BtL,EAAW,GAAIsL,EAASlB,WAG1B,MAAMqB,EAAkB,GAMxB,OAJA3F,EAAK9F,GAAQ,CAACnC,EAAaxG,KACzBoU,EAAM5Z,KAAKgM,EAAM,IAAMxG,EAAM,IAGxBkU,EAAUE,EAAM7V,KAAK,IAC9B,OC9Ha8V,EAAbja,WAAAA,GACU,KAASka,UAA4B,CAAC,EAE9CC,gBAAAA,CAAiBra,GAAgC,IAAlBsa,EAAA5a,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAiB,GACzCwN,EAAAA,EAAAA,IAAS3M,KAAK6Z,UAAWpa,KAC5BO,KAAK6Z,UAAUpa,GAAQ,GAGzBO,KAAK6Z,UAAUpa,IAASsa,EAG1BhJ,GAAAA,GACE,OAAOzL,EAAAA,EAAAA,IAAStF,KAAK6Z,YCbzB,MAAMG,EAAgD,CAAC,EACjDC,GAAsC,CAAC,EAEvC,SAAUC,GAA0BV,GACxC,MAAMW,EAAaX,EAASrI,WAM5B,OAJK6I,EAAYG,KACfH,EAAYG,GAAc,IAAIP,GAGzBI,EAAYG,EACrB,OCTaC,GASXza,WAAAA,CAAoB0a,GAAA,KAAUA,WAAVA,EARpB,KAAgBC,iBAAc,GAC9B,KAAkBC,mBAAG,EACrB,KAAkBC,oBAAI,EACtB,KAAOC,QAAwB,KAO/BC,UAAAA,CAAWC,EAAqBtS,GAC9BrI,KAAKwa,mBAAqBG,EAC1B3a,KAAKya,QAAUpS,EACXrI,KAAKwa,mBAAqBxa,KAAKua,qBACjCva,KAAKya,UACLza,KAAKya,QAAU,MASnBG,cAAAA,CAAeC,EAAoBjP,GAEjC,IADA5L,KAAKsa,iBAAiBO,GAAcjP,EAC7B5L,KAAKsa,iBAAiBta,KAAKua,qBAAqB,CACrD,MAAMO,EAAY9a,KAAKsa,iBACrBta,KAAKua,2BAEAva,KAAKsa,iBAAiBta,KAAKua,oBAClC,IAAK,IAAItY,EAAI,EAAGA,EAAI6Y,EAAU1b,SAAU6C,EAClC6Y,EAAU7Y,IACZsT,GAAe,KACbvV,KAAKqa,WAAWS,EAAU7Y,GAAG,IAInC,GAAIjC,KAAKua,qBAAuBva,KAAKwa,mBAAoB,CACnDxa,KAAKya,UACPza,KAAKya,UACLza,KAAKya,QAAU,MAEjB,MAEFza,KAAKua,uBCrBJ,MAAMQ,GAAgC,cAoChCC,GA4BXrb,WAAAA,CACSsb,EACAzB,EACC0B,EACA7E,EACA8E,EACDC,EACAC,GANA,KAAMJ,OAANA,EACA,KAAQzB,SAARA,EACC,KAAa0B,cAAbA,EACA,KAAa7E,cAAbA,EACA,KAAS8E,UAATA,EACD,KAAkBC,mBAAlBA,EACA,KAAaC,cAAbA,EAlCT,KAASC,UAAG,EACZ,KAAaC,cAAG,EAUR,KAAcC,gBAAG,EAyBvBxb,KAAKyb,KAAO9I,EAAWsI,GACvBjb,KAAK0b,OAASxB,GAA0BV,GACxCxZ,KAAK2b,MAASzN,IAERlO,KAAKqW,gBACPnI,EAAO+J,GAAyBjY,KAAKqW,eAEhCkD,EAAsBC,EAAUrB,EAAcjK,IAQzD3D,IAAAA,CAAKqR,EAA8BC,GAAmC,IAAAC,EAAA,KACpE9b,KAAK+b,cAAgB,EACrB/b,KAAKgc,cAAgBH,EACrB7b,KAAKic,gBAAkB,IAAI7B,GAAewB,GAC1C5b,KAAKkc,WAAY,EAEjBlc,KAAKmc,qBAAuB3G,YAAW,KACrCxV,KAAKyb,KAAK,gCAEVzb,KAAKoc,YACLpc,KAAKmc,qBAAuB,IAAI,GAE/B5H,KAAKI,MArEe,MRqHQ,SAAU1H,GAC3C,IAAIjD,EAAAA,EAAAA,OAAuC,aAAxBnD,SAASwV,WAC1BpP,QACK,CAIL,IAAIqP,GAAS,EACb,MAAMC,EAAY,WACX1V,SAAS2V,KAKTF,IACHA,GAAS,EACTrP,KANAuI,WAAW+G,EAAWhI,KAAKI,MAAM,IAQrC,EAEI9N,SAAS4V,kBACX5V,SAAS4V,iBAAiB,mBAAoBF,GAAW,GAEzDrW,OAAOuW,iBAAiB,OAAQF,GAAW,IAEjC1V,SAAiB6V,cAG1B7V,SAAiB6V,YAAY,sBAAsB,KACtB,aAAxB7V,SAASwV,YACXE,OAKHrW,OAAewW,YAAY,SAAUH,IAO5C,CQvFII,EAAoB,KAClB,GAAI3c,KAAKkc,UACP,OAIFlc,KAAK4c,gBAAkB,IAAIC,IACzB,WAAY,QAAAnc,EAAAvB,UAAAC,OAARC,EAAI,IAAAC,MAAAoB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJzB,EAAIyB,GAAA3B,UAAA2B,GACN,MAAOgc,EAASC,EAAMC,EAAMC,EAAMC,GAAQ7d,EAE1C,GADAyc,EAAKqB,wBAAwB9d,GACxByc,EAAKc,gBASV,GALId,EAAKK,uBACPiB,aAAatB,EAAKK,sBAClBL,EAAKK,qBAAuB,MAE9BL,EAAKN,gBAAiB,EAClBsB,IAAY/B,GACde,EAAKhK,GAAKiL,EACVjB,EAAKuB,SAAWL,MACX,IA5H8B,UA4H1BF,EAgBT,MAAM,IAAI7d,MAAM,kCAAoC6d,GAdhDC,GAGFjB,EAAKc,gBAAgBU,cAAe,EAIpCxB,EAAKG,gBAAgBvB,WAAWqC,GAAgB,KAC9CjB,EAAKM,WAAW,KAGlBN,EAAKM,YAKX,IACA,WAAY,QAAAvb,EAAA1B,UAAAC,OAARC,EAAI,IAAAC,MAAAuB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJ5B,EAAI4B,GAAA9B,UAAA8B,GACN,MAAOsc,EAAI3R,GAAQvM,EACnByc,EAAKqB,wBAAwB9d,GAC7Byc,EAAKG,gBAAgBrB,eAAe2C,EAAc3R,MAEpD,KACE5L,KAAKoc,WAAW,GAElBpc,KAAK2b,OAKP,MAAM6B,EAA8C,CAAC,EACrDA,EAAUzC,IAAiC,IAC3CyC,EAAwC,IAAIjJ,KAAKI,MAC/B,IAAhBJ,KAAKkJ,UAEHzd,KAAK4c,gBAAgBc,2BACvBF,EAA6C,GAC3Cxd,KAAK4c,gBAAgBc,0BAEzBF,EAAuB,EAAIzF,EACvB/X,KAAKob,qBACPoC,EAAiC,EAAIxd,KAAKob,oBAExCpb,KAAKqb,gBACPmC,EAA4B,GAAIxd,KAAKqb,eAEnCrb,KAAKkb,gBACPsC,EAA8B,EAAIxd,KAAKkb,eAErClb,KAAKqW,gBACPmH,EAAUvF,GAAyBjY,KAAKqW,eAGpB,qBAAbsH,UACPA,SAASC,UACT5F,EAAgBlO,KAAK6T,SAASC,YAE9BJ,EAAuB,EL/MN,KKiNnB,MAAMK,EAAa7d,KAAK2b,MAAM6B,GAC9Bxd,KAAKyb,KAAK,+BAAiCoC,GAC3C7d,KAAK4c,gBAAgBkB,OAAOD,GAAY,QAEtC,IAONE,KAAAA,GACE/d,KAAK4c,gBAAgBoB,cAAche,KAAK8R,GAAI9R,KAAKqd,UACjDrd,KAAKie,uBAAuBje,KAAK8R,GAAI9R,KAAKqd,UAQ5C,iBAAOa,GACLlD,GAAsBmD,aAAc,EAQtC,oBAAOC,GACLpD,GAAsBqD,gBAAiB,EAIzC,kBAAOC,GACL,QAAItU,EAAAA,EAAAA,UAEOgR,GAAsBmD,cAM5BnD,GAAsBqD,gBACH,qBAAbxX,UACmB,MAA1BA,SAAS0X,iBR8KK,kBAAXrY,QACPA,OAAe,QACfA,OAAe,OAAa,YAC3B,UAAU4D,KAAK5D,OAAOyX,SAASa,UASR,kBAAZC,SAA8C,kBAAfA,QAAQC,KQhLrDC,qBAAAA,GAAqB,CAKbC,SAAAA,GACN5e,KAAKkc,WAAY,EAEblc,KAAK4c,kBACP5c,KAAK4c,gBAAgBlS,QACrB1K,KAAK4c,gBAAkB,MAIrB5c,KAAK6e,iBACPhY,SAAS2V,KAAKsC,YAAY9e,KAAK6e,gBAC/B7e,KAAK6e,eAAiB,MAGpB7e,KAAKmc,uBACPiB,aAAapd,KAAKmc,sBAClBnc,KAAKmc,qBAAuB,MAOxBC,SAAAA,GACDpc,KAAKkc,YACRlc,KAAKyb,KAAK,8BACVzb,KAAK4e,YAED5e,KAAKgc,gBACPhc,KAAKgc,cAAchc,KAAKwb,gBACxBxb,KAAKgc,cAAgB,OAS3BtR,KAAAA,GACO1K,KAAKkc,YACRlc,KAAKyb,KAAK,6BACVzb,KAAK4e,aASTG,IAAAA,CAAKnT,GACH,MAAMoT,GAAUxV,EAAAA,EAAAA,IAAUoC,GAC1B5L,KAAKsb,WAAa0D,EAAQ5f,OAC1BY,KAAK0b,OAAO5B,iBAAiB,aAAckF,EAAQ5f,QAGnD,MAAM6f,GAAaja,EAAAA,EAAAA,IAAaga,GAI1BjL,EAAWH,EAAkBqL,EAjSdC,MAqSrB,IAAK,IAAIjd,EAAI,EAAGA,EAAI8R,EAAS3U,OAAQ6C,IACnCjC,KAAK4c,gBAAgBuC,eACnBnf,KAAK+b,cACLhI,EAAS3U,OACT2U,EAAS9R,IAEXjC,KAAK+b,gBASTkC,sBAAAA,CAAuBnM,EAAYsN,GACjC,IAAIpV,EAAAA,EAAAA,MACF,OAEFhK,KAAK6e,eAAiBhY,SAAS0X,cAAc,UAC7C,MAAMf,EAAqC,CAC3CA,OAA2D,KAC3DA,EAAoC,GAAI1L,EACxC0L,EAAoC,GAAI4B,EACxCpf,KAAK6e,eAAeQ,IAAMrf,KAAK2b,MAAM6B,GACrCxd,KAAK6e,eAAeS,MAAMC,QAAU,OAEpC1Y,SAAS2V,KAAKgD,YAAYxf,KAAK6e,gBAMzB1B,uBAAAA,CAAwB9d,GAE9B,MAAMkc,GAAgB/R,EAAAA,EAAAA,IAAUnK,GAAMD,OACtCY,KAAKub,eAAiBA,EACtBvb,KAAK0b,OAAO5B,iBAAiB,iBAAkByB,UAYtCsB,GAiCXld,WAAAA,CACE8f,EACAC,EACO7D,EACAF,GAEP,GAHO,KAAYE,aAAZA,EACA,KAAKF,MAALA,EAlCT,KAAAgE,oBAAsB,IAAIC,IAG1B,KAAWC,YAAmD,GAO9D,KAAAC,cAAgBvL,KAAKI,MAAsB,IAAhBJ,KAAKkJ,UAIhC,KAAYH,cAAG,GAsBRtT,EAAAA,EAAAA,MAuCHhK,KAAKyf,UAAYA,EACjBzf,KAAK0f,YAAcA,MAxCH,CAKhB1f,KAAK0d,yBAA2B7L,IAChC3L,OApZ2C,aAqZLlG,KAAK0d,0BACvC+B,EACJvZ,OAtZwC,UAsZAlG,KAAK0d,0BAC3CgC,EAGF1f,KAAK+f,SAAWlD,GAA2BmD,gBAG3C,IAAIC,EAAS,GAGb,GACEjgB,KAAK+f,SAASV,KACwC,gBAAtDrf,KAAK+f,SAASV,IAAInK,OAAO,EAAG,IAC5B,CAEA+K,EAAS,4BADapZ,SAASqZ,OACwB,eAEzD,MAAMC,EAAiB,eAAiBF,EAAS,iBACjD,IACEjgB,KAAK+f,SAASK,IAAI7V,OAClBvK,KAAK+f,SAASK,IAAIC,MAAMF,GACxBngB,KAAK+f,SAASK,IAAI1V,QAClB,MAAOrF,GACP5E,EAAI,2BACA4E,EAAEoQ,OACJhV,EAAI4E,EAAEoQ,OAERhV,EAAI4E,KAYF,oBAAO2a,GACb,MAAMM,EAASzZ,SAAS0X,cAAc,UAItC,GAHA+B,EAAOhB,MAAMC,QAAU,QAGnB1Y,SAAS2V,KAqBX,KAAM,oGApBN3V,SAAS2V,KAAKgD,YAAYc,GAC1B,IAIYA,EAAOC,cAAc1Z,UAG7BpG,EAAI,iCAEN,MAAO4E,GACP,MAAM6a,EAASrZ,SAASqZ,OACxBI,EAAOjB,IACL,gEACAa,EACA,2BAmBN,OAVII,EAAOE,gBACTF,EAAOF,IAAME,EAAOE,gBACXF,EAAOC,cAChBD,EAAOF,IAAME,EAAOC,cAAc1Z,SAExByZ,EAAezZ,WAEzByZ,EAAOF,IAAOE,EAAezZ,UAGxByZ,EAMT5V,KAAAA,GAEE1K,KAAKygB,OAAQ,EAETzgB,KAAK+f,WAIP/f,KAAK+f,SAASK,IAAI5D,KAAKkE,YAAc,GACrClL,YAAW,KACa,OAAlBxV,KAAK+f,WACPlZ,SAAS2V,KAAKsC,YAAY9e,KAAK+f,UAC/B/f,KAAK+f,SAAW,QAEjBxL,KAAKI,MAAM,KAIhB,MAAMkH,EAAe7b,KAAK6b,aACtBA,IACF7b,KAAK6b,aAAe,KACpBA,KASJmC,aAAAA,CAAclM,EAAYsN,GAMxB,IALApf,KAAK2gB,KAAO7O,EACZ9R,KAAK4gB,KAAOxB,EACZpf,KAAKygB,OAAQ,EAGNzgB,KAAK6gB,iBAUNA,WAAAA,GAIN,GACE7gB,KAAKygB,OACLzgB,KAAKsd,cACLtd,KAAK2f,oBAAoBmB,MAAQ9gB,KAAK6f,YAAYzgB,OAAS,EAAI,EAAI,GACnE,CAEAY,KAAK8f,gBACL,MAAMtC,EAA8C,CAAC,EACrDA,EAAoC,GAAIxd,KAAK2gB,KAC7CnD,EAAoC,GAAIxd,KAAK4gB,KAC7CpD,EAAwC,IAAIxd,KAAK8f,cACjD,IAAIiB,EAAS/gB,KAAK2b,MAAM6B,GAEpBwD,EAAgB,GAChB/e,EAAI,EAER,KAAOjC,KAAK6f,YAAYzgB,OAAS,GAAG,CAGlC,KADgBY,KAAK6f,YAAY,GAEtBvQ,EAAgBlQ,OAliBX,GAoiBZ4hB,EAAc5hB,QAriBA,MA6jBhB,MAtBA,CAEA,MAAM6hB,EAASjhB,KAAK6f,YAAYqB,QAChCF,EACEA,SAGA/e,EACA,IACAgf,EAAOE,IALPH,MAQA/e,EACA,IACAgf,EAAOG,GAVPJ,KAaA/e,EACA,IACAgf,EAAO3R,EACTrN,KASJ,OAHA8e,GAAkBC,EAClBhhB,KAAKqhB,gBAAgBN,EAAQ/gB,KAAK8f,gBAE3B,EAEP,OAAO,EAUXX,cAAAA,CAAemC,EAAgBC,EAAmB3V,GAEhD5L,KAAK6f,YAAY9f,KAAK,CAAEohB,IAAKG,EAAQF,GAAIG,EAAWjS,EAAG1D,IAInD5L,KAAKygB,OACPzgB,KAAK6gB,cASDQ,eAAAA,CAAgBG,EAAaC,GAEnCzhB,KAAK2f,oBAAoB+B,IAAID,GAE7B,MAAME,EAAeA,KACnB3hB,KAAK2f,oBAAoBiC,OAAOH,GAChCzhB,KAAK6gB,aAAa,EAKdgB,EAAmBrM,WACvBmM,EACApN,KAAKI,MApmBwB,OA+mB/B3U,KAAK8d,OAAO0D,GARSM,KAEnB1E,aAAayE,GAGbF,GAAc,IAWlB7D,MAAAA,CAAO0D,EAAaO,IACd/X,EAAAA,EAAAA,MAEDhK,KAAagiB,eAAeR,EAAKO,GAElCvM,YAAW,KACT,IAEE,IAAKxV,KAAKsd,aACR,OAEF,MAAM2E,EAAYjiB,KAAK+f,SAASK,IAAI7B,cAAc,UAClD0D,EAAUvY,KAAO,kBACjBuY,EAAUC,OAAQ,EAClBD,EAAU5C,IAAMmC,EAEhBS,EAAUE,OAAUF,EAAkBG,mBACpC,WAEE,MAAMC,EAAUJ,EAAkB5F,WAC7BgG,GAAqB,WAAXA,GAAkC,aAAXA,IAEpCJ,EAAUE,OAAUF,EAAkBG,mBAAqB,KACvDH,EAAUK,YACZL,EAAUK,WAAWxD,YAAYmD,GAEnCF,IAEJ,EACFE,EAAUpX,QAAU,KAClBpK,EAAI,oCAAsC+gB,GAC1CxhB,KAAKsd,cAAe,EACpBtd,KAAK0K,OAAO,EAEd1K,KAAK+f,SAASK,IAAI5D,KAAKgD,YAAYyC,GACnC,MAAO5c,OAGRkP,KAAKI,MAAM,KCzrBpB,IAAI4N,GAAgB,KACQ,qBAAjBC,aACTD,GAAgBC,aACc,qBAAdC,YAChBF,GAAgBE,iBAULC,GA2BX/iB,WAAAA,CACSsb,EACPzB,EACQ0B,EACA7E,EACA8E,EACRC,EACAC,GANO,KAAMJ,OAANA,EAEC,KAAaC,cAAbA,EACA,KAAa7E,cAAbA,EACA,KAAS8E,UAATA,EA/BV,KAAcwH,eAAkB,KAChC,KAAMC,OAAoB,KAC1B,KAAWC,YAAG,EACd,KAASvH,UAAG,EACZ,KAAaC,cAAG,EA+Bdvb,KAAKyb,KAAO9I,EAAW3S,KAAKib,QAC5Bjb,KAAK0b,OAASxB,GAA0BV,GACxCxZ,KAAKyZ,QAAUiJ,GAAoBI,eACjCtJ,EACA4B,EACAC,EACAhF,EACA6E,GAEFlb,KAAKwY,UAAYgB,EAAShB,UAUpB,qBAAOsK,CACbtJ,EACA4B,EACAC,EACAhF,EACA6E,GAEA,MAAMsC,EAAqC,CAAC,EAwB5C,OAvBAA,EAAuB,EAAIzF,IAGxB/N,EAAAA,EAAAA,OACmB,qBAAb2T,UACPA,SAASC,UACT5F,EAAgBlO,KAAK6T,SAASC,YAE9BJ,EAAuB,EN1GJ,KM4GjBpC,IACFoC,EAAiC,EAAIpC,GAEnCC,IACFmC,EAA4B,GAAInC,GAE9BhF,IACFmH,EAAUvF,GAAyB5B,GAEjC6E,IACFsC,EAA8B,EAAItC,GAG7B3B,EAAsBC,EAAUtB,EAAWsF,GAOpDjT,IAAAA,CAAKqR,EAA8BC,GACjC7b,KAAK6b,aAAeA,EACpB7b,KAAK4b,UAAYA,EAEjB5b,KAAKyb,KAAK,2BAA6Bzb,KAAKyZ,SAE5CzZ,KAAKwb,gBAAiB,EAEtB9J,EAAkBf,IAAI,8BAA8B,GAEpD,IACE,IAAIoS,EACJ,IAAI/Y,EAAAA,EAAAA,MAAa,CACf,MAAMgZ,EAAShjB,KAAKwY,UAAY,YAAc,OAE9CuK,EAAU,CACRE,QAAS,CACP,aAAc,YAAYlL,KAAoBvW,KAAegF,QAAQ0c,YAAYF,IACjF,mBAAoBhjB,KAAKkb,eAAiB,KAS1Clb,KAAKmb,YACP4H,EAAQE,QAAuB,cAAI,UAAUjjB,KAAKmb,aAEhDnb,KAAKqW,gBACP0M,EAAQE,QAAQ,uBAAyBjjB,KAAKqW,eAIhD,MAAM8M,EAAM3c,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GACN4c,EAC+B,IAAnCpjB,KAAKyZ,QAAQV,QAAQ,UACjBoK,EAAiB,aAAKA,EAAiB,YACvCA,EAAgB,YAAKA,EAAgB,WAEvCC,IACFL,EAAe,MAAI,CAAEM,OAAQD,IAGjCpjB,KAAKsjB,OAAS,IAAIf,GAAcviB,KAAKyZ,QAAS,GAAIsJ,GAClD,MAAO1d,GACPrF,KAAKyb,KAAK,kCACV,MAAMva,EAAQmE,EAAE1D,SAAW0D,EAAEuG,KAK7B,OAJI1K,GACFlB,KAAKyb,KAAKva,QAEZlB,KAAKoc,YAIPpc,KAAKsjB,OAAOC,OAAS,KACnBvjB,KAAKyb,KAAK,wBACVzb,KAAKwb,gBAAiB,CAAI,EAG5Bxb,KAAKsjB,OAAOE,QAAU,KACpBxjB,KAAKyb,KAAK,0CACVzb,KAAKsjB,OAAS,KACdtjB,KAAKoc,WAAW,EAGlBpc,KAAKsjB,OAAOG,UAAYC,IACtB1jB,KAAK2jB,oBAAoBD,EAAQ,EAGnC1jB,KAAKsjB,OAAOzY,QAAUxF,IACpBrF,KAAKyb,KAAK,yCAEV,MAAMva,EAASmE,EAAU1D,SAAY0D,EAAUuG,KAC3C1K,GACFlB,KAAKyb,KAAKva,GAEZlB,KAAKoc,WAAW,EAOpB2B,KAAAA,GAAK,CAIL,oBAAOK,GACLsE,GAAoBrE,gBAAiB,EAGvC,kBAAOC,GACL,IAAIsF,GAAe,EACnB,GAAyB,qBAAdha,WAA6BA,UAAUia,UAAW,CAC3D,MAAMC,EAAkB,iCAClBC,EAAkBna,UAAUia,UAAU/c,MAAMgd,GAC9CC,GAAmBA,EAAgB3kB,OAAS,GAC1C4kB,WAAWD,EAAgB,IAAM,MACnCH,GAAe,GAKrB,OACGA,GACiB,OAAlBrB,KACCG,GAAoBrE,eAiBzB,uBAAO4F,GAGL,OACEvS,EAAkBJ,oBACsC,IAAxDI,EAAkBX,IAAI,8BAI1B4N,qBAAAA,GACEjN,EAAkBR,OAAO,8BAGnBgT,YAAAA,CAAatY,GAEnB,GADA5L,KAAK4iB,OAAO7iB,KAAK6L,GACb5L,KAAK4iB,OAAOxjB,SAAWY,KAAK6iB,YAAa,CAC3C,MAAMsB,EAAWnkB,KAAK4iB,OAAO9e,KAAK,IAClC9D,KAAK4iB,OAAS,KACd,MAAMwB,GAAWlY,EAAAA,EAAAA,IAASiY,GAG1BnkB,KAAK4b,UAAUwI,IAOXC,oBAAAA,CAAqBC,GAC3BtkB,KAAK6iB,YAAcyB,EACnBtkB,KAAK4iB,OAAS,GAOR2B,kBAAAA,CAAmB3Y,GAIzB,IAHAnK,EAAAA,EAAAA,IAAuB,OAAhBzB,KAAK4iB,OAAiB,kCAGzBhX,EAAKxM,QAAU,EAAG,CACpB,MAAMklB,EAAavR,OAAOnH,GAC1B,IAAK4Y,MAAMF,GAET,OADAtkB,KAAKqkB,qBAAqBC,GACnB,KAIX,OADAtkB,KAAKqkB,qBAAqB,GACnBzY,EAOT+X,mBAAAA,CAAoBc,GAClB,GAAoB,OAAhBzkB,KAAKsjB,OACP,OAEF,MAAM1X,EAAO6Y,EAAW,KAMxB,GALAzkB,KAAKub,eAAiB3P,EAAKxM,OAC3BY,KAAK0b,OAAO5B,iBAAiB,iBAAkBlO,EAAKxM,QAEpDY,KAAK0kB,iBAEe,OAAhB1kB,KAAK4iB,OAEP5iB,KAAKkkB,aAAatY,OACb,CAEL,MAAM+Y,EAAgB3kB,KAAKukB,mBAAmB3Y,GACxB,OAAlB+Y,GACF3kB,KAAKkkB,aAAaS,IASxB5F,IAAAA,CAAKnT,GACH5L,KAAK0kB,iBAEL,MAAM1F,GAAUxV,EAAAA,EAAAA,IAAUoC,GAC1B5L,KAAKsb,WAAa0D,EAAQ5f,OAC1BY,KAAK0b,OAAO5B,iBAAiB,aAAckF,EAAQ5f,QAKnD,MAAM2U,EAAWH,EAAkBoL,EAvUN,OA0UzBjL,EAAS3U,OAAS,GACpBY,KAAK4kB,YAAYvgB,OAAO0P,EAAS3U,SAInC,IAAK,IAAI6C,EAAI,EAAGA,EAAI8R,EAAS3U,OAAQ6C,IACnCjC,KAAK4kB,YAAY7Q,EAAS9R,IAItB2c,SAAAA,GACN5e,KAAKkc,WAAY,EACblc,KAAK2iB,iBACPkC,cAAc7kB,KAAK2iB,gBACnB3iB,KAAK2iB,eAAiB,MAGpB3iB,KAAKsjB,SACPtjB,KAAKsjB,OAAO5Y,QACZ1K,KAAKsjB,OAAS,MAIVlH,SAAAA,GACDpc,KAAKkc,YACRlc,KAAKyb,KAAK,+BACVzb,KAAK4e,YAGD5e,KAAK6b,eACP7b,KAAK6b,aAAa7b,KAAKwb,gBACvBxb,KAAK6b,aAAe,OAS1BnR,KAAAA,GACO1K,KAAKkc,YACRlc,KAAKyb,KAAK,6BACVzb,KAAK4e,aAQT8F,cAAAA,GACEG,cAAc7kB,KAAK2iB,gBACnB3iB,KAAK2iB,eAAiBmC,aAAY,KAE5B9kB,KAAKsjB,QACPtjB,KAAK4kB,YAAY,KAEnB5kB,KAAK0kB,gBAAgB,GAEpBnQ,KAAKI,MArYyB,OA6Y3BiQ,WAAAA,CAAY9iB,GAIlB,IACE9B,KAAKsjB,OAAOvE,KAAKjd,GACjB,MAAOuD,GACPrF,KAAKyb,KACH,0CACApW,EAAE1D,SAAW0D,EAAEuG,KACf,uBAEF4J,WAAWxV,KAAKoc,UAAU3J,KAAKzS,MAAO,KAzLnC0iB,GAA4BqC,6BAAG,EAK/BrC,GAAcsC,eAAG,UClPbC,GAMX,yBAAWC,GACT,MAAO,CAAClK,GAAuB0H,IAOjC,mCAAWyC,GACT,OAAOnlB,KAAKolB,4BAMdzlB,WAAAA,CAAY6Z,GACVxZ,KAAKqlB,gBAAgB7L,GAGf6L,eAAAA,CAAgB7L,GACtB,MAAM8L,EACJ5C,IAAuBA,GAAiC,cAC1D,IAAI6C,EACFD,IAA0B5C,GAAoBuB,mBAYhD,GAVIzK,EAASjB,gBACN+M,GACHvkB,EACE,mFAIJwkB,GAAuB,GAGrBA,EACFvlB,KAAKwlB,YAAc,CAAC9C,QACf,CACL,MAAM+C,EAAczlB,KAAKwlB,YAAc,GACvC,IAAK,MAAME,KAAaT,GAAiBC,eACnCQ,GAAaA,EAAuB,eACtCD,EAAW1lB,KAAK2lB,GAGpBT,GAAiBG,6BAA8B,GAOnDO,gBAAAA,GACE,GAAI3lB,KAAKwlB,YAAYpmB,OAAS,EAC5B,OAAOY,KAAKwlB,YAAY,GAExB,MAAM,IAAIvmB,MAAM,2BAOpB2mB,gBAAAA,GACE,OAAI5lB,KAAKwlB,YAAYpmB,OAAS,EACrBY,KAAKwlB,YAAY,GAEjB,MApEJP,GAA2BG,6BAAG,QCgC1BS,GA6BXlmB,WAAAA,CACSmS,EACCgU,EACAC,EACAC,EACAC,EACA5L,EACA6L,EACAlK,EACAmK,EACD9K,GATA,KAAEvJ,GAAFA,EACC,KAASgU,UAATA,EACA,KAAcC,eAAdA,EACA,KAAcC,eAAdA,EACA,KAAUC,WAAVA,EACA,KAAU5L,WAAVA,EACA,KAAQ6L,SAARA,EACA,KAAalK,cAAbA,EACA,KAAOmK,QAAPA,EACD,KAAa9K,cAAbA,EAtCT,KAAe+K,gBAAG,EAClB,KAAmBC,oBAAc,GAWzB,KAAAC,OAAkC,EA4BxCtmB,KAAKyb,KAAO9I,EAAW,KAAO3S,KAAK8R,GAAK,KACxC9R,KAAKumB,kBAAoB,IAAItB,GAAiBa,GAC9C9lB,KAAKyb,KAAK,sBACVzb,KAAKwmB,SAMCA,MAAAA,GACN,MAAMC,EAAOzmB,KAAKumB,kBAAkBZ,mBACpC3lB,KAAK0mB,MAAQ,IAAID,EACfzmB,KAAK2mB,mBACL3mB,KAAK8lB,UACL9lB,KAAK+lB,eACL/lB,KAAKgmB,eACLhmB,KAAKimB,WACL,KACAjmB,KAAKqb,eAKPrb,KAAK4mB,0BAA4BH,EAAmC,8BAAK,EAEzE,MAAMI,EAAoB7mB,KAAK8mB,cAAc9mB,KAAK0mB,OAC5CK,EAAmB/mB,KAAKgnB,iBAAiBhnB,KAAK0mB,OACpD1mB,KAAKinB,IAAMjnB,KAAK0mB,MAChB1mB,KAAKknB,IAAMlnB,KAAK0mB,MAChB1mB,KAAKmnB,eAAiB,KACtBnnB,KAAKonB,YAAa,EAQlB5R,YAAW,KAETxV,KAAK0mB,OAAS1mB,KAAK0mB,MAAMnc,KAAKsc,EAAmBE,EAAiB,GACjExS,KAAKI,MAAM,IAEd,MAAM0S,EAAmBZ,EAAqB,gBAAK,EAC/CY,EAAmB,IACrBrnB,KAAKsnB,gBAAkB5R,GAAsB,KAC3C1V,KAAKsnB,gBAAkB,KAClBtnB,KAAKonB,aAENpnB,KAAK0mB,OACL1mB,KAAK0mB,MAAMnL,cAnHiB,QAqH5Bvb,KAAKyb,KACH,wDACEzb,KAAK0mB,MAAMnL,cACX,wCAEJvb,KAAKonB,YAAa,EAClBpnB,KAAK0mB,MAAM/H,yBAEX3e,KAAK0mB,OACL1mB,KAAK0mB,MAAMpL,UA/Ha,MAiIxBtb,KAAKyb,KACH,oDACEzb,KAAK0mB,MAAMpL,UACX,uCAKJtb,KAAKyb,KAAK,+CACVzb,KAAK0K,YAIR6J,KAAKI,MAAM0S,KAIVV,gBAAAA,GACN,MAAO,KAAO3mB,KAAK8R,GAAK,IAAM9R,KAAKomB,kBAG7BY,gBAAAA,CAAiBP,GACvB,OAAOc,IACDd,IAASzmB,KAAK0mB,MAChB1mB,KAAKwnB,kBAAkBD,GACdd,IAASzmB,KAAKmnB,gBACvBnnB,KAAKyb,KAAK,8BACVzb,KAAKynB,8BAELznB,KAAKyb,KAAK,8BAKRqL,aAAAA,CAAcL,GACpB,OAAQ9kB,IACc,IAAhB3B,KAAKsmB,SACHG,IAASzmB,KAAKknB,IAChBlnB,KAAK0nB,0BAA0B/lB,GACtB8kB,IAASzmB,KAAKmnB,eACvBnnB,KAAK2nB,4BAA4BhmB,GAEjC3B,KAAKyb,KAAK,+BASlBmM,WAAAA,CAAYC,GAEV,MAAMC,EAAM,CAAE1Y,EAAG,IAAKE,EAAGuY,GACzB7nB,KAAK+nB,UAAUD,GAGjBE,oBAAAA,GACMhoB,KAAKinB,MAAQjnB,KAAKmnB,gBAAkBnnB,KAAKknB,MAAQlnB,KAAKmnB,iBACxDnnB,KAAKyb,KACH,2CAA6Czb,KAAKmnB,eAAelM,QAEnEjb,KAAK0mB,MAAQ1mB,KAAKmnB,eAClBnnB,KAAKmnB,eAAiB,MAKlBc,mBAAAA,CAAoBC,GAC1B,GA7LiB,MA6LGA,EAAa,CAC/B,MAAMC,EAAMD,EAAwB,EAxLvB,MAyLTC,EACFnoB,KAAKooB,6BA7LS,MA8LLD,GAETnoB,KAAKyb,KAAK,wCACVzb,KAAKmnB,eAAezc,QAGlB1K,KAAKinB,MAAQjnB,KAAKmnB,gBAClBnnB,KAAKknB,MAAQlnB,KAAKmnB,gBAElBnnB,KAAK0K,SArMM,MAuMJyd,IACTnoB,KAAKyb,KAAK,0BACVzb,KAAKqoB,8BACLroB,KAAKooB,+BAKHT,2BAAAA,CAA4BW,GAClC,MAAMC,EAAgB9U,EAAW,IAAK6U,GAChC1c,EAAgB6H,EAAW,IAAK6U,GACtC,GAAc,MAAVC,EACFvoB,KAAKioB,oBAAoBrc,OACpB,IAAc,MAAV2c,EAIT,MAAM,IAAItpB,MAAM,2BAA6BspB,GAF7CvoB,KAAKqmB,oBAAoBtmB,KAAK6L,IAM1Bwc,0BAAAA,GACFpoB,KAAKqoB,6BAA+B,GACtCroB,KAAKyb,KAAK,oCACVzb,KAAKonB,YAAa,EAClBpnB,KAAKmnB,eAAexI,wBACpB3e,KAAKwoB,wBAGLxoB,KAAKyb,KAAK,8BACVzb,KAAKmnB,eAAepI,KAAK,CAAE3P,EAAG,IAAKE,EAAG,CAAEF,EAlOjC,IAkO0CE,EAAG,CAAC,MAIjDkZ,mBAAAA,GAENxoB,KAAKmnB,eAAepJ,QAEpB/d,KAAKyb,KAAK,mCACVzb,KAAKmnB,eAAepI,KAAK,CAAE3P,EAAG,IAAKE,EAAG,CAAEF,EA7OzB,IA6OwCE,EAAG,CAAC,KAI3DtP,KAAKyb,KAAK,kCACVzb,KAAK0mB,MAAM3H,KAAK,CAAE3P,EAAG,IAAKE,EAAG,CAAEF,EAjPV,IAiP+BE,EAAG,CAAC,KACxDtP,KAAKinB,IAAMjnB,KAAKmnB,eAEhBnnB,KAAKgoB,uBAGCN,yBAAAA,CAA0BY,GAEhC,MAAMC,EAAgB9U,EAAW,IAAK6U,GAChC1c,EAAgB6H,EAAW,IAAK6U,GACxB,MAAVC,EACFvoB,KAAKyoB,WAAW7c,GACG,MAAV2c,GACTvoB,KAAK0oB,eAAe9c,GAIhB8c,cAAAA,CAAe/mB,GACrB3B,KAAK2oB,qBAGL3oB,KAAKqa,WAAW1Y,GAGVgnB,kBAAAA,GACD3oB,KAAKonB,aACRpnB,KAAK4mB,4BACD5mB,KAAK4mB,2BAA6B,IACpC5mB,KAAKyb,KAAK,kCACVzb,KAAKonB,YAAa,EAClBpnB,KAAK0mB,MAAM/H,0BAKT8J,UAAAA,CAAWP,GACjB,MAAMC,EAAc1U,EA5RH,IA4R4ByU,GAC7C,GA5RiB,MA4RGA,EAAa,CAC/B,MAAMnf,EAAUmf,EAAwB,EACxC,GArRe,MAqRXC,EAAsB,CACxB,MAAMS,EAAgBhjB,OAAAoD,OAAA,GAChBD,GAOF/I,KAAK8lB,UAAUnN,kBAEjBiQ,EAAiBC,EAAI7oB,KAAK8lB,UAAU3e,MAEtCnH,KAAK8oB,aAAaF,QACb,GAtSY,MAsSRT,EAA0B,CACnCnoB,KAAKyb,KAAK,qCACVzb,KAAKknB,IAAMlnB,KAAKmnB,eAChB,IAAK,IAAIllB,EAAI,EAAGA,EAAIjC,KAAKqmB,oBAAoBjnB,SAAU6C,EACrDjC,KAAK0oB,eAAe1oB,KAAKqmB,oBAAoBpkB,IAE/CjC,KAAKqmB,oBAAsB,GAC3BrmB,KAAKgoB,2BAlTY,MAmTRG,EAGTnoB,KAAK+oB,sBAAsBhgB,GArTb,MAsTLof,EAETnoB,KAAKgpB,SAASjgB,GAvTA,MAwTLof,EACTjnB,EAAM,iBAAmB6H,GAxTZ,MAyTJof,GACTnoB,KAAKyb,KAAK,wBACVzb,KAAK2oB,qBACL3oB,KAAKipB,iCAEL/nB,EAAM,mCAAqCinB,IAQzCW,YAAAA,CAAaI,GAMnB,MAAMC,EAAYD,EAAU9H,GACtB7Q,EAAU2Y,EAAUhV,EACpB/M,EAAO+hB,EAAUL,EACvB7oB,KAAKopB,UAAYF,EAAU9U,EAC3BpU,KAAK8lB,UAAU3e,KAAOA,EAEF,IAAhBnH,KAAKsmB,SACPtmB,KAAK0mB,MAAM3I,QACX/d,KAAKqpB,yBAAyBrpB,KAAK0mB,MAAOyC,GACtCpR,IAAqBxH,GACvBxP,EAAK,sCAGPf,KAAKspB,oBAIDA,gBAAAA,GACN,MAAM7C,EAAOzmB,KAAKumB,kBAAkBX,mBAChCa,GACFzmB,KAAKupB,cAAc9C,GAIf8C,aAAAA,CAAc9C,GACpBzmB,KAAKmnB,eAAiB,IAAIV,EACxBzmB,KAAK2mB,mBACL3mB,KAAK8lB,UACL9lB,KAAK+lB,eACL/lB,KAAKgmB,eACLhmB,KAAKimB,WACLjmB,KAAKopB,WAIPppB,KAAKqoB,4BACH5B,EAAmC,8BAAK,EAE1C,MAAM7K,EAAY5b,KAAK8mB,cAAc9mB,KAAKmnB,gBACpCtL,EAAe7b,KAAKgnB,iBAAiBhnB,KAAKmnB,gBAChDnnB,KAAKmnB,eAAe5c,KAAKqR,EAAWC,GAGpCnG,GAAsB,KAChB1V,KAAKmnB,iBACPnnB,KAAKyb,KAAK,gCACVzb,KAAKmnB,eAAezc,WAErB6J,KAAKI,MAnZY,MAsZdqU,QAAAA,CAAS7hB,GACfnH,KAAKyb,KAAK,qCAAuCtU,GACjDnH,KAAK8lB,UAAU3e,KAAOA,EAGF,IAAhBnH,KAAKsmB,OACPtmB,KAAK0K,SAGL1K,KAAKwpB,oBACLxpB,KAAKwmB,UAID6C,wBAAAA,CAAyB5C,EAAiB0C,GAChDnpB,KAAKyb,KAAK,oCACVzb,KAAK0mB,MAAQD,EACbzmB,KAAKsmB,OAAS,EAEVtmB,KAAKkmB,WACPlmB,KAAKkmB,SAASiD,EAAWnpB,KAAKopB,WAC9BppB,KAAKkmB,SAAW,MAKqB,IAAnClmB,KAAK4mB,2BACP5mB,KAAKyb,KAAK,kCACVzb,KAAKonB,YAAa,GAElB1R,GAAsB,KACpB1V,KAAKipB,+BAA+B,GACnC1U,KAAKI,MAlb8B,MAsblCsU,6BAAAA,GAEDjpB,KAAKonB,YAAqD,IAAvCpnB,KAAKsmB,SAC3BtmB,KAAKyb,KAAK,4BACVzb,KAAK+nB,UAAU,CAAE3Y,EAAG,IAAKE,EAAG,CAAEF,EApavB,IAoagCE,EAAG,CAAC,MAIvCmY,0BAAAA,GACN,MAAMhB,EAAOzmB,KAAKmnB,eAClBnnB,KAAKmnB,eAAiB,KAClBnnB,KAAKinB,MAAQR,GAAQzmB,KAAKknB,MAAQT,GAEpCzmB,KAAK0K,QAQD8c,iBAAAA,CAAkBD,GACxBvnB,KAAK0mB,MAAQ,KAIRa,GAAiC,IAAhBvnB,KAAKsmB,OAQA,IAAhBtmB,KAAKsmB,QACdtmB,KAAKyb,KAAK,8BARVzb,KAAKyb,KAAK,+BAENzb,KAAK8lB,UAAU7M,oBACjBvH,EAAkBR,OAAO,QAAUlR,KAAK8lB,UAAU3e,MAElDnH,KAAK8lB,UAAU9M,aAAehZ,KAAK8lB,UAAU3e,OAMjDnH,KAAK0K,QAGCqe,qBAAAA,CAAsBU,GAC5BzpB,KAAKyb,KAAK,0DAENzb,KAAKmmB,UACPnmB,KAAKmmB,QAAQsD,GACbzpB,KAAKmmB,QAAU,MAKjBnmB,KAAKgc,cAAgB,KAErBhc,KAAK0K,QAGCqd,SAAAA,CAAUnc,GAChB,GAAoB,IAAhB5L,KAAKsmB,OACP,KAAM,8BAENtmB,KAAKinB,IAAIlI,KAAKnT,GAOlBlB,KAAAA,GACsB,IAAhB1K,KAAKsmB,SACPtmB,KAAKyb,KAAK,gCACVzb,KAAKsmB,OAAS,EAEdtmB,KAAKwpB,oBAEDxpB,KAAKgc,gBACPhc,KAAKgc,gBACLhc,KAAKgc,cAAgB,OAKnBwN,iBAAAA,GACNxpB,KAAKyb,KAAK,iCACNzb,KAAK0mB,QACP1mB,KAAK0mB,MAAMhc,QACX1K,KAAK0mB,MAAQ,MAGX1mB,KAAKmnB,iBACPnnB,KAAKmnB,eAAezc,QACpB1K,KAAKmnB,eAAiB,MAGpBnnB,KAAKsnB,kBACPlK,aAAapd,KAAKsnB,iBAClBtnB,KAAKsnB,gBAAkB,aCjiBPoC,GAkBpBC,GAAAA,CACEC,EACAhe,EACAie,EACAC,GAAa,CAGfC,KAAAA,CACEH,EACAhe,EACAie,EACAC,GAAa,CAOfE,gBAAAA,CAAiBxhB,GAAgB,CAMjCyhB,oBAAAA,CAAqBzhB,GAAgB,CAErC0hB,eAAAA,CACEN,EACAhe,EACAie,GAA2C,CAG7CM,iBAAAA,CACEP,EACAhe,EACAie,GAA2C,CAG7CO,kBAAAA,CACER,EACAC,GAA2C,CAG7CQ,WAAAA,CAAYC,GAAkC,QC/D1BC,GAQpB5qB,WAAAA,CAAoB6qB,GAAA,KAAcA,eAAdA,EAPZ,KAAUC,WAKd,CAAC,GAGHhpB,EAAAA,EAAAA,IACEnC,MAAM2D,QAAQunB,IAAmBA,EAAeprB,OAAS,EACzD,8BAeMsrB,OAAAA,CAAQC,GAChB,GAAIrrB,MAAM2D,QAAQjD,KAAKyqB,WAAWE,IAAa,CAE7C,MAAMC,EAAY,IAAI5qB,KAAKyqB,WAAWE,IAAY,QAAA3pB,EAAA7B,UAAAC,OAHdsT,EAAkB,IAAApT,MAAA0B,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAlBsR,EAAkBtR,EAAA,GAAAjC,UAAAiC,GAKtD,IAAK,IAAIa,EAAI,EAAGA,EAAI2oB,EAAUxrB,OAAQ6C,IACpC2oB,EAAU3oB,GAAGoG,SAAS8J,MAAMyY,EAAU3oB,GAAG4oB,QAASnY,IAKxDoY,EAAAA,CAAGH,EAAmBtiB,EAAgCwiB,GACpD7qB,KAAK+qB,mBAAmBJ,GACxB3qB,KAAKyqB,WAAWE,GAAa3qB,KAAKyqB,WAAWE,IAAc,GAC3D3qB,KAAKyqB,WAAWE,GAAW5qB,KAAK,CAAEsI,WAAUwiB,YAE5C,MAAMG,EAAYhrB,KAAKirB,gBAAgBN,GACnCK,GACF3iB,EAAS8J,MAAM0Y,EAASG,GAI5BE,GAAAA,CAAIP,EAAmBtiB,EAAgCwiB,GACrD7qB,KAAK+qB,mBAAmBJ,GACxB,MAAMC,EAAY5qB,KAAKyqB,WAAWE,IAAc,GAChD,IAAK,IAAI1oB,EAAI,EAAGA,EAAI2oB,EAAUxrB,OAAQ6C,IACpC,GACE2oB,EAAU3oB,GAAGoG,WAAaA,KACxBwiB,GAAWA,IAAYD,EAAU3oB,GAAG4oB,SAGtC,YADAD,EAAUO,OAAOlpB,EAAG,GAMlB8oB,kBAAAA,CAAmBJ,IACzBlpB,EAAAA,EAAAA,IACEzB,KAAKwqB,eAAeY,MAAKC,GAChBA,IAAOV,IAEhB,kBAAoBA,IC9DpB,MAAOW,WAAsBf,GAGjC,kBAAOgB,GACL,OAAO,IAAID,GAGb3rB,WAAAA,GACEsL,MAAM,CAAC,WAPD,KAAOugB,SAAG,EAcI,qBAAXtlB,QAC4B,qBAA5BA,OAAOuW,mBACb5S,EAAAA,EAAAA,QAED3D,OAAOuW,iBACL,UACA,KACOzc,KAAKwrB,UACRxrB,KAAKwrB,SAAU,EACfxrB,KAAK0qB,QAAQ,UAAU,OAG3B,GAGFxkB,OAAOuW,iBACL,WACA,KACMzc,KAAKwrB,UACPxrB,KAAKwrB,SAAU,EACfxrB,KAAK0qB,QAAQ,UAAU,OAG3B,IAKNO,eAAAA,CAAgBN,GAEd,OADAlpB,EAAAA,EAAAA,IAAqB,WAAdkpB,EAAwB,uBAAyBA,GACjD,CAAC3qB,KAAKwrB,SAGfC,eAAAA,GACE,OAAOzrB,KAAKwrB,eC5CHE,GAQX/rB,WAAAA,CAAYgsB,EAAiCC,GAC3C,QAAiB,IAAbA,EAAqB,CACvB5rB,KAAK6rB,QAAWF,EAAwBnf,MAAM,KAG9C,IAAIsf,EAAS,EACb,IAAK,IAAI7pB,EAAI,EAAGA,EAAIjC,KAAK6rB,QAAQzsB,OAAQ6C,IACnCjC,KAAK6rB,QAAQ5pB,GAAG7C,OAAS,IAC3BY,KAAK6rB,QAAQC,GAAU9rB,KAAK6rB,QAAQ5pB,GACpC6pB,KAGJ9rB,KAAK6rB,QAAQzsB,OAAS0sB,EAEtB9rB,KAAK+rB,UAAY,OAEjB/rB,KAAK6rB,QAAUF,EACf3rB,KAAK+rB,UAAYH,EAIrBza,QAAAA,GACE,IAAIyY,EAAa,GACjB,IAAK,IAAI3nB,EAAIjC,KAAK+rB,UAAW9pB,EAAIjC,KAAK6rB,QAAQzsB,OAAQ6C,IAC5B,KAApBjC,KAAK6rB,QAAQ5pB,KACf2nB,GAAc,IAAM5pB,KAAK6rB,QAAQ5pB,IAIrC,OAAO2nB,GAAc,cAIToC,KACd,OAAO,IAAIN,GAAK,GAClB,CAEM,SAAUO,GAAaC,GAC3B,OAAIA,EAAKH,WAAaG,EAAKL,QAAQzsB,OAC1B,KAGF8sB,EAAKL,QAAQK,EAAKH,UAC3B,CAKM,SAAUI,GAAcD,GAC5B,OAAOA,EAAKL,QAAQzsB,OAAS8sB,EAAKH,SACpC,CAEM,SAAUK,GAAaF,GAC3B,IAAIN,EAAWM,EAAKH,UAIpB,OAHIH,EAAWM,EAAKL,QAAQzsB,QAC1BwsB,IAEK,IAAIF,GAAKQ,EAAKL,QAASD,EAChC,CAEM,SAAUS,GAAYH,GAC1B,OAAIA,EAAKH,UAAYG,EAAKL,QAAQzsB,OACzB8sB,EAAKL,QAAQK,EAAKL,QAAQzsB,OAAS,GAGrC,IACT,UAiBgBktB,GAAUJ,GAA6B,IAAjBK,EAAAptB,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAgB,EACpD,OAAO+sB,EAAKL,QAAQW,MAAMN,EAAKH,UAAYQ,EAC7C,CAEM,SAAUE,GAAWP,GACzB,GAAIA,EAAKH,WAAaG,EAAKL,QAAQzsB,OACjC,OAAO,KAGT,MAAMstB,EAAS,GACf,IAAK,IAAIzqB,EAAIiqB,EAAKH,UAAW9pB,EAAIiqB,EAAKL,QAAQzsB,OAAS,EAAG6C,IACxDyqB,EAAO3sB,KAAKmsB,EAAKL,QAAQ5pB,IAG3B,OAAO,IAAIypB,GAAKgB,EAAQ,EAC1B,CAEgB,SAAAC,GAAUT,EAAYU,GACpC,MAAMF,EAAS,GACf,IAAK,IAAIzqB,EAAIiqB,EAAKH,UAAW9pB,EAAIiqB,EAAKL,QAAQzsB,OAAQ6C,IACpDyqB,EAAO3sB,KAAKmsB,EAAKL,QAAQ5pB,IAG3B,GAAI2qB,aAAwBlB,GAC1B,IAAK,IAAIzpB,EAAI2qB,EAAab,UAAW9pB,EAAI2qB,EAAaf,QAAQzsB,OAAQ6C,IACpEyqB,EAAO3sB,KAAK6sB,EAAaf,QAAQ5pB,QAE9B,CACL,MAAM4qB,EAAcD,EAAapgB,MAAM,KACvC,IAAK,IAAIvK,EAAI,EAAGA,EAAI4qB,EAAYztB,OAAQ6C,IAClC4qB,EAAY5qB,GAAG7C,OAAS,GAC1BstB,EAAO3sB,KAAK8sB,EAAY5qB,IAK9B,OAAO,IAAIypB,GAAKgB,EAAQ,EAC1B,CAKM,SAAUI,GAAYZ,GAC1B,OAAOA,EAAKH,WAAaG,EAAKL,QAAQzsB,MACxC,CAKgB,SAAA2tB,GAAgBC,EAAiBC,GAC/C,MAAMC,EAAQjB,GAAae,GACzBG,EAAQlB,GAAagB,GACvB,GAAc,OAAVC,EACF,OAAOD,EACF,GAAIC,IAAUC,EACnB,OAAOJ,GAAgBX,GAAaY,GAAYZ,GAAaa,IAE7D,MAAM,IAAIhuB,MACR,8BACEguB,EADF,8BAIED,EACA,IAGR,CAKgB,SAAAI,GAAYC,EAAYC,GACtC,MAAMC,EAAWjB,GAAUe,EAAM,GAC3BG,EAAYlB,GAAUgB,EAAO,GACnC,IAAK,IAAIrrB,EAAI,EAAGA,EAAIsrB,EAASnuB,QAAU6C,EAAIurB,EAAUpuB,OAAQ6C,IAAK,CAChE,MAAMwrB,EAAMra,EAAYma,EAAStrB,GAAIurB,EAAUvrB,IAC/C,GAAY,IAARwrB,EACF,OAAOA,EAGX,OAAIF,EAASnuB,SAAWouB,EAAUpuB,OACzB,EAEFmuB,EAASnuB,OAASouB,EAAUpuB,QAAU,EAAI,CACnD,CAKgB,SAAAsuB,GAAWxB,EAAYyB,GACrC,GAAIxB,GAAcD,KAAUC,GAAcwB,GACxC,OAAO,EAGT,IACE,IAAI1rB,EAAIiqB,EAAKH,UAAWlc,EAAI8d,EAAM5B,UAClC9pB,GAAKiqB,EAAKL,QAAQzsB,OAClB6C,IAAK4N,IAEL,GAAIqc,EAAKL,QAAQ5pB,KAAO0rB,EAAM9B,QAAQhc,GACpC,OAAO,EAIX,OAAO,CACT,CAKgB,SAAA+d,GAAa1B,EAAYyB,GACvC,IAAI1rB,EAAIiqB,EAAKH,UACTlc,EAAI8d,EAAM5B,UACd,GAAII,GAAcD,GAAQC,GAAcwB,GACtC,OAAO,EAET,KAAO1rB,EAAIiqB,EAAKL,QAAQzsB,QAAQ,CAC9B,GAAI8sB,EAAKL,QAAQ5pB,KAAO0rB,EAAM9B,QAAQhc,GACpC,OAAO,IAEP5N,IACA4N,EAEJ,OAAO,CACT,OAYage,GASXluB,WAAAA,CAAYusB,EAAmB4B,GAAA,KAAYA,aAAZA,EAC7B9tB,KAAK+tB,OAASzB,GAAUJ,EAAM,GAE9BlsB,KAAKguB,YAAczZ,KAAK0Z,IAAI,EAAGjuB,KAAK+tB,OAAO3uB,QAE3C,IAAK,IAAI6C,EAAI,EAAGA,EAAIjC,KAAK+tB,OAAO3uB,OAAQ6C,IACtCjC,KAAKguB,cAAe7d,EAAAA,EAAAA,IAAanQ,KAAK+tB,OAAO9rB,IAE/CisB,GAAyBluB,OA0B7B,SAASkuB,GAAyBC,GAChC,GAAIA,EAAeH,YAvRS,IAwR1B,MAAM,IAAI/uB,MACRkvB,EAAeL,aAAfK,yCAIEA,EAAeH,YACf,MAGN,GAAIG,EAAeJ,OAAO3uB,OApSL,GAqSnB,MAAM,IAAIH,MACRkvB,EAAeL,aAAfK,gGAIEC,GAA4BD,GAGpC,CAKM,SAAUC,GACdD,GAEA,OAAqC,IAAjCA,EAAeJ,OAAO3uB,OACjB,GAEF,gBAAkB+uB,EAAeJ,OAAOjqB,KAAK,KAAO,GAC7D,CCxTM,MAAOuqB,WAA0B9D,GAGrC,kBAAOgB,GACL,OAAO,IAAI8C,GAGb1uB,WAAAA,GAEE,IAAI2uB,EACAC,EAFJtjB,MAAM,CAAC,YAIe,qBAAbpE,UAC8B,qBAA9BA,SAAS4V,mBAEkB,qBAAvB5V,SAAiB,QAE1B0nB,EAAmB,mBACnBD,EAAS,UACiC,qBAA1BznB,SAAoB,WACpC0nB,EAAmB,sBACnBD,EAAS,aACgC,qBAAzBznB,SAAmB,UACnC0nB,EAAmB,qBACnBD,EAAS,YACoC,qBAA7BznB,SAAuB,eACvC0nB,EAAmB,yBACnBD,EAAS,iBAQbtuB,KAAKwuB,UAAW,EAEZD,GACF1nB,SAAS4V,iBACP8R,GACA,KACE,MAAME,GAAW5nB,SAASynB,GACtBG,IAAYzuB,KAAKwuB,WACnBxuB,KAAKwuB,SAAWC,EAChBzuB,KAAK0qB,QAAQ,UAAW+D,OAG5B,GAKNxD,eAAAA,CAAgBN,GAEd,OADAlpB,EAAAA,EAAAA,IAAqB,YAAdkpB,EAAyB,uBAAyBA,GAClD,CAAC3qB,KAAKwuB,WCjCjB,MAAME,GAAsB,IA4CtB,MAAOC,WAA6BjF,GAwDxC/pB,WAAAA,CACUmmB,EACAC,EACA6I,EAMAC,EACAC,EACAC,EACAC,EACAC,GAIR,GAFAhkB,QAdQ,KAAS6a,UAATA,EACA,KAAcC,eAAdA,EACA,KAAa6I,cAAbA,EAMA,KAAgBC,iBAAhBA,EACA,KAAmBC,oBAAnBA,EACA,KAAkBC,mBAAlBA,EACA,KAAsBC,uBAAtBA,EACA,KAAaC,cAAbA,EAnEV,KAAAnd,GAAK6c,GAAqBO,8BAClB,KAAIzT,KAAG9I,EAAW,KAAO3S,KAAK8R,GAAK,KAEnC,KAAiBqd,kBAAkC,CAAC,EAC3C,KAAAC,QAGb,IAAIC,IACA,KAAgBC,iBAAqB,GACrC,KAAgBC,iBAAqB,GACrC,KAAoBC,qBAAG,EACvB,KAAoBC,qBAAG,EACvB,KAAyBC,0BAA0B,GACnD,KAAUC,YAAG,EACb,KAAeC,gBAAGlB,GAClB,KAAkBmB,mBA5DQ,IA6D1B,KAAsBC,uBAAiC,KAC/D,KAAazU,cAAkB,KAEvB,KAAyB0U,0BAAkB,KAE3C,KAAQvB,UAAY,EAGpB,KAAcwB,eAA0C,CAAC,EACzD,KAAcC,eAAG,EAEjB,KAASC,UAGN,KAEH,KAAUjK,WAAkB,KAC5B,KAAcD,eAAkB,KAChC,KAAkBmK,oBAAG,EACrB,KAAsBC,uBAAG,EACzB,KAA0BC,2BAAG,EAE7B,KAAgBC,kBAAG,EACnB,KAA0BC,2BAAkB,KAC5C,KAA8BC,+BAAkB,KA+BlDvB,KAAkBjlB,EAAAA,EAAAA,MACpB,MAAM,IAAI/K,MACR,kFAIJovB,GAAkB9C,cAAcT,GAAG,UAAW9qB,KAAKywB,WAAYzwB,OAEpB,IAAvC8lB,EAAU3e,KAAK4R,QAAQ,YACzBuS,GAAcC,cAAcT,GAAG,SAAU9qB,KAAK0wB,UAAW1wB,MAInD4nB,WAAAA,CACR+I,EACAnU,EACAoU,GAEA,MAAMC,IAAc7wB,KAAKiwB,eAEnBnI,EAAM,CAAEgJ,EAAGD,EAAWxjB,EAAGsjB,EAAQrjB,EAAGkP,GAC1Cxc,KAAKyb,MAAKjS,EAAAA,EAAAA,IAAUse,KACpBrmB,EAAAA,EAAAA,IACEzB,KAAK2vB,WACL,0DAEF3vB,KAAKkwB,UAAUtI,YAAYE,GACvB8I,IACF5wB,KAAKgwB,eAAea,GAAaD,GAIrC7f,GAAAA,CAAIuI,GACFtZ,KAAK+wB,kBAEL,MAAMC,EAAW,IAAIjpB,EAAAA,GAKfkpB,EAAiB,CACrBN,OAAQ,IACRrmB,QANc,CACdtI,EAAGsX,EAAM4X,MAAM/f,WACfggB,EAAG7X,EAAM8X,cAKTvH,WAAaloB,IACX,MAAMoH,EAAUpH,EAAW,EACN,OAAjBA,EAAW,EACbqvB,EAAS/oB,QAAQc,GAEjBioB,EAAShpB,OAAOe,KAItB/I,KAAKuvB,iBAAiBxvB,KAAKkxB,GAC3BjxB,KAAKyvB,uBACL,MAAM4B,EAAQrxB,KAAKuvB,iBAAiBnwB,OAAS,EAM7C,OAJIY,KAAK2vB,YACP3vB,KAAKsxB,SAASD,GAGTL,EAAS9oB,QAGlBqpB,MAAAA,CACEjY,EACAkY,EACAC,EACA5H,GAEA7pB,KAAK+wB,kBAEL,MAAMW,EAAUpY,EAAMqY,iBAChB/H,EAAatQ,EAAM4X,MAAM/f,WAC/BnR,KAAKyb,KAAK,qBAAuBmO,EAAa,IAAM8H,GAC/C1xB,KAAKovB,QAAQwC,IAAIhI,IACpB5pB,KAAKovB,QAAQze,IAAIiZ,EAAY,IAAIyF,MAEnC5tB,EAAAA,EAAAA,IACE6X,EAAMuY,aAAaC,cAAgBxY,EAAMuY,aAAaE,eACtD,uDAEFtwB,EAAAA,EAAAA,KACGzB,KAAKovB,QAAQre,IAAI6Y,GAAagI,IAAIF,GACnC,gDAEF,MAAMM,EAAyB,CAC7BnI,aACAoI,OAAQT,EACRlY,QACAmY,OAEFzxB,KAAKovB,QAAQre,IAAI6Y,GAAajZ,IAAI+gB,EAASM,GAEvChyB,KAAK2vB,YACP3vB,KAAKkyB,YAAYF,GAIbV,QAAAA,CAASD,GACf,MAAMtgB,EAAM/Q,KAAKuvB,iBAAiB8B,GAClCrxB,KAAK4nB,YAAY,IAAK7W,EAAIzG,SAAU3I,WAC3B3B,KAAKuvB,iBAAiB8B,GAC7BrxB,KAAKyvB,uBAC6B,IAA9BzvB,KAAKyvB,uBACPzvB,KAAKuvB,iBAAmB,IAEtBxe,EAAI8Y,YACN9Y,EAAI8Y,WAAWloB,MAKbuwB,WAAAA,CAAYF,GAClB,MAAM1Y,EAAQ0Y,EAAW1Y,MACnBsQ,EAAatQ,EAAM4X,MAAM/f,WACzBugB,EAAUpY,EAAMqY,iBACtB3xB,KAAKyb,KAAK,aAAemO,EAAa,QAAU8H,GAChD,MAAMS,EAAgC,CAAWnwB,EAAG4nB,GAKhDoI,EAAWP,MACbU,EAAO,EAAI7Y,EAAM8X,aACjBe,EAAO,EAAIH,EAAWP,KAGxBU,EAAgB,EAAIH,EAAWC,SAE/BjyB,KAAK4nB,YAVU,IAUUuK,GAAMxwB,IAC7B,MAAMoH,EAAmBpH,EAAoB,EACvCywB,EAASzwB,EAAsB,EAGrCgtB,GAAqB0D,sBAAsBtpB,EAASuQ,IAGlDtZ,KAAKovB,QAAQre,IAAI6Y,IACjB5pB,KAAKovB,QAAQre,IAAI6Y,GAAa7Y,IAAI2gB,MAEVM,IACxBhyB,KAAKyb,KAAK,kBAAmB9Z,GAEd,OAAXywB,GACFpyB,KAAKsyB,cAAc1I,EAAY8H,GAG7BM,EAAWnI,YACbmI,EAAWnI,WAAWuI,EAAQrpB,OAM9B,4BAAOspB,CAAsBtpB,EAAkBuQ,GACrD,GAAIvQ,GAA8B,kBAAZA,IAAwB4D,EAAAA,EAAAA,IAAS5D,EAAS,KAAM,CAEpE,MAAMwpB,GAAWzlB,EAAAA,EAAAA,IAAQ/D,EAAgB,KACzC,GAAIzJ,MAAM2D,QAAQsvB,KAAcA,EAASxZ,QAAQ,YAAa,CAC5D,MAAMyZ,EACJ,gBAAkBlZ,EAAMuY,aAAaY,WAAWthB,WAAa,IACzDuhB,EAAYpZ,EAAM4X,MAAM/f,WAC9BpQ,EAEI,wGAA2CyxB,QACxCE,sDAMb1I,gBAAAA,CAAiBxhB,GACfxI,KAAKimB,WAAazd,EAClBxI,KAAKyb,KAAK,wBACNzb,KAAKimB,WACPjmB,KAAK2yB,UAID3yB,KAAK2vB,YACP3vB,KAAK4nB,YAAY,SAAU,CAAC,GAAG,SAInC5nB,KAAK4yB,uCAAuCpqB,GAGtCoqB,sCAAAA,CAAuCC,IAGpBA,GAAoC,KAAtBA,EAAWzzB,SAC1BsN,EAAAA,EAAAA,IAAQmmB,MAC9B7yB,KAAKyb,KACH,iEAEFzb,KAAK6vB,mBAtT4B,KA0TrC5F,oBAAAA,CAAqBzhB,GACnBxI,KAAKgmB,eAAiBxd,EACtBxI,KAAKyb,KAAK,6BACNzb,KAAKgmB,eACPhmB,KAAK8yB,cAKD9yB,KAAK2vB,YACP3vB,KAAK4nB,YAAY,WAAY,CAAC,GAAG,SASvC+K,OAAAA,GACE,GAAI3yB,KAAK2vB,YAAc3vB,KAAKimB,WAAY,CACtC,MAAMzd,EAAQxI,KAAKimB,WACb8M,GAAatmB,EAAAA,EAAAA,IAAcjE,GAAS,OAAS,QAC7CwqB,EAAwC,CAAEC,KAAMzqB,GAC3B,OAAvBxI,KAAKivB,cACP+D,EAAoB,QAAI,EACe,kBAAvBhzB,KAAKivB,gBACrB+D,EAAqB,QAAIhzB,KAAKivB,eAEhCjvB,KAAK4nB,YACHmL,EACAC,GACC7lB,IACC,MAAMilB,EAASjlB,EAAkB,EAC3BvB,EAAQuB,EAAgB,GAAgB,QAE1CnN,KAAKimB,aAAezd,IACP,OAAX4pB,EACFpyB,KAAKowB,uBAAyB,EAG9BpwB,KAAKkzB,eAAed,EAAQxmB,QAaxCknB,WAAAA,GACM9yB,KAAK2vB,YAAc3vB,KAAKgmB,gBAC1BhmB,KAAK4nB,YACH,WACA,CAAE,MAAS5nB,KAAKgmB,iBACf7Y,IACC,MAAMilB,EAASjlB,EAAkB,EAC3BvB,EAAQuB,EAAgB,GAAgB,QAC/B,OAAXilB,EACFpyB,KAAKqwB,2BAA6B,EAElCrwB,KAAKmzB,mBAAmBf,EAAQxmB,MAU1CwnB,QAAAA,CAAS9Z,EAAqBmY,GAC5B,MAAM7H,EAAatQ,EAAM4X,MAAM/f,WACzBugB,EAAUpY,EAAMqY,iBAEtB3xB,KAAKyb,KAAK,uBAAyBmO,EAAa,IAAM8H,IAEtDjwB,EAAAA,EAAAA,IACE6X,EAAMuY,aAAaC,cAAgBxY,EAAMuY,aAAaE,eACtD,wDAEa/xB,KAAKsyB,cAAc1I,EAAY8H,IAChC1xB,KAAK2vB,YACjB3vB,KAAKqzB,cAAczJ,EAAY8H,EAASpY,EAAM8X,aAAcK,GAIxD4B,aAAAA,CACNzJ,EACA8H,EACA4B,EACA7B,GAEAzxB,KAAKyb,KAAK,eAAiBmO,EAAa,QAAU8H,GAElD,MAAMS,EAAgC,CAAWnwB,EAAG4nB,GAGhD6H,IACFU,EAAO,EAAImB,EACXnB,EAAO,EAAIV,GAGbzxB,KAAK4nB,YAPU,IAOUuK,GAG3BjI,eAAAA,CACEN,EACAhe,EACAie,GAEA7pB,KAAK+wB,kBAED/wB,KAAK2vB,WACP3vB,KAAKuzB,kBAAkB,IAAK3J,EAAYhe,EAAMie,GAE9C7pB,KAAK0vB,0BAA0B3vB,KAAK,CAClC6pB,aACA+G,OAAQ,IACR/kB,OACAie,eAKNM,iBAAAA,CACEP,EACAhe,EACAie,GAEA7pB,KAAK+wB,kBAED/wB,KAAK2vB,WACP3vB,KAAKuzB,kBAAkB,KAAM3J,EAAYhe,EAAMie,GAE/C7pB,KAAK0vB,0BAA0B3vB,KAAK,CAClC6pB,aACA+G,OAAQ,KACR/kB,OACAie,eAKNO,kBAAAA,CACER,EACAC,GAEA7pB,KAAK+wB,kBAED/wB,KAAK2vB,WACP3vB,KAAKuzB,kBAAkB,KAAM3J,EAAY,KAAMC,GAE/C7pB,KAAK0vB,0BAA0B3vB,KAAK,CAClC6pB,aACA+G,OAAQ,KACR/kB,KAAM,KACNie,eAKE0J,iBAAAA,CACN5C,EACA/G,EACAhe,EACAie,GAEA,MAAMvf,EAAU,CAAWtI,EAAG4nB,EAAqBta,EAAG1D,GACtD5L,KAAKyb,KAAK,gBAAkBkV,EAAQrmB,GACpCtK,KAAK4nB,YAAY+I,EAAQrmB,GAAUkpB,IAC7B3J,GACFrU,YAAW,KACTqU,EACE2J,EAAuB,EACvBA,EAAuB,EACxB,GACAjf,KAAKI,MAAM,OAKpBgV,GAAAA,CACEC,EACAhe,EACAie,EACAC,GAEA9pB,KAAKyzB,YAAY,IAAK7J,EAAYhe,EAAMie,EAAYC,GAGtDC,KAAAA,CACEH,EACAhe,EACAie,EACAC,GAEA9pB,KAAKyzB,YAAY,IAAK7J,EAAYhe,EAAMie,EAAYC,GAGtD2J,WAAAA,CACE9C,EACA/G,EACAhe,EACAie,EACAC,GAEA9pB,KAAK+wB,kBAEL,MAAMzmB,EAAoC,CAC/BtI,EAAG4nB,EACHta,EAAG1D,QAGDnG,IAATqkB,IACFxf,EAAoB,EAAIwf,GAI1B9pB,KAAKsvB,iBAAiBvvB,KAAK,CACzB4wB,SACArmB,UACAuf,eAGF7pB,KAAKwvB,uBACL,MAAM6B,EAAQrxB,KAAKsvB,iBAAiBlwB,OAAS,EAEzCY,KAAK2vB,WACP3vB,KAAK0zB,SAASrC,GAEdrxB,KAAKyb,KAAK,kBAAoBmO,GAI1B8J,QAAAA,CAASrC,GACf,MAAMV,EAAS3wB,KAAKsvB,iBAAiB+B,GAAOV,OACtCrmB,EAAUtK,KAAKsvB,iBAAiB+B,GAAO/mB,QACvCuf,EAAa7pB,KAAKsvB,iBAAiB+B,GAAOxH,WAChD7pB,KAAKsvB,iBAAiB+B,GAAOsC,OAAS3zB,KAAK2vB,WAE3C3vB,KAAK4nB,YAAY+I,EAAQrmB,GAAU3I,IACjC3B,KAAKyb,KAAKkV,EAAS,YAAahvB,UAEzB3B,KAAKsvB,iBAAiB+B,GAC7BrxB,KAAKwvB,uBAG6B,IAA9BxvB,KAAKwvB,uBACPxvB,KAAKsvB,iBAAmB,IAGtBzF,GACFA,EACEloB,EAAsB,EACtBA,EAAsB,MAM9B0oB,WAAAA,CAAYC,GAEV,GAAItqB,KAAK2vB,WAAY,CACnB,MAAMrlB,EAAU,CAAepI,EAAGooB,GAClCtqB,KAAKyb,KAAK,cAAenR,GAEzBtK,KAAK4nB,YAAsB,IAAKtd,GAASG,IAEvC,GAAe,OADAA,EAAqB,EACf,CACnB,MAAMmpB,EAAcnpB,EAAqB,EACzCzK,KAAKyb,KAAK,cAAe,wBAA0BmY,QAMnDlL,cAAAA,CAAe/mB,GACrB,GAAI,MAAOA,EAAS,CAElB3B,KAAKyb,KAAK,iBAAkBjS,EAAAA,EAAAA,IAAU7H,IACtC,MAAMkyB,EAASlyB,EAAW,EACpBivB,EAAa5wB,KAAKgwB,eAAe6D,GACnCjD,WACK5wB,KAAKgwB,eAAe6D,GAC3BjD,EAAWjvB,EAAoB,QAE5B,IAAI,UAAWA,EACpB,KAAM,qCAAuCA,EAAe,MACnD,MAAOA,GAEhB3B,KAAK8zB,YAAYnyB,EAAW,EAAaA,EAAW,IAIhDmyB,WAAAA,CAAYnD,EAAgBnU,GAClCxc,KAAKyb,KAAK,sBAAuBkV,EAAQnU,GAC1B,MAAXmU,EACF3wB,KAAK4uB,cACHpS,EAAiB,EACjBA,EAAiB,GACL,EACZA,EAAQ,GAEU,MAAXmU,EACT3wB,KAAK4uB,cACHpS,EAAiB,EACjBA,EAAiB,GACJ,EACbA,EAAQ,GAEU,MAAXmU,EACT3wB,KAAK+zB,iBACHvX,EAAiB,EACjBA,EAAkB,GAEA,OAAXmU,EACT3wB,KAAKkzB,eACH1W,EAAwB,EACxBA,EAA0B,GAER,QAAXmU,EACT3wB,KAAKmzB,mBACH3W,EAAwB,EACxBA,EAA0B,GAER,OAAXmU,EACT3wB,KAAKg0B,uBAAuBxX,GAE5Btb,EACE,8CACEsI,EAAAA,EAAAA,IAAUmnB,GACV,sCAKAzK,QAAAA,CAASiD,EAAmBC,GAClCppB,KAAKyb,KAAK,oBACVzb,KAAK2vB,YAAa,EAClB3vB,KAAKwwB,gCAAiC,IAAI1xB,MAAO+G,UACjD7F,KAAKi0B,iBAAiB9K,GACtBnpB,KAAKqb,cAAgB+N,EACjBppB,KAAKswB,kBACPtwB,KAAKk0B,oBAEPl0B,KAAKm0B,gBACLn0B,KAAKswB,kBAAmB,EACxBtwB,KAAK6uB,kBAAiB,GAGhBuF,gBAAAA,CAAiBxe,IACvBnU,EAAAA,EAAAA,KACGzB,KAAKkwB,UACN,0DAGElwB,KAAK+vB,2BACP3S,aAAapd,KAAK+vB,2BAMpB/vB,KAAK+vB,0BAA4Bva,YAAW,KAC1CxV,KAAK+vB,0BAA4B,KACjC/vB,KAAKq0B,sBAAsB,GAE1B9f,KAAKI,MAAMiB,IAGRmb,eAAAA,IACD/wB,KAAKkwB,WAAalwB,KAAKswB,kBAC1BtwB,KAAKo0B,iBAAiB,GAIlB3D,UAAAA,CAAWhC,GAGfA,IACCzuB,KAAKwuB,UACNxuB,KAAK4vB,kBAAoB5vB,KAAK6vB,qBAE9B7vB,KAAKyb,KAAK,2CACVzb,KAAK4vB,gBAAkBlB,GAElB1uB,KAAKkwB,WACRlwB,KAAKo0B,iBAAiB,IAG1Bp0B,KAAKwuB,SAAWC,EAGViC,SAAAA,CAAU4D,GACZA,GACFt0B,KAAKyb,KAAK,wBACVzb,KAAK4vB,gBAAkBlB,GAClB1uB,KAAKkwB,WACRlwB,KAAKo0B,iBAAiB,KAGxBp0B,KAAKyb,KAAK,8CACNzb,KAAKkwB,WACPlwB,KAAKkwB,UAAUxlB,SAKb6pB,qBAAAA,GAWN,GAVAv0B,KAAKyb,KAAK,4BACVzb,KAAK2vB,YAAa,EAClB3vB,KAAKkwB,UAAY,KAGjBlwB,KAAKw0B,0BAGLx0B,KAAKgwB,eAAiB,CAAC,EAEnBhwB,KAAKy0B,mBAAoB,CAC3B,GAAKz0B,KAAKwuB,UAIH,GAAIxuB,KAAKwwB,+BAAgC,EAG5C,IAAI1xB,MAAO+G,UAAY7F,KAAKwwB,+BAxuBA,MA0uB5BxwB,KAAK4vB,gBAAkBlB,IAEzB1uB,KAAKwwB,+BAAiC,WAVtCxwB,KAAKyb,KAAK,8CACVzb,KAAK4vB,gBAAkB5vB,KAAK6vB,mBAC5B7vB,KAAKuwB,4BAA6B,IAAIzxB,MAAO+G,UAW/C,MAAM6uB,EAA8BngB,KAAK0Z,IACvC,GACA,IAAInvB,MAAO+G,UAAY7F,KAAKuwB,4BAE9B,IAAIoE,EAAiBpgB,KAAK0Z,IACxB,EACAjuB,KAAK4vB,gBAAkB8E,GAEzBC,EAAiBpgB,KAAKkJ,SAAWkX,EAEjC30B,KAAKyb,KAAK,0BAA4BkZ,EAAiB,MACvD30B,KAAKo0B,iBAAiBO,GAGtB30B,KAAK4vB,gBAAkBrb,KAAKG,IAC1B1U,KAAK6vB,mBA/vBsB,IAgwB3B7vB,KAAK4vB,iBAGT5vB,KAAK6uB,kBAAiB,GAGhB,0BAAMwF,GACZ,GAAIr0B,KAAKy0B,mBAAoB,CAC3Bz0B,KAAKyb,KAAK,+BACVzb,KAAKuwB,4BAA6B,IAAIzxB,MAAO+G,UAC7C7F,KAAKwwB,+BAAiC,KACtC,MAAMoE,EAAgB50B,KAAK0oB,eAAejW,KAAKzS,MACzC60B,EAAU70B,KAAKkmB,SAASzT,KAAKzS,MAC7B6b,EAAe7b,KAAKu0B,sBAAsB9hB,KAAKzS,MAC/Cib,EAASjb,KAAK8R,GAAK,IAAM6c,GAAqBmG,oBAC9CzZ,EAAgBrb,KAAKqb,cAC3B,IAAI0Z,GAAW,EACXC,EAAgC,KACpC,MAAMC,EAAU,WACVD,EACFA,EAAWtqB,SAEXqqB,GAAW,EACXlZ,IAEJ,EACMqZ,EAAgB,SAAUpN,IAC9BrmB,EAAAA,EAAAA,IACEuzB,EACA,0DAEFA,EAAWpN,YAAYE,EACzB,EAEA9nB,KAAKkwB,UAAY,CACfxlB,MAAOuqB,EACPrN,YAAasN,GAGf,MAAMte,EAAe5W,KAAKmwB,mBAC1BnwB,KAAKmwB,oBAAqB,EAE1B,IAGE,MAAOhV,EAAW9E,SAAuBlO,QAAQgtB,IAAI,CACnDn1B,KAAK+uB,mBAAmBpY,SAASC,GACjC5W,KAAKgvB,uBAAuBrY,SAASC,KAGlCme,EAoBHt0B,EAAI,0CAnBJA,EAAI,8CACJT,KAAKimB,WAAa9K,GAAaA,EAAUtD,YACzC7X,KAAKgmB,eAAiB3P,GAAiBA,EAAc7N,MACrDwsB,EAAa,IAAInP,GACf5K,EACAjb,KAAK8lB,UACL9lB,KAAK+lB,eACL/lB,KAAKgmB,eACLhmB,KAAKimB,WACL2O,EACAC,EACAhZ,GACc4N,IACZ1oB,EAAK0oB,EAAS,KAAOzpB,KAAK8lB,UAAU3U,WAAa,KACjDnR,KAAKo1B,UA/zBkB,cA+zBqB,GAE9C/Z,IAKJ,MAAOna,GACPlB,KAAKyb,KAAK,wBAA0Bva,GAC/B6zB,IACC/0B,KAAK8lB,UAAUtN,WAIjBzX,EAAKG,GAEP+zB,OAMRG,SAAAA,CAAU3L,GACRhpB,EAAI,uCAAyCgpB,GAC7CzpB,KAAKmvB,kBAAkB1F,IAAU,EAC7BzpB,KAAKkwB,UACPlwB,KAAKkwB,UAAUxlB,SAEX1K,KAAK+vB,4BACP3S,aAAapd,KAAK+vB,2BAClB/vB,KAAK+vB,0BAA4B,MAE/B/vB,KAAK2vB,YACP3vB,KAAKu0B,yBAKXc,MAAAA,CAAO5L,GACLhpB,EAAI,mCAAqCgpB,UAClCzpB,KAAKmvB,kBAAkB1F,IAC1B1c,EAAAA,EAAAA,IAAQ/M,KAAKmvB,qBACfnvB,KAAK4vB,gBAAkBlB,GAClB1uB,KAAKkwB,WACRlwB,KAAKo0B,iBAAiB,IAKpBH,gBAAAA,CAAiB9K,GACvB,MAAMmM,EAAQnM,GAAY,IAAIrqB,MAAO+G,UACrC7F,KAAK8uB,oBAAoB,CAAEyG,iBAAkBD,IAGvCd,uBAAAA,GACN,IAAK,IAAIvyB,EAAI,EAAGA,EAAIjC,KAAKsvB,iBAAiBlwB,OAAQ6C,IAAK,CACrD,MAAM0nB,EAAM3pB,KAAKsvB,iBAAiBrtB,GAC9B0nB,GAAgB,MAAOA,EAAIrf,SAAWqf,EAAIgK,SACxChK,EAAIE,YACNF,EAAIE,WAAW,qBAGV7pB,KAAKsvB,iBAAiBrtB,GAC7BjC,KAAKwvB,wBAKyB,IAA9BxvB,KAAKwvB,uBACPxvB,KAAKsvB,iBAAmB,IAIpByE,gBAAAA,CAAiBnK,EAAoBtQ,GAE3C,IAAIoY,EAIFA,EAHGpY,EAGOA,EAAMtM,KAAImkB,GAAKzd,EAAkByd,KAAIrtB,KAAK,KAF1C,UAIZ,MAAMytB,EAASvxB,KAAKsyB,cAAc1I,EAAY8H,GAC1CH,GAAUA,EAAO1H,YACnB0H,EAAO1H,WAAW,qBAIdyI,aAAAA,CAAc1I,EAAoB8H,GACxC,MAAM8D,EAAuB,IAAI9J,GAAK9B,GAAYzY,WAClD,IAAIogB,EACJ,GAAIvxB,KAAKovB,QAAQwC,IAAI4D,GAAuB,CAC1C,MAAMxoB,EAAMhN,KAAKovB,QAAQre,IAAIykB,GAC7BjE,EAASvkB,EAAI+D,IAAI2gB,GACjB1kB,EAAI4U,OAAO8P,GACM,IAAb1kB,EAAI8T,MACN9gB,KAAKovB,QAAQxN,OAAO4T,QAItBjE,OAAS9rB,EAEX,OAAO8rB,EAGD2B,cAAAA,CAAeuC,EAAoBC,GACzCj1B,EAAI,uBAAyBg1B,EAAa,IAAMC,GAChD11B,KAAKimB,WAAa,KAClBjmB,KAAKmwB,oBAAqB,EAC1BnwB,KAAKkwB,UAAUxlB,QACI,kBAAf+qB,GAAiD,sBAAfA,IAIpCz1B,KAAKowB,yBACDpwB,KAAKowB,wBA96BiB,IAg7BxBpwB,KAAK4vB,gBAt7B0B,IA07B/B5vB,KAAK+uB,mBAAmB/X,0BAKtBmc,kBAAAA,CAAmBsC,EAAoBC,GAC7Cj1B,EAAI,4BAA8Bg1B,EAAa,IAAMC,GACrD11B,KAAKgmB,eAAiB,KACtBhmB,KAAKmwB,oBAAqB,EAGP,kBAAfsF,GAAiD,sBAAfA,IAIpCz1B,KAAKqwB,6BACDrwB,KAAKqwB,4BAp8BiB,GAq8BxBrwB,KAAKgvB,uBAAuBhY,yBAK1Bgd,sBAAAA,CAAuBxX,GACzBxc,KAAK8vB,uBACP9vB,KAAK8vB,uBAAuBtT,GAExB,QAASA,GACXhd,QAAQiB,IACN,aAAgB+b,EAAU,IAAarX,QAAQ,KAAM,iBAMrDgvB,aAAAA,GAENn0B,KAAK2yB,UACL3yB,KAAK8yB,cAIL,IAAK,MAAM6C,KAAW31B,KAAKovB,QAAQwG,SACjC,IAAK,MAAM5D,KAAc2D,EAAQC,SAC/B51B,KAAKkyB,YAAYF,GAIrB,IAAK,IAAI/vB,EAAI,EAAGA,EAAIjC,KAAKsvB,iBAAiBlwB,OAAQ6C,IAC5CjC,KAAKsvB,iBAAiBrtB,IACxBjC,KAAK0zB,SAASzxB,GAIlB,KAAOjC,KAAK0vB,0BAA0BtwB,QAAQ,CAC5C,MAAMkL,EAAUtK,KAAK0vB,0BAA0BxO,QAC/ClhB,KAAKuzB,kBACHjpB,EAAQqmB,OACRrmB,EAAQsf,WACRtf,EAAQsB,KACRtB,EAAQuf,YAIZ,IAAK,IAAI5nB,EAAI,EAAGA,EAAIjC,KAAKuvB,iBAAiBnwB,OAAQ6C,IAC5CjC,KAAKuvB,iBAAiBttB,IACxBjC,KAAKsxB,SAASrvB,GAQZiyB,iBAAAA,GACN,MAAM5J,EAAiC,CAAC,EAExC,IAAIuL,EAAa,MACb7rB,EAAAA,EAAAA,QAEA6rB,EADE71B,KAAK8lB,UAAUtN,UACJ,aAEA,QAIjB8R,EAAM,OAASuL,EAAa,IAAMr0B,EAAY2D,QAAQ,MAAO,MAAQ,GAEjE0E,EAAAA,EAAAA,MACFygB,EAAM,qBAAuB,GACpBvgB,EAAAA,EAAAA,QACTugB,EAAM,yBAA2B,GAEnCtqB,KAAKqqB,YAAYC,GAGXmK,gBAAAA,GACN,MAAMH,EAAShJ,GAAcC,cAAcE,kBAC3C,OAAO1e,EAAAA,EAAAA,IAAQ/M,KAAKmvB,oBAAsBmF,GAr8B7B3F,GAA2BO,4BAAG,EAK9BP,GAAiBmG,kBAAG,QCQxBgB,GACXn2B,WAAAA,CAAmBF,EAAqBs2B,GAArB,KAAIt2B,KAAJA,EAAqB,KAAIs2B,KAAJA,EAExC,WAAOC,CAAKv2B,EAAcs2B,GACxB,OAAO,IAAID,GAAUr2B,EAAMs2B,UChITE,GASpBC,UAAAA,GACE,OAAOl2B,KAAKm2B,QAAQ1jB,KAAKzS,MAU3Bo2B,mBAAAA,CAAoBC,EAAeC,GACjC,MAAMC,EAAa,IAAIT,GAAU5iB,EAAUmjB,GACrCG,EAAa,IAAIV,GAAU5iB,EAAUojB,GAC3C,OAAgD,IAAzCt2B,KAAKm2B,QAAQI,EAAYC,GAOlCC,OAAAA,GAEE,OAAQX,GAAkBY,KC5B9B,IAAIC,GAEE,MAAOC,WAAiBX,GAC5B,uBAAWU,GACT,OAAOA,GAGT,uBAAWA,CAAa12B,GACtB02B,GAAe12B,EAEjBk2B,OAAAA,CAAQ9oB,EAAcC,GACpB,OAAO8F,EAAY/F,EAAE5N,KAAM6N,EAAE7N,MAE/Bo3B,WAAAA,CAAYd,GAGV,MAAMn0B,EAAAA,EAAAA,IAAe,mDAEvBw0B,mBAAAA,CAAoBC,EAAeC,GACjC,OAAO,EAETG,OAAAA,GAEE,OAAQX,GAAkBY,IAE5BI,OAAAA,GAGE,OAAO,IAAIhB,GAAU3iB,EAAUwjB,IAGjCI,QAAAA,CAASC,EAAoBv3B,GAM3B,OALAgC,EAAAA,EAAAA,IACwB,kBAAfu1B,EACP,gDAGK,IAAIlB,GAAUkB,EAAYL,IAMnCxlB,QAAAA,GACE,MAAO,QAIJ,MAAM8lB,GAAY,IAAIL,SC/BhBM,GAOXv3B,WAAAA,CACEo2B,EACAoB,EACAC,EACQC,GACmD,IAAnDC,EAAAn4B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAA+C,KAD/C,KAAUk4B,WAAVA,EACA,KAAgBC,iBAAhBA,EAXF,KAAUC,WAAgD,GAahE,IAAI9J,EAAM,EACV,MAAQsI,EAAKhpB,WAQX,GANA0gB,EAAM0J,EAAWC,EAAWrB,EAAKhqB,IAAKorB,GAAY,EAE9CE,IACF5J,IAAQ,GAGNA,EAAM,EAGNsI,EADE/1B,KAAKq3B,WACAtB,EAAK1I,KAEL0I,EAAKzI,UAET,IAAY,IAARG,EAAW,CAEpBztB,KAAKu3B,WAAWx3B,KAAKg2B,GACrB,MAGA/1B,KAAKu3B,WAAWx3B,KAAKg2B,GAEnBA,EADE/1B,KAAKq3B,WACAtB,EAAKzI,MAELyI,EAAK1I,MAMpBmK,OAAAA,GACE,GAA+B,IAA3Bx3B,KAAKu3B,WAAWn4B,OAClB,OAAO,KAGT,IACIqL,EADAsrB,EAAO/1B,KAAKu3B,WAAWE,MAQ3B,GALEhtB,EADEzK,KAAKs3B,iBACEt3B,KAAKs3B,iBAAiBvB,EAAKhqB,IAAKgqB,EAAKxwB,OAErC,CAAEwG,IAAKgqB,EAAKhqB,IAAKxG,MAAOwwB,EAAKxwB,OAGpCvF,KAAKq3B,WAEP,IADAtB,EAAOA,EAAK1I,MACJ0I,EAAKhpB,WACX/M,KAAKu3B,WAAWx3B,KAAKg2B,GACrBA,EAAOA,EAAKzI,WAId,IADAyI,EAAOA,EAAKzI,OACJyI,EAAKhpB,WACX/M,KAAKu3B,WAAWx3B,KAAKg2B,GACrBA,EAAOA,EAAK1I,KAIhB,OAAO5iB,EAGTitB,OAAAA,GACE,OAAO13B,KAAKu3B,WAAWn4B,OAAS,EAGlCu4B,IAAAA,GACE,GAA+B,IAA3B33B,KAAKu3B,WAAWn4B,OAClB,OAAO,KAGT,MAAM22B,EAAO/1B,KAAKu3B,WAAWv3B,KAAKu3B,WAAWn4B,OAAS,GACtD,OAAIY,KAAKs3B,iBACAt3B,KAAKs3B,iBAAiBvB,EAAKhqB,IAAKgqB,EAAKxwB,OAErC,CAAEwG,IAAKgqB,EAAKhqB,IAAKxG,MAAOwwB,EAAKxwB,cAQ7BqyB,GAYXj4B,WAAAA,CACSoM,EACAxG,EACPsyB,EACAxK,EACAC,GAJO,KAAGvhB,IAAHA,EACA,KAAKxG,MAALA,EAKPvF,KAAK63B,MAAiB,MAATA,EAAgBA,EAAQD,GAASE,IAC9C93B,KAAKqtB,KACK,MAARA,EAAeA,EAAQ0K,GAAUC,WACnCh4B,KAAKstB,MACM,MAATA,EAAgBA,EAASyK,GAAUC,WAgBvCC,IAAAA,CACElsB,EACAxG,EACAsyB,EACAxK,EACAC,GAEA,OAAO,IAAIsK,GACF,MAAP7rB,EAAcA,EAAM/L,KAAK+L,IAChB,MAATxG,EAAgBA,EAAQvF,KAAKuF,MACpB,MAATsyB,EAAgBA,EAAQ73B,KAAK63B,MACrB,MAARxK,EAAeA,EAAOrtB,KAAKqtB,KAClB,MAATC,EAAgBA,EAAQttB,KAAKstB,OAOjC4K,KAAAA,GACE,OAAOl4B,KAAKqtB,KAAK6K,QAAU,EAAIl4B,KAAKstB,MAAM4K,QAM5CnrB,OAAAA,GACE,OAAO,EAYTorB,gBAAAA,CAAiBxH,GACf,OACE3wB,KAAKqtB,KAAK8K,iBAAiBxH,MACzBA,EAAO3wB,KAAK+L,IAAK/L,KAAKuF,QACxBvF,KAAKstB,MAAM6K,iBAAiBxH,GAYhCyH,gBAAAA,CAAiBzH,GACf,OACE3wB,KAAKstB,MAAM8K,iBAAiBzH,IAC5BA,EAAO3wB,KAAK+L,IAAK/L,KAAKuF,QACtBvF,KAAKqtB,KAAK+K,iBAAiBzH,GAOvB0H,IAAAA,GACN,OAAIr4B,KAAKqtB,KAAKtgB,UACL/M,KAECA,KAAKqtB,KAAwBgL,OAOzCC,MAAAA,GACE,OAAOt4B,KAAKq4B,OAAOtsB,IAMrBwsB,MAAAA,GACE,OAAIv4B,KAAKstB,MAAMvgB,UACN/M,KAAK+L,IAEL/L,KAAKstB,MAAMiL,SAUtBC,MAAAA,CAAOzsB,EAAQxG,EAAU6xB,GACvB,IAAI3nB,EAAoBzP,KACxB,MAAMytB,EAAM2J,EAAWrrB,EAAK0D,EAAE1D,KAc9B,OAZE0D,EADEge,EAAM,EACJhe,EAAEwoB,KAAK,KAAM,KAAM,KAAMxoB,EAAE4d,KAAKmL,OAAOzsB,EAAKxG,EAAO6xB,GAAa,MACnD,IAAR3J,EACLhe,EAAEwoB,KAAK,KAAM1yB,EAAO,KAAM,KAAM,MAEhCkK,EAAEwoB,KACJ,KACA,KACA,KACA,KACAxoB,EAAE6d,MAAMkL,OAAOzsB,EAAKxG,EAAO6xB,IAGxB3nB,EAAEgpB,SAMHC,UAAAA,GACN,GAAI14B,KAAKqtB,KAAKtgB,UACZ,OAAOgrB,GAAUC,WAEnB,IAAIvoB,EAAoBzP,KAKxB,OAJKyP,EAAE4d,KAAKsL,UAAalpB,EAAE4d,KAAKA,KAAKsL,WACnClpB,EAAIA,EAAEmpB,gBAERnpB,EAAIA,EAAEwoB,KAAK,KAAM,KAAM,KAAOxoB,EAAE4d,KAAwBqL,aAAc,MAC/DjpB,EAAEgpB,SAQXvnB,MAAAA,CACEnF,EACAqrB,GAEA,IAAI3nB,EAAGopB,EAEP,GADAppB,EAAIzP,KACAo3B,EAAWrrB,EAAK0D,EAAE1D,KAAO,EACtB0D,EAAE4d,KAAKtgB,WAAc0C,EAAE4d,KAAKsL,UAAalpB,EAAE4d,KAAKA,KAAKsL,WACxDlpB,EAAIA,EAAEmpB,gBAERnpB,EAAIA,EAAEwoB,KAAK,KAAM,KAAM,KAAMxoB,EAAE4d,KAAKnc,OAAOnF,EAAKqrB,GAAa,UACxD,CAOL,GANI3nB,EAAE4d,KAAKsL,WACTlpB,EAAIA,EAAEqpB,gBAEHrpB,EAAE6d,MAAMvgB,WAAc0C,EAAE6d,MAAMqL,UAAalpB,EAAE6d,MAAMD,KAAKsL,WAC3DlpB,EAAIA,EAAEspB,iBAEuB,IAA3B3B,EAAWrrB,EAAK0D,EAAE1D,KAAY,CAChC,GAAI0D,EAAE6d,MAAMvgB,UACV,OAAOgrB,GAAUC,WAEjBa,EAAYppB,EAAE6d,MAAyB+K,OACvC5oB,EAAIA,EAAEwoB,KACJY,EAAS9sB,IACT8sB,EAAStzB,MACT,KACA,KACCkK,EAAE6d,MAAyBoL,cAIlCjpB,EAAIA,EAAEwoB,KAAK,KAAM,KAAM,KAAM,KAAMxoB,EAAE6d,MAAMpc,OAAOnF,EAAKqrB,IAEzD,OAAO3nB,EAAEgpB,SAMXE,MAAAA,GACE,OAAO34B,KAAK63B,MAMNY,MAAAA,GACN,IAAIhpB,EAAoBzP,KAUxB,OATIyP,EAAE6d,MAAMqL,WAAalpB,EAAE4d,KAAKsL,WAC9BlpB,EAAIA,EAAEupB,eAEJvpB,EAAE4d,KAAKsL,UAAYlpB,EAAE4d,KAAKA,KAAKsL,WACjClpB,EAAIA,EAAEqpB,gBAEJrpB,EAAE4d,KAAKsL,UAAYlpB,EAAE6d,MAAMqL,WAC7BlpB,EAAIA,EAAEwpB,cAEDxpB,EAMDmpB,YAAAA,GACN,IAAInpB,EAAIzP,KAAKi5B,aAYb,OAXIxpB,EAAE6d,MAAMD,KAAKsL,WACflpB,EAAIA,EAAEwoB,KACJ,KACA,KACA,KACA,KACCxoB,EAAE6d,MAAyBwL,gBAE9BrpB,EAAIA,EAAEupB,cACNvpB,EAAIA,EAAEwpB,cAEDxpB,EAMDspB,aAAAA,GACN,IAAItpB,EAAIzP,KAAKi5B,aAKb,OAJIxpB,EAAE4d,KAAKA,KAAKsL,WACdlpB,EAAIA,EAAEqpB,eACNrpB,EAAIA,EAAEwpB,cAEDxpB,EAMDupB,WAAAA,GACN,MAAME,EAAKl5B,KAAKi4B,KAAK,KAAM,KAAML,GAASE,IAAK,KAAM93B,KAAKstB,MAAMD,MAChE,OAAOrtB,KAAKstB,MAAM2K,KAAK,KAAM,KAAMj4B,KAAK63B,MAAOqB,EAAI,MAM7CJ,YAAAA,GACN,MAAMK,EAAKn5B,KAAKi4B,KAAK,KAAM,KAAML,GAASE,IAAK93B,KAAKqtB,KAAKC,MAAO,MAChE,OAAOttB,KAAKqtB,KAAK4K,KAAK,KAAM,KAAMj4B,KAAK63B,MAAO,KAAMsB,GAM9CF,UAAAA,GACN,MAAM5L,EAAOrtB,KAAKqtB,KAAK4K,KAAK,KAAM,MAAOj4B,KAAKqtB,KAAKwK,MAAO,KAAM,MAC1DvK,EAAQttB,KAAKstB,MAAM2K,KAAK,KAAM,MAAOj4B,KAAKstB,MAAMuK,MAAO,KAAM,MACnE,OAAO73B,KAAKi4B,KAAK,KAAM,MAAOj4B,KAAK63B,MAAOxK,EAAMC,GAQ1C8L,cAAAA,GACN,MAAMC,EAAar5B,KAAKs5B,SACxB,OAAO/kB,KAAKE,IAAI,EAAK4kB,IAAer5B,KAAKk4B,QAAU,EAGrDoB,MAAAA,GACE,GAAIt5B,KAAK24B,UAAY34B,KAAKqtB,KAAKsL,SAC7B,MAAM,IAAI15B,MACR,0BAA4Be,KAAK+L,IAAM,IAAM/L,KAAKuF,MAAQ,KAG9D,GAAIvF,KAAKstB,MAAMqL,SACb,MAAM,IAAI15B,MACR,mBAAqBe,KAAK+L,IAAM,IAAM/L,KAAKuF,MAAQ,YAGvD,MAAM8zB,EAAar5B,KAAKqtB,KAAKiM,SAC7B,GAAID,IAAer5B,KAAKstB,MAAMgM,SAC5B,MAAM,IAAIr6B,MAAM,uBAEhB,OAAOo6B,GAAcr5B,KAAK24B,SAAW,EAAI,IApStCf,GAAGE,KAAG,EACNF,GAAK2B,OAAG,QAsZJxB,GAUXp4B,WAAAA,CACU65B,GAG6D,IAF7DC,EAEkBt6B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAA44B,GAAUC,WAH5B,KAAWwB,YAAXA,EACA,KAAKC,MAALA,EAaVjB,MAAAA,CAAOzsB,EAAQxG,GACb,OAAO,IAAIwyB,GACT/3B,KAAKw5B,YACLx5B,KAAKy5B,MACFjB,OAAOzsB,EAAKxG,EAAOvF,KAAKw5B,aACxBvB,KAAK,KAAM,KAAML,GAAS2B,MAAO,KAAM,OAU9CroB,MAAAA,CAAOnF,GACL,OAAO,IAAIgsB,GACT/3B,KAAKw5B,YACLx5B,KAAKy5B,MACFvoB,OAAOnF,EAAK/L,KAAKw5B,aACjBvB,KAAK,KAAM,KAAML,GAAS2B,MAAO,KAAM,OAW9CxoB,GAAAA,CAAIhF,GACF,IAAI0hB,EACAsI,EAAO/1B,KAAKy5B,MAChB,MAAQ1D,EAAKhpB,WAAW,CAEtB,GADA0gB,EAAMztB,KAAKw5B,YAAYztB,EAAKgqB,EAAKhqB,KACrB,IAAR0hB,EACF,OAAOsI,EAAKxwB,MACHkoB,EAAM,EACfsI,EAAOA,EAAK1I,KACHI,EAAM,IACfsI,EAAOA,EAAKzI,OAGhB,OAAO,KAQToM,iBAAAA,CAAkB3tB,GAChB,IAAI0hB,EACFsI,EAAO/1B,KAAKy5B,MACZE,EAAc,KAChB,MAAQ5D,EAAKhpB,WAAW,CAEtB,GADA0gB,EAAMztB,KAAKw5B,YAAYztB,EAAKgqB,EAAKhqB,KACrB,IAAR0hB,EAAW,CACb,GAAKsI,EAAK1I,KAAKtgB,UAMR,OAAI4sB,EACFA,EAAY5tB,IAEZ,KAPP,IADAgqB,EAAOA,EAAK1I,MACJ0I,EAAKzI,MAAMvgB,WACjBgpB,EAAOA,EAAKzI,MAEd,OAAOyI,EAAKhqB,IAML0hB,EAAM,EACfsI,EAAOA,EAAK1I,KACHI,EAAM,IACfkM,EAAc5D,EACdA,EAAOA,EAAKzI,OAIhB,MAAM,IAAIruB,MACR,yEAOJ8N,OAAAA,GACE,OAAO/M,KAAKy5B,MAAM1sB,UAMpBmrB,KAAAA,GACE,OAAOl4B,KAAKy5B,MAAMvB,QAMpBI,MAAAA,GACE,OAAOt4B,KAAKy5B,MAAMnB,SAMpBC,MAAAA,GACE,OAAOv4B,KAAKy5B,MAAMlB,SAYpBJ,gBAAAA,CAAiBxH,GACf,OAAO3wB,KAAKy5B,MAAMtB,iBAAiBxH,GAWrCyH,gBAAAA,CAAiBzH,GACf,OAAO3wB,KAAKy5B,MAAMrB,iBAAiBzH,GAOrCiJ,WAAAA,CACEC,GAEA,OAAO,IAAI3C,GACTl3B,KAAKy5B,MACL,KACAz5B,KAAKw5B,aACL,EACAK,GAIJC,eAAAA,CACE/tB,EACA8tB,GAEA,OAAO,IAAI3C,GACTl3B,KAAKy5B,MACL1tB,EACA/L,KAAKw5B,aACL,EACAK,GAIJE,sBAAAA,CACEhuB,EACA8tB,GAEA,OAAO,IAAI3C,GACTl3B,KAAKy5B,MACL1tB,EACA/L,KAAKw5B,aACL,EACAK,GAIJG,kBAAAA,CACEH,GAEA,OAAO,IAAI3C,GACTl3B,KAAKy5B,MACL,KACAz5B,KAAKw5B,aACL,EACAK,IC1vBU,SAAAI,GAAqB5M,EAAiBC,GACpD,OAAOla,EAAYia,EAAK5tB,KAAM6tB,EAAM7tB,KACtC,CAEgB,SAAAy6B,GAAgB7M,EAAcC,GAC5C,OAAOla,EAAYia,EAAMC,EAC3B,CCHA,IAAI6M,GFwiBKpC,GAAAC,WAAa,UAnGpBC,IAAAA,CACElsB,EACAxG,EACAsyB,EACAxK,EACAC,GAEA,OAAOttB,KAWTw4B,MAAAA,CAAOzsB,EAAQxG,EAAU6xB,GACvB,OAAO,IAAIQ,GAAS7rB,EAAKxG,EAAO,MAUlC2L,MAAAA,CAAOnF,EAAQqrB,GACb,OAAOp3B,KAMTk4B,KAAAA,GACE,OAAO,EAMTnrB,OAAAA,GACE,OAAO,EAWTorB,gBAAAA,CAAiBxH,GACf,OAAO,EAWTyH,gBAAAA,CAAiBzH,GACf,OAAO,EAGT2H,MAAAA,GACE,OAAO,KAGTC,MAAAA,GACE,OAAO,KAGTe,MAAAA,GACE,OAAO,EAMTX,MAAAA,GACE,OAAO,IEthBJ,MAAMyB,GAAmB,SAAUC,GACxC,MAAwB,kBAAbA,EACF,UAAYpmB,EAAsBomB,GAElC,UAAYA,CAEvB,EAKaC,GAAuB,SAAUC,GAC5C,GAAIA,EAAaC,aAAc,CAC7B,MAAMv6B,EAAMs6B,EAAat6B,OACzBwB,EAAAA,EAAAA,IACiB,kBAARxB,GACU,kBAARA,GACS,kBAARA,IAAoB0M,EAAAA,EAAAA,IAAS1M,EAAkB,OACzD,6CAGFwB,EAAAA,EAAAA,IACE84B,IAAiBJ,IAAYI,EAAaxtB,UAC1C,iCAIJtL,EAAAA,EAAAA,IACE84B,IAAiBJ,IAAYI,EAAaE,cAAc1tB,UACxD,qDAEJ,EC3BA,IAAI2tB,GCXAC,GACAC,SDiBSC,GACX,oCAAWH,CAA0Bz6B,GACnCy6B,GAA4Bz6B,EAG9B,oCAAWy6B,GACT,OAAOA,GAgBT/6B,WAAAA,CACmBm7B,GAC0D,IAAnEC,EAAA57B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAsB07B,GAASH,0BAA0B1C,WADhD,KAAM8C,OAANA,EACT,KAAaC,cAAbA,EATF,KAASC,UAAkB,MAWjCv5B,EAAAA,EAAAA,SACkBgE,IAAhBzF,KAAK86B,QAAwC,OAAhB96B,KAAK86B,OAClC,4DAGFR,GAAqBt6B,KAAK+6B,eAI5BP,UAAAA,GACE,OAAO,EAITC,WAAAA,GACE,OAAOz6B,KAAK+6B,cAIdE,cAAAA,CAAeC,GACb,OAAO,IAAIL,GAAS76B,KAAK86B,OAAQI,GAInCC,iBAAAA,CAAkBC,GAEhB,MAAkB,cAAdA,EACKp7B,KAAK+6B,cAELF,GAASH,0BAA0B1C,WAK9CqD,QAAAA,CAASnP,GACP,OAAIY,GAAYZ,GACPlsB,KACyB,cAAvBisB,GAAaC,GACflsB,KAAK+6B,cAELF,GAASH,0BAA0B1C,WAG9CsD,QAAAA,GACE,OAAO,EAITC,uBAAAA,CAAwBH,EAAmBI,GACzC,OAAO,KAITC,oBAAAA,CAAqBL,EAAmBM,GACtC,MAAkB,cAAdN,EACKp7B,KAAKi7B,eAAeS,GAClBA,EAAa3uB,WAA2B,cAAdquB,EAC5Bp7B,KAEA66B,GAASH,0BAA0B1C,WAAWyD,qBACnDL,EACAM,GACAT,eAAej7B,KAAK+6B,eAK1BY,WAAAA,CAAYzP,EAAYwP,GACtB,MAAME,EAAQ3P,GAAaC,GAC3B,OAAc,OAAV0P,EACKF,EACEA,EAAa3uB,WAAuB,cAAV6uB,EAC5B57B,OAEPyB,EAAAA,EAAAA,IACY,cAAVm6B,GAAiD,IAAxBzP,GAAcD,GACvC,8CAGKlsB,KAAKy7B,qBACVG,EACAf,GAASH,0BAA0B1C,WAAW2D,YAC5CvP,GAAaF,GACbwP,KAOR3uB,OAAAA,GACE,OAAO,EAIT8uB,WAAAA,GACE,OAAO,EAITC,YAAAA,CAAazK,EAAcV,GACzB,OAAO,EAET1wB,GAAAA,CAAI87B,GACF,OAAIA,IAAiB/7B,KAAKy6B,cAAc1tB,UAC/B,CACL,SAAU/M,KAAKg8B,WACf,YAAah8B,KAAKy6B,cAAcx6B,OAG3BD,KAAKg8B,WAKhBlS,IAAAA,GACE,GAAuB,OAAnB9pB,KAAKg7B,UAAoB,CAC3B,IAAIiB,EAAS,GACRj8B,KAAK+6B,cAAchuB,YACtBkvB,GACE,YACA7B,GAAiBp6B,KAAK+6B,cAAc96B,OACpC,KAGJ,MAAMyJ,SAAc1J,KAAK86B,OACzBmB,GAAUvyB,EAAO,IAEfuyB,GADW,WAATvyB,EACQuK,EAAsBjU,KAAK86B,QAE3B96B,KAAK86B,OAEjB96B,KAAKg7B,UAAYjpB,EAAKkqB,GAExB,OAAOj8B,KAAKg7B,UAOdgB,QAAAA,GACE,OAAOh8B,KAAK86B,OAEdoB,SAAAA,CAAUvO,GACR,OAAIA,IAAUkN,GAASH,0BAA0B1C,WACxC,EACErK,aAAiBkN,GAASH,2BAC3B,IAERj5B,EAAAA,EAAAA,IAAOksB,EAAM6M,aAAc,qBACpBx6B,KAAKm8B,mBAAmBxO,IAO3BwO,kBAAAA,CAAmBC,GACzB,MAAMC,SAAuBD,EAAUtB,OACjCwB,SAAsBt8B,KAAK86B,OAC3ByB,EAAa1B,GAAS2B,iBAAiBzjB,QAAQsjB,GAC/CI,EAAY5B,GAAS2B,iBAAiBzjB,QAAQujB,GAGpD,OAFA76B,EAAAA,EAAAA,IAAO86B,GAAc,EAAG,sBAAwBF,IAChD56B,EAAAA,EAAAA,IAAOg7B,GAAa,EAAG,sBAAwBH,GAC3CC,IAAeE,EAEI,WAAjBH,EAEK,EAGHt8B,KAAK86B,OAASsB,EAAUtB,QAClB,EACC96B,KAAK86B,SAAWsB,EAAUtB,OAC5B,EAEA,EAIJ2B,EAAYF,EAGvBG,SAAAA,GACE,OAAO18B,KAET28B,SAAAA,GACE,OAAO,EAETC,MAAAA,CAAOjP,GACL,GAAIA,IAAU3tB,KACZ,OAAO,EACF,GAAI2tB,EAAM6M,aAAc,CAC7B,MAAM4B,EAAYzO,EAClB,OACE3tB,KAAK86B,SAAWsB,EAAUtB,QAC1B96B,KAAK+6B,cAAc6B,OAAOR,EAAUrB,eAGtC,OAAO,GArNJF,GAAgB2B,iBAAG,CAAC,SAAU,UAAW,SAAU,UCkBrD,MAAMK,GAAiB,IAtCxB,cAA6B5G,GACjCE,OAAAA,CAAQ9oB,EAAcC,GACpB,MAAMwvB,EAAYzvB,EAAE0oB,KAAK0E,cACnBsC,EAAYzvB,EAAEyoB,KAAK0E,cACnBuC,EAAWF,EAAUZ,UAAUa,GACrC,OAAiB,IAAbC,EACK5pB,EAAY/F,EAAE5N,KAAM6N,EAAE7N,MAEtBu9B,EAGXnG,WAAAA,CAAYd,GACV,OAAQA,EAAK0E,cAAc1tB,UAE7BqpB,mBAAAA,CAAoBC,EAAeC,GACjC,OAAQD,EAAQoE,cAAcmC,OAAOtG,EAAQmE,eAE/ChE,OAAAA,GAEE,OAAQX,GAAkBY,IAE5BI,OAAAA,GACE,OAAO,IAAIhB,GAAU3iB,EAAU,IAAI0nB,GAAS,kBAAmBD,KAGjE7D,QAAAA,CAASC,EAAqBv3B,GAC5B,MAAM86B,EAAeI,GAAa3D,GAClC,OAAO,IAAIlB,GAAUr2B,EAAM,IAAIo7B,GAAS,kBAAmBN,IAM7DppB,QAAAA,GACE,MAAO,cC/CL8rB,GAAQ1oB,KAAK9T,IAAI,GAEvB,MAAMy8B,GAKJv9B,WAAAA,CAAYP,GACQ+9B,MAIlBn9B,KAAKk4B,OAJaiF,EAII/9B,EAAS,EAF7BuI,SAAU4M,KAAK9T,IAAI08B,GAAOF,GAAe,KAG3Cj9B,KAAKo9B,SAAWp9B,KAAKk4B,MAAQ,EAC7B,MAAMmF,GAHWvoB,EAGI9U,KAAKk4B,MAHQvwB,SAASrI,MAAMwV,EAAO,GAAGhR,KAAK,KAAM,IAArDgR,MAIjB9U,KAAKs9B,MAASl+B,EAAS,EAAKi+B,EAG9BE,YAAAA,GAEE,MAAM9yB,IAAWzK,KAAKs9B,MAAS,GAAOt9B,KAAKo9B,UAE3C,OADAp9B,KAAKo9B,WACE3yB,GAiBJ,MAAM+yB,GAAgB,SAC3BC,EACAhQ,EACAiQ,EACAC,GAEAF,EAAU9pB,KAAK8Z,GAEf,MAAMmQ,EAAoB,SACxBC,EACA3tB,GAEA,MAAM9Q,EAAS8Q,EAAO2tB,EACtB,IAAIC,EACA/xB,EACJ,GAAe,IAAX3M,EACF,OAAO,KACF,GAAe,IAAXA,EAGT,OAFA0+B,EAAYL,EAAUI,GACtB9xB,EAAM2xB,EAAQA,EAAMI,GAAcA,EAC3B,IAAIlG,GACT7rB,EACA+xB,EAAU/H,KACV6B,GAAS2B,MACT,KACA,MAEG,CAEL,MAAMwE,EAASp2B,SAAUvI,EAAS,EAAW,IAAMy+B,EAC7CxQ,EAAOuQ,EAAkBC,EAAKE,GAC9BzQ,EAAQsQ,EAAkBG,EAAS,EAAG7tB,GAG5C,OAFA4tB,EAAYL,EAAUM,GACtBhyB,EAAM2xB,EAAQA,EAAMI,GAAcA,EAC3B,IAAIlG,GACT7rB,EACA+xB,EAAU/H,KACV6B,GAAS2B,MACTlM,EACAC,GAGN,EAmDM0Q,EAjDmB,SAAUC,GACjC,IAAIlI,EAAuB,KACvBiI,EAAO,KACP3M,EAAQoM,EAAUr+B,OAEtB,MAAM8+B,EAAe,SAAUC,EAAmBtG,GAChD,MAAMgG,EAAMxM,EAAQ8M,EACdjuB,EAAOmhB,EACbA,GAAS8M,EACT,MAAMC,EAAYR,EAAkBC,EAAM,EAAG3tB,GACvC4tB,EAAYL,EAAUI,GACtB9xB,EAAS2xB,EAAQA,EAAMI,GAAcA,EAC3CO,EACE,IAAIzG,GACF7rB,EACA+xB,EAAU/H,KACV8B,EACA,KACAuG,GAGN,EAEMC,EAAgB,SAAUC,GAC1BvI,GACFA,EAAK1I,KAAOiR,EACZvI,EAAOuI,IAEPN,EAAOM,EACPvI,EAAOuI,EAEX,EAEA,IAAK,IAAIr8B,EAAI,EAAGA,EAAIg8B,EAAO/F,QAASj2B,EAAG,CACrC,MAAMs8B,EAAQN,EAAOV,eAEfY,EAAY5pB,KAAKE,IAAI,EAAGwpB,EAAO/F,OAASj2B,EAAI,IAC9Cs8B,EACFL,EAAaC,EAAWvG,GAAS2B,QAGjC2E,EAAaC,EAAWvG,GAAS2B,OACjC2E,EAAaC,EAAWvG,GAASE,MAGrC,OAAOkG,CACT,CAGaQ,CADE,IAAItB,GAAUO,EAAUr+B,SAGvC,OAAO,IAAI24B,GAAgB4F,GAAclQ,EAAauQ,EACxD,ECjIA,IAAIS,GAEJ,MAAMC,GAAiB,CAAC,QAEXC,GAIX,kBAAWC,GAWT,OAVAn9B,EAAAA,EAAAA,IACEi9B,IAAkB7B,GAClB,uCAEF4B,GACEA,IACA,IAAIE,GACF,CAAE,YAAaD,IACf,CAAE,YAAa7B,KAEZ4B,GAGT9+B,WAAAA,CACUk/B,EAGAC,GAHA,KAAQD,SAARA,EAGA,KAASC,UAATA,EAGV/tB,GAAAA,CAAIguB,GACF,MAAMC,GAAYlyB,EAAAA,EAAAA,IAAQ9M,KAAK6+B,SAAUE,GACzC,IAAKC,EACH,MAAM,IAAI//B,MAAM,wBAA0B8/B,GAG5C,OAAIC,aAAqBjH,GAChBiH,EAIA,KAIXC,QAAAA,CAASC,GACP,OAAOvyB,EAAAA,EAAAA,IAAS3M,KAAK8+B,UAAWI,EAAgB/tB,YAGlDguB,QAAAA,CACED,EACAE,IAEA39B,EAAAA,EAAAA,IACEy9B,IAAoBjI,GACpB,uEAEF,MAAMwG,EAAY,GAClB,IAAI4B,GAAkB,EACtB,MAAMC,EAAOF,EAAiBxF,YAAY9D,GAAUE,MACpD,IAOIuJ,EAPAC,EAAOF,EAAK9H,UAChB,KAAOgI,GACLH,EACEA,GAAmBH,EAAgBrI,YAAY2I,EAAKzJ,MACtD0H,EAAU19B,KAAKy/B,GACfA,EAAOF,EAAK9H,UAIZ+H,EADEF,EACS7B,GAAcC,EAAWyB,EAAgBhJ,cAEzCwI,GAEb,MAAMe,EAAYP,EAAgB/tB,WAC5BuuB,EAAmB95B,OAAAoD,OAAA,GAAAhJ,KAAK8+B,WAC9BY,EAAYD,GAAaP,EACzB,MAAMS,EAAkB/5B,OAAAoD,OAAA,GAAAhJ,KAAK6+B,UAE7B,OADAc,EAAWF,GAAaF,EACjB,IAAIZ,GAASgB,EAAYD,GAMlCE,YAAAA,CACE9B,EACAsB,GAEA,MAAMO,GAAa3yB,EAAAA,EAAAA,IACjBhN,KAAK6+B,UACL,CAACgB,EAA6CJ,KAC5C,MAAMpO,GAAQvkB,EAAAA,EAAAA,IAAQ9M,KAAK8+B,UAAWW,GAEtC,IADAh+B,EAAAA,EAAAA,IAAO4vB,EAAO,oCAAsCoO,GAChDI,IAAoBnB,GAAgB,CAEtC,GAAIrN,EAAMwF,YAAYiH,EAAU/H,MAAO,CAErC,MAAM0H,EAAY,GACZ6B,EAAOF,EAAiBxF,YAAY9D,GAAUE,MACpD,IAAIwJ,EAAOF,EAAK9H,UAChB,KAAOgI,GACDA,EAAK//B,OAASq+B,EAAUr+B,MAC1Bg+B,EAAU19B,KAAKy/B,GAEjBA,EAAOF,EAAK9H,UAGd,OADAiG,EAAU19B,KAAK+9B,GACRN,GAAcC,EAAWpM,EAAM6E,cAGtC,OAAOwI,GAEJ,CACL,MAAMoB,EAAeV,EAAiBruB,IAAI+sB,EAAUr+B,MACpD,IAAIsgC,EAAcF,EAMlB,OALIC,IACFC,EAAcA,EAAY7uB,OACxB,IAAI4kB,GAAUgI,EAAUr+B,KAAMqgC,KAG3BC,EAAYvH,OAAOsF,EAAWA,EAAU/H,UAIrD,OAAO,IAAI4I,GAASgB,EAAY3/B,KAAK8+B,WAMvCkB,iBAAAA,CACElC,EACAsB,GAEA,MAAMO,GAAa3yB,EAAAA,EAAAA,IACjBhN,KAAK6+B,UACJgB,IACC,GAAIA,IAAoBnB,GAEtB,OAAOmB,EACF,CACL,MAAMC,EAAeV,EAAiBruB,IAAI+sB,EAAUr+B,MACpD,OAAIqgC,EACKD,EAAgB3uB,OACrB,IAAI4kB,GAAUgI,EAAUr+B,KAAMqgC,IAIzBD,MAKf,OAAO,IAAIlB,GAASgB,EAAY3/B,KAAK8+B,YCrIzC,IAAI9G,SAOSiI,GAGX,qBAAWjI,GACT,OACEA,KACCA,GAAa,IAAIiI,GAChB,IAAIlI,GAAwBmC,IAC5B,KACAyE,GAASC,UASfj/B,WAAAA,CACmBugC,EACAnF,EACToF,GAFS,KAASD,UAATA,EACA,KAAanF,cAAbA,EACT,KAASoF,UAATA,EApBF,KAASnF,UAAkB,KA2B7Bh7B,KAAK+6B,eACPT,GAAqBt6B,KAAK+6B,eAGxB/6B,KAAKkgC,UAAUnzB,YACjBtL,EAAAA,EAAAA,KACGzB,KAAK+6B,eAAiB/6B,KAAK+6B,cAAchuB,UAC1C,wCAMNytB,UAAAA,GACE,OAAO,EAITC,WAAAA,GACE,OAAOz6B,KAAK+6B,eAAiB/C,GAI/BiD,cAAAA,CAAeC,GACb,OAAIl7B,KAAKkgC,UAAUnzB,UAEV/M,KAEA,IAAIigC,GAAajgC,KAAKkgC,UAAWhF,EAAiBl7B,KAAKmgC,WAKlEhF,iBAAAA,CAAkBC,GAEhB,GAAkB,cAAdA,EACF,OAAOp7B,KAAKy6B,cACP,CACL,MAAM2F,EAAQpgC,KAAKkgC,UAAUnvB,IAAIqqB,GACjC,OAAiB,OAAVgF,EAAiBpI,GAAaoI,GAKzC/E,QAAAA,CAASnP,GACP,MAAM0P,EAAQ3P,GAAaC,GAC3B,OAAc,OAAV0P,EACK57B,KAGFA,KAAKm7B,kBAAkBS,GAAOP,SAASjP,GAAaF,IAI7DoP,QAAAA,CAASF,GACP,OAAyC,OAAlCp7B,KAAKkgC,UAAUnvB,IAAIqqB,GAI5BK,oBAAAA,CAAqBL,EAAmBM,GAEtC,IADAj6B,EAAAA,EAAAA,IAAOi6B,EAAc,8CACH,cAAdN,EACF,OAAOp7B,KAAKi7B,eAAeS,GACtB,CACL,MAAMoC,EAAY,IAAIhI,GAAUsF,EAAWM,GAC3C,IAAIqE,EAAaM,EACb3E,EAAa3uB,WACfgzB,EAAc//B,KAAKkgC,UAAUhvB,OAAOkqB,GACpCiF,EAAcrgC,KAAKmgC,UAAUH,kBAC3BlC,EACA99B,KAAKkgC,aAGPH,EAAc//B,KAAKkgC,UAAU1H,OAAO4C,EAAWM,GAC/C2E,EAAcrgC,KAAKmgC,UAAUP,aAAa9B,EAAW99B,KAAKkgC,YAG5D,MAAMI,EAAcP,EAAYhzB,UAC5BirB,GACAh4B,KAAK+6B,cACT,OAAO,IAAIkF,GAAaF,EAAaO,EAAaD,IAKtD1E,WAAAA,CAAYzP,EAAYwP,GACtB,MAAME,EAAQ3P,GAAaC,GAC3B,GAAc,OAAV0P,EACF,OAAOF,EACF,EACLj6B,EAAAA,EAAAA,IACyB,cAAvBwqB,GAAaC,IAAiD,IAAxBC,GAAcD,GACpD,8CAEF,MAAMqU,EAAoBvgC,KAAKm7B,kBAAkBS,GAAOD,YACtDvP,GAAaF,GACbwP,GAEF,OAAO17B,KAAKy7B,qBAAqBG,EAAO2E,IAK5CxzB,OAAAA,GACE,OAAO/M,KAAKkgC,UAAUnzB,UAIxB8uB,WAAAA,GACE,OAAO77B,KAAKkgC,UAAUhI,QAMxBj4B,GAAAA,CAAI87B,GACF,GAAI/7B,KAAK+M,UACP,OAAO,KAGT,MAAMH,EAAgC,CAAC,EACvC,IAAI4zB,EAAU,EACZjI,EAAS,EACTkI,GAAiB,EAYnB,GAXAzgC,KAAK87B,aAAae,IAAgB,CAAC9wB,EAAayvB,KAC9C5uB,EAAIb,GAAOyvB,EAAUv7B,IAAI87B,GAEzByE,IACIC,GAAkBR,GAAa7qB,gBAAgBtL,KAAKiC,GACtDwsB,EAAShkB,KAAK0Z,IAAIsK,EAAQxlB,OAAOhH,IAEjC00B,GAAiB,MAIhB1E,GAAgB0E,GAAkBlI,EAAS,EAAIiI,EAAS,CAE3D,MAAME,EAAmB,GAEzB,IAAK,MAAM30B,KAAOa,EAChB8zB,EAAM30B,GAA4Ba,EAAIb,GAGxC,OAAO20B,EAKP,OAHI3E,IAAiB/7B,KAAKy6B,cAAc1tB,YACtCH,EAAI,aAAe5M,KAAKy6B,cAAcx6B,OAEjC2M,EAKXkd,IAAAA,GACE,GAAuB,OAAnB9pB,KAAKg7B,UAAoB,CAC3B,IAAIiB,EAAS,GACRj8B,KAAKy6B,cAAc1tB,YACtBkvB,GACE,YACA7B,GAAiBp6B,KAAKy6B,cAAcx6B,OACpC,KAGJD,KAAK87B,aAAae,IAAgB,CAAC9wB,EAAKyvB,KACtC,MAAMmF,EAAYnF,EAAU1R,OACV,KAAd6W,IACF1E,GAAU,IAAMlwB,EAAM,IAAM40B,MAIhC3gC,KAAKg7B,UAAuB,KAAXiB,EAAgB,GAAKlqB,EAAKkqB,GAE7C,OAAOj8B,KAAKg7B,UAIdO,uBAAAA,CACEH,EACAI,EACAnK,GAEA,MAAMuP,EAAM5gC,KAAK6gC,cAAcxP,GAC/B,GAAIuP,EAAK,CACP,MAAME,EAAcF,EAAIlH,kBACtB,IAAI5D,GAAUsF,EAAWI,IAE3B,OAAOsF,EAAcA,EAAYrhC,KAAO,KAExC,OAAOO,KAAKkgC,UAAUxG,kBAAkB0B,GAI5C2F,iBAAAA,CAAkB7B,GAChB,MAAM0B,EAAM5gC,KAAK6gC,cAAc3B,GAC/B,GAAI0B,EAAK,CACP,MAAMtI,EAASsI,EAAItI,SACnB,OAAOA,GAAUA,EAAO74B,KAExB,OAAOO,KAAKkgC,UAAU5H,SAI1B0I,aAAAA,CAAc9B,GACZ,MAAM5G,EAASt4B,KAAK+gC,kBAAkB7B,GACtC,OAAI5G,EACK,IAAIxC,GAAUwC,EAAQt4B,KAAKkgC,UAAUnvB,IAAIunB,IAEzC,KAOX2I,gBAAAA,CAAiB/B,GACf,MAAM0B,EAAM5gC,KAAK6gC,cAAc3B,GAC/B,GAAI0B,EAAK,CACP,MAAMrI,EAASqI,EAAIrI,SACnB,OAAOA,GAAUA,EAAO94B,KAExB,OAAOO,KAAKkgC,UAAU3H,SAI1B2I,YAAAA,CAAahC,GACX,MAAM3G,EAASv4B,KAAKihC,iBAAiB/B,GACrC,OAAI3G,EACK,IAAIzC,GAAUyC,EAAQv4B,KAAKkgC,UAAUnvB,IAAIwnB,IAEzC,KAGXuD,YAAAA,CACEzK,EACAV,GAEA,MAAMiQ,EAAM5gC,KAAK6gC,cAAcxP,GAC/B,OAAIuP,EACKA,EAAIzI,kBAAiBgJ,GACnBxQ,EAAOwQ,EAAY1hC,KAAM0hC,EAAYpL,QAGvC/1B,KAAKkgC,UAAU/H,iBAAiBxH,GAI3CiJ,WAAAA,CACEsF,GAEA,OAAOl/B,KAAK85B,gBAAgBoF,EAAgBzI,UAAWyI,GAGzDpF,eAAAA,CACEsH,EACAlC,GAEA,MAAM0B,EAAM5gC,KAAK6gC,cAAc3B,GAC/B,GAAI0B,EACF,OAAOA,EAAI9G,gBAAgBsH,GAAWr1B,GAAOA,IACxC,CACL,MAAMs1B,EAAWrhC,KAAKkgC,UAAUpG,gBAC9BsH,EAAU3hC,KACVq2B,GAAUE,MAEZ,IAAIwJ,EAAO6B,EAAS1J,OACpB,KAAe,MAAR6H,GAAgBN,EAAgB/I,QAAQqJ,EAAM4B,GAAa,GAChEC,EAAS7J,UACTgI,EAAO6B,EAAS1J,OAElB,OAAO0J,GAIXrH,kBAAAA,CACEkF,GAEA,OAAOl/B,KAAK+5B,uBACVmF,EAAgBpI,UAChBoI,GAIJnF,sBAAAA,CACEuH,EACApC,GAEA,MAAM0B,EAAM5gC,KAAK6gC,cAAc3B,GAC/B,GAAI0B,EACF,OAAOA,EAAI7G,uBAAuBuH,GAASv1B,GAClCA,IAEJ,CACL,MAAMs1B,EAAWrhC,KAAKkgC,UAAUnG,uBAC9BuH,EAAQ7hC,KACRq2B,GAAUE,MAEZ,IAAIwJ,EAAO6B,EAAS1J,OACpB,KAAe,MAAR6H,GAAgBN,EAAgB/I,QAAQqJ,EAAM8B,GAAW,GAC9DD,EAAS7J,UACTgI,EAAO6B,EAAS1J,OAElB,OAAO0J,GAGXnF,SAAAA,CAAUvO,GACR,OAAI3tB,KAAK+M,UACH4gB,EAAM5gB,UACD,GAEC,EAED4gB,EAAM6M,cAAgB7M,EAAM5gB,UAC9B,EACE4gB,IAAU4T,IACX,EAGD,EAGX7E,SAAAA,CAAUwC,GACR,GACEA,IAAoBjI,IACpBj3B,KAAKmgC,UAAUlB,SAASC,GAExB,OAAOl/B,KACF,CACL,MAAMqgC,EAAcrgC,KAAKmgC,UAAUhB,SACjCD,EACAl/B,KAAKkgC,WAEP,OAAO,IAAID,GAAajgC,KAAKkgC,UAAWlgC,KAAK+6B,cAAesF,IAGhE1D,SAAAA,CAAUtL,GACR,OAAOA,IAAU4F,IAAaj3B,KAAKmgC,UAAUlB,SAAS5N,GAExDuL,MAAAA,CAAOjP,GACL,GAAIA,IAAU3tB,KACZ,OAAO,EACF,GAAI2tB,EAAM6M,aACf,OAAO,EACF,CACL,MAAMgH,EAAoB7T,EAC1B,GAAK3tB,KAAKy6B,cAAcmC,OAAO4E,EAAkB/G,eAE1C,IACLz6B,KAAKkgC,UAAUhI,UAAYsJ,EAAkBtB,UAAUhI,QACvD,CACA,MAAMuJ,EAAWzhC,KAAK45B,YAAYiD,IAC5B6E,EAAYF,EAAkB5H,YAAYiD,IAChD,IAAI8E,EAAcF,EAASjK,UACvBoK,EAAeF,EAAUlK,UAC7B,KAAOmK,GAAeC,GAAc,CAClC,GACED,EAAYliC,OAASmiC,EAAaniC,OACjCkiC,EAAY5L,KAAK6G,OAAOgF,EAAa7L,MAEtC,OAAO,EAET4L,EAAcF,EAASjK,UACvBoK,EAAeF,EAAUlK,UAE3B,OAAuB,OAAhBmK,GAAyC,OAAjBC,EAE/B,OAAO,EApBP,OAAO,GA8BLf,aAAAA,CACN3B,GAEA,OAAIA,IAAoBjI,GACf,KAEAj3B,KAAKmgC,UAAUpvB,IAAImuB,EAAgB/tB,aA7Q/B8uB,GAAe7qB,gBAAG,iBAwT5B,MAAMmsB,GAAW,IAtClB,cAAuBtB,GAC3BtgC,WAAAA,GACEsL,MACE,IAAI8sB,GAAwBmC,IAC5B+F,GAAajI,WACb2G,GAASC,SAIb1C,SAAAA,CAAUvO,GACR,OAAIA,IAAU3tB,KACL,EAEA,EAIX48B,MAAAA,CAAOjP,GAEL,OAAOA,IAAU3tB,KAGnBy6B,WAAAA,GACE,OAAOz6B,KAGTm7B,iBAAAA,CAAkBC,GAChB,OAAO6E,GAAajI,WAGtBjrB,OAAAA,GACE,OAAO,IAmBXnH,OAAOi8B,iBAAiB/L,GAAW,CACjCY,IAAK,CACHnxB,MAAO,IAAIuwB,GAAU5iB,EAAU+sB,GAAajI,aAE9C8J,IAAK,CACHv8B,MAAO,IAAIuwB,GAAU3iB,EAAUouB,OAOnC3K,GAASD,aAAesJ,GAAajI,WACrC6C,GAASH,0BAA4BuF,GLvfnC9F,GKwfSoH,GHrfL,SAAqBthC,GACzB26B,GAAW36B,CACb,CGofA8hC,CAAmBR,ICrfnB,MAAMS,IAAY,WAQFC,GACdC,GACwB,IAAxB7H,EAAAl7B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAoB,KAEpB,GAAa,OAAT+iC,EACF,OAAOjC,GAAajI,WAoBtB,GAjBoB,kBAATkK,GAAqB,cAAeA,IAC7C7H,EAAW6H,EAAK,eAGlBzgC,EAAAA,EAAAA,IACe,OAAb44B,GACsB,kBAAbA,GACa,kBAAbA,GACc,kBAAbA,GAAyB,QAAUA,EAC7C,uCAAyCA,GAGvB,kBAAT6H,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACvDA,EAAOA,EAAK,WAIM,kBAATA,GAAqB,QAASA,EAAM,CAE7C,OAAO,IAAIrH,GADMqH,EACaD,GAAa5H,IAG7C,GAAM6H,aAAgB5iC,QAAU0iC,GA8CzB,CACL,IAAIjM,EAAakK,GAAajI,WAa9B,OAZAhkB,EAAKkuB,GAAM,CAACn2B,EAAao2B,KACvB,IAAIx1B,EAAAA,EAAAA,IAASu1B,EAAgBn2B,IACC,MAAxBA,EAAInE,UAAU,EAAG,GAAY,CAE/B,MAAM4zB,EAAYyG,GAAaE,IAC3B3G,EAAUhB,cAAiBgB,EAAUzuB,YACvCgpB,EAAOA,EAAK0F,qBAAqB1vB,EAAKyvB,QAMvCzF,EAAKkF,eAAegH,GAAa5H,IA5DC,CACzC,MAAM+H,EAAwB,GAC9B,IAAIC,GAAuB,EAc3B,GAZAruB,EADqBkuB,GACF,CAACn2B,EAAKq0B,KACvB,GAA4B,MAAxBr0B,EAAInE,UAAU,EAAG,GAAY,CAE/B,MAAM4zB,EAAYyG,GAAa7B,GAC1B5E,EAAUzuB,YACbs1B,EACEA,IAAyB7G,EAAUf,cAAc1tB,UACnDq1B,EAASriC,KAAK,IAAI+1B,GAAU/pB,EAAKyvB,SAKf,IAApB4G,EAAShjC,OACX,OAAO6gC,GAAajI,WAGtB,MAAMsK,EAAW9E,GACf4E,EACAnI,IACA6D,GAAaA,EAAUr+B,MACvBy6B,IAEF,GAAImI,EAAsB,CACxB,MAAME,EAAiB/E,GACrB4E,EACAvF,GAAe3G,cAEjB,OAAO,IAAI+J,GACTqC,EACAL,GAAa5H,GACb,IAAIsE,GACF,CAAE,YAAa4D,GACf,CAAE,YAAa1F,MAInB,OAAO,IAAIoD,GACTqC,EACAL,GAAa5H,GACbsE,GAASC,SAmBjB,EJzGM,SAA0B3+B,GAC9B06B,GAAe16B,CACjB,CIyGAuiC,CAAgBP,IC1GV,MAAOQ,WAAkBxM,GAC7Bt2B,WAAAA,CAAoB+iC,GAClBz3B,QADkB,KAAUy3B,WAAVA,GAGlBjhC,EAAAA,EAAAA,KACGqrB,GAAY4V,IAA4C,cAA7BzW,GAAayW,GACzC,2DAIMC,YAAAA,CAAaC,GACrB,OAAOA,EAAKvH,SAASr7B,KAAK0iC,YAE5B7L,WAAAA,CAAYd,GACV,OAAQA,EAAKsF,SAASr7B,KAAK0iC,YAAY31B,UAEzCopB,OAAAA,CAAQ9oB,EAAcC,GACpB,MAAMu1B,EAAS7iC,KAAK2iC,aAAat1B,EAAE0oB,MAC7B+M,EAAS9iC,KAAK2iC,aAAar1B,EAAEyoB,MAC7BiH,EAAW6F,EAAO3G,UAAU4G,GAClC,OAAiB,IAAb9F,EACK5pB,EAAY/F,EAAE5N,KAAM6N,EAAE7N,MAEtBu9B,EAGXjG,QAAAA,CAASC,EAAoBv3B,GAC3B,MAAMsjC,EAAYd,GAAajL,GACzBjB,EAAOkK,GAAajI,WAAW2D,YACnC37B,KAAK0iC,WACLK,GAEF,OAAO,IAAIjN,GAAUr2B,EAAMs2B,GAE7Be,OAAAA,GACE,MAAMf,EAAOkK,GAAajI,WAAW2D,YAAY37B,KAAK0iC,WAAYnB,IAClE,OAAO,IAAIzL,GAAU3iB,EAAU4iB,GAEjC5kB,QAAAA,GACE,OAAOmb,GAAUtsB,KAAK0iC,WAAY,GAAG5+B,KAAK,MCNvC,MAAMk/B,GAAc,IArCrB,cAA0B/M,GAC9BE,OAAAA,CAAQ9oB,EAAcC,GACpB,MAAM0vB,EAAW3vB,EAAE0oB,KAAKmG,UAAU5uB,EAAEyoB,MACpC,OAAiB,IAAbiH,EACK5pB,EAAY/F,EAAE5N,KAAM6N,EAAE7N,MAEtBu9B,EAGXnG,WAAAA,CAAYd,GACV,OAAO,EAETK,mBAAAA,CAAoBC,EAAeC,GACjC,OAAQD,EAAQuG,OAAOtG,GAEzBG,OAAAA,GAEE,OAAQX,GAAkBY,IAE5BI,OAAAA,GAEE,OAAQhB,GAAkBgM,IAG5B/K,QAAAA,CAASC,EAAoBv3B,GAC3B,MAAMsjC,EAAYd,GAAajL,GAC/B,OAAO,IAAIlB,GAAUr2B,EAAMsjC,GAM7B5xB,QAAAA,GACE,MAAO,WCXL,SAAU8xB,GAAYC,GAC1B,MAAO,CAAEx5B,KAAM,QAAkBw5B,eACnC,CAEgB,SAAAC,GACd/H,EACA8H,GAEA,MAAO,CAAEx5B,KAA4B,cAAEw5B,eAAc9H,YACvD,CAEgB,SAAAgI,GACdhI,EACA8H,GAEA,MAAO,CAAEx5B,KAA8B,gBAAEw5B,eAAc9H,YACzD,UAEgBiI,GACdjI,EACA8H,EACAI,GAEA,MAAO,CACL55B,KAA8B,gBAC9Bw5B,eACA9H,YACAkI,UAEJ,OCrCaC,GACX5jC,WAAAA,CAA6B6jC,GAAA,KAAMA,OAANA,EAE7B7H,WAAAA,CACEiH,EACA72B,EACA03B,EACAC,EACA/9B,EACAg+B,IAEAliC,EAAAA,EAAAA,IACEmhC,EAAKjG,UAAU38B,KAAKwjC,QACpB,qDAEF,MAAMI,EAAWhB,EAAKzH,kBAAkBpvB,GAExC,OACE63B,EAASvI,SAASqI,GAAc9G,OAAO6G,EAASpI,SAASqI,KAKrDE,EAAS72B,YAAc02B,EAAS12B,UAK3B61B,GAIiB,MAAxBe,IACEF,EAAS12B,UACP61B,EAAKtH,SAASvvB,GAChB43B,EAAqBE,iBACnBT,GAAmBr3B,EAAK63B,KAG1BniC,EAAAA,EAAAA,IACEmhC,EAAKpI,aACL,uEAGKoJ,EAAS72B,UAClB42B,EAAqBE,iBAAiBV,GAAiBp3B,EAAK03B,IAE5DE,EAAqBE,iBACnBR,GAAmBt3B,EAAK03B,EAAUG,KAIpChB,EAAKpI,cAAgBiJ,EAAS12B,UACzB61B,EAGAA,EAAKnH,qBAAqB1vB,EAAK03B,GAAU/G,UAAU18B,KAAKwjC,SAGnEM,cAAAA,CACER,EACAS,EACAJ,GA6BA,OA3B4B,MAAxBA,IACGL,EAAQ9I,cACX8I,EAAQxH,aAAae,IAAgB,CAAC9wB,EAAKyvB,KACpCuI,EAAQzI,SAASvvB,IACpB43B,EAAqBE,iBACnBT,GAAmBr3B,EAAKyvB,OAK3BuI,EAAQvJ,cACXuJ,EAAQjI,aAAae,IAAgB,CAAC9wB,EAAKyvB,KACzC,GAAI8H,EAAQhI,SAASvvB,GAAM,CACzB,MAAM63B,EAAWN,EAAQnI,kBAAkBpvB,GACtC63B,EAAShH,OAAOpB,IACnBmI,EAAqBE,iBACnBR,GAAmBt3B,EAAKyvB,EAAWoI,SAIvCD,EAAqBE,iBACnBV,GAAiBp3B,EAAKyvB,QAMzBuI,EAAQrH,UAAU18B,KAAKwjC,QAEhCvI,cAAAA,CAAeqI,EAAehD,GAC5B,OAAIgD,EAAQv2B,UACHkzB,GAAajI,WAEbsL,EAAQrI,eAAeqF,GAGlC0D,YAAAA,GACE,OAAO,EAETC,gBAAAA,GACE,OAAOjkC,KAETyyB,QAAAA,GACE,OAAOzyB,KAAKwjC,cChHHU,GAaXvkC,WAAAA,CAAYuO,GACVlO,KAAKmkC,eAAiB,IAAIZ,GAAcr1B,EAAOukB,YAC/CzyB,KAAKwjC,OAASt1B,EAAOukB,WACrBzyB,KAAKokC,WAAaF,GAAaG,cAAcn2B,GAC7ClO,KAAKskC,SAAWJ,GAAaK,YAAYr2B,GACzClO,KAAKwkC,mBAAqBt2B,EAAOu2B,eACjCzkC,KAAK0kC,iBAAmBx2B,EAAOy2B,cAGjCC,YAAAA,GACE,OAAO5kC,KAAKokC,WAGdS,UAAAA,GACE,OAAO7kC,KAAKskC,SAGdQ,OAAAA,CAAQ/O,GACN,MAAMgP,EAAgB/kC,KAAKwkC,kBACvBxkC,KAAKwjC,OAAOrN,QAAQn2B,KAAK4kC,eAAgB7O,IAAS,EAClD/1B,KAAKwjC,OAAOrN,QAAQn2B,KAAK4kC,eAAgB7O,GAAQ,EAC/CiP,EAAchlC,KAAK0kC,gBACrB1kC,KAAKwjC,OAAOrN,QAAQJ,EAAM/1B,KAAK6kC,eAAiB,EAChD7kC,KAAKwjC,OAAOrN,QAAQJ,EAAM/1B,KAAK6kC,cAAgB,EACnD,OAAOE,GAAiBC,EAE1BrJ,WAAAA,CACEiH,EACA72B,EACA03B,EACAC,EACA/9B,EACAg+B,GAKA,OAHK3jC,KAAK8kC,QAAQ,IAAIhP,GAAU/pB,EAAK03B,MACnCA,EAAWxD,GAAajI,YAEnBh4B,KAAKmkC,eAAexI,YACzBiH,EACA72B,EACA03B,EACAC,EACA/9B,EACAg+B,GAGJG,cAAAA,CACER,EACAS,EACAJ,GAEII,EAAQvJ,eAEVuJ,EAAU9D,GAAajI,YAEzB,IAAIiN,EAAWlB,EAAQrH,UAAU18B,KAAKwjC,QAEtCyB,EAAWA,EAAShK,eAAegF,GAAajI,YAChD,MAAM/xB,EAAOjG,KAMb,OALA+jC,EAAQjI,aAAae,IAAgB,CAAC9wB,EAAKyvB,KACpCv1B,EAAK6+B,QAAQ,IAAIhP,GAAU/pB,EAAKyvB,MACnCyJ,EAAWA,EAASxJ,qBAAqB1vB,EAAKk0B,GAAajI,gBAGxDh4B,KAAKmkC,eAAeL,eACzBR,EACA2B,EACAtB,GAGJ1I,cAAAA,CAAeqI,EAAehD,GAE5B,OAAOgD,EAETU,YAAAA,GACE,OAAO,EAETC,gBAAAA,GACE,OAAOjkC,KAAKmkC,eAEd1R,QAAAA,GACE,OAAOzyB,KAAKwjC,OAGN,oBAAOa,CAAcn2B,GAC3B,GAAIA,EAAOg3B,WAAY,CACrB,MAAMC,EAAYj3B,EAAOk3B,oBACzB,OAAOl3B,EAAOukB,WAAWsE,SAAS7oB,EAAOm3B,qBAAsBF,GAE/D,OAAOj3B,EAAOukB,WAAWgE,UAIrB,kBAAO8N,CAAYr2B,GACzB,GAAIA,EAAOo3B,SAAU,CACnB,MAAMC,EAAUr3B,EAAOs3B,kBACvB,OAAOt3B,EAAOukB,WAAWsE,SAAS7oB,EAAOu3B,mBAAoBF,GAE7D,OAAOr3B,EAAOukB,WAAWqE,iBCxGlB4O,GAaX/lC,WAAAA,CAAYuO,GAgPJ,KAAsBy3B,uBAAI5P,GAChC/1B,KAAK4lC,SAAW5lC,KAAK6lC,cAAc9P,GAAQ/1B,KAAK8lC,gBAAgB/P,GAE1D,KAAoBgQ,qBAAIhQ,GAC9B/1B,KAAK4lC,SAAW5lC,KAAK8lC,gBAAgB/P,GAAQ/1B,KAAK6lC,cAAc9P,GAE1D,KAAA+P,gBAAmB/P,IACzB,MAAMiQ,EAAahmC,KAAKwjC,OAAOrN,QAC7Bn2B,KAAKimC,cAAcrB,eACnB7O,GAEF,OAAO/1B,KAAKwkC,kBAAoBwB,GAAc,EAAIA,EAAa,CAAC,EAG1D,KAAAH,cAAiB9P,IACvB,MAAMiQ,EAAahmC,KAAKwjC,OAAOrN,QAC7BJ,EACA/1B,KAAKimC,cAAcpB,cAErB,OAAO7kC,KAAK0kC,gBAAkBsB,GAAc,EAAIA,EAAa,CAAC,EAlQ9DhmC,KAAKimC,cAAgB,IAAI/B,GAAah2B,GACtClO,KAAKwjC,OAASt1B,EAAOukB,WACrBzyB,KAAKkmC,OAASh4B,EAAOi4B,WACrBnmC,KAAK4lC,UAAY13B,EAAOk4B,iBACxBpmC,KAAKwkC,mBAAqBt2B,EAAOu2B,eACjCzkC,KAAK0kC,iBAAmBx2B,EAAOy2B,cAEjChJ,WAAAA,CACEiH,EACA72B,EACA03B,EACAC,EACA/9B,EACAg+B,GAKA,OAHK3jC,KAAKimC,cAAcnB,QAAQ,IAAIhP,GAAU/pB,EAAK03B,MACjDA,EAAWxD,GAAajI,YAEtB4K,EAAKzH,kBAAkBpvB,GAAK6wB,OAAO6G,GAE9Bb,EACEA,EAAK/G,cAAgB77B,KAAKkmC,OAC5BlmC,KAAKimC,cACThC,mBACAtI,YACCiH,EACA72B,EACA03B,EACAC,EACA/9B,EACAg+B,GAGG3jC,KAAKqmC,sBACVzD,EACA72B,EACA03B,EACA99B,EACAg+B,GAING,cAAAA,CACER,EACAS,EACAJ,GAEA,IAAIsB,EACJ,GAAIlB,EAAQvJ,cAAgBuJ,EAAQh3B,UAElCk4B,EAAWhF,GAAajI,WAAW0E,UAAU18B,KAAKwjC,aAElD,GACgB,EAAdxjC,KAAKkmC,OAAanC,EAAQlI,eAC1BkI,EAAQpH,UAAU38B,KAAKwjC,QACvB,CAIA,IAAInC,EAFJ4D,EAAWhF,GAAajI,WAAW0E,UAAU18B,KAAKwjC,QAIhDnC,EADErhC,KAAK4lC,SACK7B,EAAyBhK,uBACnC/5B,KAAKimC,cAAcpB,aACnB7kC,KAAKwjC,QAGKO,EAAyBjK,gBACnC95B,KAAKimC,cAAcrB,eACnB5kC,KAAKwjC,QAGT,IAAItL,EAAQ,EACZ,KAAOmJ,EAAS3J,WAAaQ,EAAQl4B,KAAKkmC,QAAQ,CAChD,MAAM1G,EAAO6B,EAAS7J,UACtB,GAAKx3B,KAAK2lC,uBAAuBnG,GAAjC,CAGO,IAAKx/B,KAAK+lC,qBAAqBvG,GAEpC,MAEAyF,EAAWA,EAASxJ,qBAAqB+D,EAAK//B,KAAM+/B,EAAKzJ,MACzDmC,UAGC,CAQL,IAAImJ,EANJ4D,EAAWlB,EAAQrH,UAAU18B,KAAKwjC,QAElCyB,EAAWA,EAAShK,eAClBgF,GAAajI,YAKbqJ,EADErhC,KAAK4lC,SACIX,EAASjL,mBAAmBh6B,KAAKwjC,QAEjCyB,EAASrL,YAAY55B,KAAKwjC,QAGvC,IAAItL,EAAQ,EACZ,KAAOmJ,EAAS3J,WAAW,CACzB,MAAM8H,EAAO6B,EAAS7J,UAEpBU,EAAQl4B,KAAKkmC,QACblmC,KAAK2lC,uBAAuBnG,IAC5Bx/B,KAAK+lC,qBAAqBvG,GAE1BtH,IAEA+M,EAAWA,EAASxJ,qBAClB+D,EAAK//B,KACLwgC,GAAajI,aAMvB,OAAOh4B,KAAKimC,cACThC,mBACAH,eAAeR,EAAS2B,EAAUtB,GAEvC1I,cAAAA,CAAeqI,EAAehD,GAE5B,OAAOgD,EAETU,YAAAA,GACE,OAAO,EAETC,gBAAAA,GACE,OAAOjkC,KAAKimC,cAAchC,mBAE5BxR,QAAAA,GACE,OAAOzyB,KAAKwjC,OAGN6C,qBAAAA,CACNzD,EACA0D,EACAC,EACA5gC,EACA6gC,GAGA,IAAI/Y,EACJ,GAAIztB,KAAK4lC,SAAU,CACjB,MAAM5I,EAAWh9B,KAAKwjC,OAAOtN,aAC7BzI,EAAMA,CAACpgB,EAAcC,IAAiB0vB,EAAS1vB,EAAGD,QAElDogB,EAAMztB,KAAKwjC,OAAOtN,aAEpB,MAAMuQ,EAAgB7D,GACtBnhC,EAAAA,EAAAA,IAAOglC,EAAc5K,gBAAkB77B,KAAKkmC,OAAQ,IACpD,MAAMQ,EAAoB,IAAI5Q,GAAUwQ,EAAUC,GAC5CI,EAAiB3mC,KAAK4lC,SACxBa,EAAczF,cAAchhC,KAAKwjC,QAChCiD,EAAcvF,aAAalhC,KAAKwjC,QAC/BoD,EAAU5mC,KAAKimC,cAAcnB,QAAQ4B,GAC3C,GAAID,EAAcnL,SAASgL,GAAW,CACpC,MAAMO,EAAeJ,EAActL,kBAAkBmL,GACrD,IAAIQ,EAAYnhC,EAAOohC,mBACrB/mC,KAAKwjC,OACLmD,EACA3mC,KAAK4lC,UAEP,KACe,MAAbkB,IACCA,EAAUrnC,OAAS6mC,GAAYG,EAAcnL,SAASwL,EAAUrnC,QAKjEqnC,EAAYnhC,EAAOohC,mBACjB/mC,KAAKwjC,OACLsD,EACA9mC,KAAK4lC,UAGT,MAAMoB,EACS,MAAbF,EAAoB,EAAIrZ,EAAIqZ,EAAWJ,GAGzC,GADEE,IAAYL,EAAUx5B,WAAai6B,GAAe,EAOlD,OALyB,MAArBR,GACFA,EAAkB3C,iBAChBR,GAAmBiD,EAAUC,EAAWM,IAGrCJ,EAAchL,qBAAqB6K,EAAUC,GAC/C,CACoB,MAArBC,GACFA,EAAkB3C,iBAChBT,GAAmBkD,EAAUO,IAGjC,MAAMI,EAAgBR,EAAchL,qBAClC6K,EACArG,GAAajI,YAIf,OADe,MAAb8O,GAAqB9mC,KAAKimC,cAAcnB,QAAQgC,IAEvB,MAArBN,GACFA,EAAkB3C,iBAChBV,GAAiB2D,EAAUrnC,KAAMqnC,EAAU/Q,OAGxCkR,EAAcxL,qBACnBqL,EAAUrnC,KACVqnC,EAAU/Q,OAGLkR,GAGN,OAAIV,EAAUx5B,UAEZ61B,EACEgE,GACLnZ,EAAIkZ,EAAgBD,IAAsB,GACnB,MAArBF,IACFA,EAAkB3C,iBAChBT,GAAmBuD,EAAelnC,KAAMknC,EAAe5Q,OAEzDyQ,EAAkB3C,iBAChBV,GAAiBmD,EAAUC,KAGxBE,EACJhL,qBAAqB6K,EAAUC,GAC/B9K,qBAAqBkL,EAAelnC,KAAMwgC,GAAajI,aAKrD4K,SCzNAsE,GAAbvnC,WAAAA,GACE,KAASwnC,WAAG,EACZ,KAASC,WAAG,EACZ,KAAaC,eAAG,EAChB,KAAA5C,gBAAiB,EACjB,KAAO6C,SAAG,EACV,KAAWC,aAAG,EACd,KAAA5C,eAAgB,EAChB,KAAMuB,OAAG,EACT,KAASsB,UAAG,GACZ,KAAgBC,iBAAmB,KACnC,KAAeC,gBAAG,GAClB,KAAcC,eAAmB,KACjC,KAAaC,cAAG,GAChB,KAAMpE,OAAkB3G,GAExBqI,QAAAA,GACE,OAAOllC,KAAKonC,UAMdhB,cAAAA,GACE,MAAuB,KAAnBpmC,KAAKwnC,UAKAxnC,KAAKonC,UAEc,MAAnBpnC,KAAKwnC,UAOhBnC,kBAAAA,GAEE,OADA5jC,EAAAA,EAAAA,IAAOzB,KAAKonC,UAAW,oCAChBpnC,KAAKynC,iBAOdrC,iBAAAA,GAEE,OADA3jC,EAAAA,EAAAA,IAAOzB,KAAKonC,UAAW,oCACnBpnC,KAAKqnC,cACArnC,KAAK0nC,gBAELx0B,EAIXoyB,MAAAA,GACE,OAAOtlC,KAAKsnC,QAMd7B,gBAAAA,GAEE,OADAhkC,EAAAA,EAAAA,IAAOzB,KAAKsnC,QAAS,kCACdtnC,KAAK2nC,eAOdnC,eAAAA,GAEE,OADA/jC,EAAAA,EAAAA,IAAOzB,KAAKsnC,QAAS,kCACjBtnC,KAAKunC,YACAvnC,KAAK4nC,cAELz0B,EAIX00B,QAAAA,GACE,OAAO7nC,KAAKmnC,UAMdW,gBAAAA,GACE,OAAO9nC,KAAKmnC,WAAgC,KAAnBnnC,KAAKwnC,UAMhCrB,QAAAA,GAEE,OADA1kC,EAAAA,EAAAA,IAAOzB,KAAKmnC,UAAW,oCAChBnnC,KAAKkmC,OAGdzT,QAAAA,GACE,OAAOzyB,KAAKwjC,OAGdzR,YAAAA,GACE,QAAS/xB,KAAKonC,WAAapnC,KAAKsnC,SAAWtnC,KAAKmnC,WAGlDrV,SAAAA,GACE,OAAO9xB,KAAK+xB,gBAAkB/xB,KAAKwjC,SAAW3G,GAGhD5E,IAAAA,GACE,MAAMA,EAAO,IAAIiP,GAejB,OAdAjP,EAAKkP,UAAYnnC,KAAKmnC,UACtBlP,EAAKiO,OAASlmC,KAAKkmC,OACnBjO,EAAKmP,UAAYpnC,KAAKonC,UACtBnP,EAAKwM,eAAiBzkC,KAAKykC,eAC3BxM,EAAKwP,iBAAmBznC,KAAKynC,iBAC7BxP,EAAKoP,cAAgBrnC,KAAKqnC,cAC1BpP,EAAKyP,gBAAkB1nC,KAAK0nC,gBAC5BzP,EAAKqP,QAAUtnC,KAAKsnC,QACpBrP,EAAK0M,cAAgB3kC,KAAK2kC,cAC1B1M,EAAK0P,eAAiB3nC,KAAK2nC,eAC3B1P,EAAKsP,YAAcvnC,KAAKunC,YACxBtP,EAAK2P,cAAgB5nC,KAAK4nC,cAC1B3P,EAAKuL,OAASxjC,KAAKwjC,OACnBvL,EAAKuP,UAAYxnC,KAAKwnC,UACfvP,GAqIL,SAAU8P,GACdC,GAEA,MAAMC,EAAsC,CAAC,EAE7C,GAAID,EAAYlW,YACd,OAAOmW,EAGT,IAAIC,EAaJ,GAZIF,EAAYxE,SAAW3G,GACzBqL,EAAU,YACDF,EAAYxE,SAAWR,GAChCkF,EAAU,SACDF,EAAYxE,SAAWvM,GAChCiR,EAAU,SAEVzmC,EAAAA,EAAAA,IAAOumC,EAAYxE,kBAAkBf,GAAW,4BAChDyF,EAAUF,EAAYxE,OAAOryB,YAE/B82B,EAAE,SAAkCz+B,EAAAA,EAAAA,IAAU0+B,GAE1CF,EAAYZ,UAAW,CACzB,MAAMe,EAAaH,EAAYvD,eAC5B,aACD,UACFwD,EAAGE,IAAc3+B,EAAAA,EAAAA,IAAUw+B,EAAYP,kBACnCO,EAAYX,gBACdY,EAAGE,IAAe,KAAM3+B,EAAAA,EAAAA,IAAUw+B,EAAYN,kBAIlD,GAAIM,EAAYV,QAAS,CACvB,MAAMc,EAAWJ,EAAYrD,cAC1B,YACD,QACFsD,EAAGG,IAAY5+B,EAAAA,EAAAA,IAAUw+B,EAAYL,gBACjCK,EAAYT,cACdU,EAAGG,IAAa,KAAM5+B,EAAAA,EAAAA,IAAUw+B,EAAYJ,gBAYhD,OARII,EAAYb,YACVa,EAAY5B,iBACd6B,EAAuC,aAAGD,EAAY9B,OAEtD+B,EAAsC,YAAGD,EAAY9B,QAIlD+B,CACT,CAEM,SAAUI,GACdL,GAEA,MAAMp7B,EAA+B,CAAC,EAmBtC,GAlBIo7B,EAAYZ,YACdx6B,EAA8C,GAC5Co7B,EAAYP,iBACVO,EAAYX,gBACdz6B,EAA6C,GAC3Co7B,EAAYN,iBAEhB96B,EAAqD,KAClDo7B,EAAYvD,gBAEbuD,EAAYV,UACd16B,EAA4C,GAAGo7B,EAAYL,eACvDK,EAAYT,cACd36B,EAA2C,GAAGo7B,EAAYJ,eAE5Dh7B,EAAmD,KAChDo7B,EAAYrD,eAEbqD,EAAYb,UAAW,CACzBv6B,EAAkC,EAAGo7B,EAAY9B,OACjD,IAAIoC,EAAWN,EAAYR,UACV,KAAbc,IAEAA,EADEN,EAAY5B,iBACH,IAEA,KAGfx5B,EAAG,GAAsC07B,EAM3C,OAHIN,EAAYxE,SAAW3G,KACzBjwB,EAAG,EAAkCo7B,EAAYxE,OAAOryB,YAEnDvE,CACT,CClYM,MAAO27B,WAA2B7e,GACtCW,WAAAA,CAAYC,GACV,MAAM,IAAIrrB,MAAM,2BAYlB,mBAAOupC,CAAalvB,EAAqBmY,GACvC,YAAYhsB,IAARgsB,EACK,OAASA,IAEhBhwB,EAAAA,EAAAA,IACE6X,EAAMuY,aAAaC,YACnB,kDAEKxY,EAAM4X,MAAM/f,YAQvBxR,WAAAA,CACUmmB,EACA8I,EAMAG,EACAC,GAER/jB,QAVQ,KAAS6a,UAATA,EACA,KAAa8I,cAAbA,EAMA,KAAkBG,mBAAlBA,EACA,KAAsBC,uBAAtBA,EAjCF,KAAAvT,KAAqC9I,EAAW,WAMhD,KAAQ81B,SAA4B,CAAC,EAiC7ClX,MAAAA,CACEjY,EACAkY,EACAC,EACA5H,GAEA,MAAMD,EAAatQ,EAAM4X,MAAM/f,WAC/BnR,KAAKyb,KAAK,qBAAuBmO,EAAa,IAAMtQ,EAAMqY,kBAG1D,MAAM+W,EAAWH,GAAmBC,aAAalvB,EAAOmY,GAClDkX,EAAa,CAAC,EACpB3oC,KAAKyoC,SAASC,GAAYC,EAE1B,MAAMC,EAAwBb,GAC5BzuB,EAAMuY,cAGR7xB,KAAK6oC,aACHjf,EAAa,QACbgf,GACA,CAAC1nC,EAAOuJ,KACN,IAAImB,EAAOnB,EAWX,GATc,MAAVvJ,IACF0K,EAAO,KACP1K,EAAQ,MAGI,OAAVA,GACFlB,KAAK4uB,cAAchF,EAAYhe,GAAmB,EAAO6lB,IAGvD3kB,EAAAA,EAAAA,IAAQ9M,KAAKyoC,SAAUC,KAAcC,EAAY,CACnD,IAAIvW,EAIFA,EAHGlxB,EAEgB,MAAVA,EACA,oBAEA,cAAgBA,EAJhB,KAOX2oB,EAAWuI,EAAQ,UAO3BgB,QAAAA,CAAS9Z,EAAqBmY,GAC5B,MAAMiX,EAAWH,GAAmBC,aAAalvB,EAAOmY,UACjDzxB,KAAKyoC,SAASC,GAGvB33B,GAAAA,CAAIuI,GACF,MAAMsvB,EAAwBb,GAC5BzuB,EAAMuY,cAGFjI,EAAatQ,EAAM4X,MAAM/f,WAEzB6f,EAAW,IAAIjpB,EAAAA,GA0BrB,OAxBA/H,KAAK6oC,aACHjf,EAAa,QACbgf,GACA,CAAC1nC,EAAOuJ,KACN,IAAImB,EAAOnB,EAEG,MAAVvJ,IACF0K,EAAO,KACP1K,EAAQ,MAGI,OAAVA,GACFlB,KAAK4uB,cACHhF,EACAhe,GACa,EACJ,MAEXolB,EAAS/oB,QAAQ2D,IAEjBolB,EAAShpB,OAAO,IAAI/I,MAAM2M,OAIzBolB,EAAS9oB,QAIlB8hB,gBAAAA,CAAiBxhB,IAQTqgC,YAAAA,CACNjf,GAE0D,IAD1Dgf,EAA0DzpC,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,MAC1DkJ,EAA0DlJ,UAAAC,OAAA,EAAAD,UAAA,QAAAsG,EAI1D,OAFAmjC,EAA8B,OAAI,SAE3BzgC,QAAQgtB,IAAI,CACjBn1B,KAAK+uB,mBAAmBpY,UAA2B,GACnD3W,KAAKgvB,uBAAuBrY,UAA2B,KACtDD,MAAKoyB,IAA+B,IAA7B3tB,EAAW9E,GAAcyyB,EAC7B3tB,GAAaA,EAAUtD,cACzB+wB,EAA4B,KAAIztB,EAAUtD,aAExCxB,GAAiBA,EAAc7N,QACjCogC,EAA0B,GAAIvyB,EAAc7N,OAG9C,MAAMgZ,GACHxhB,KAAK8lB,UAAUzN,OAAS,WAAa,WACtCrY,KAAK8lB,UAAU3e,KACfyiB,EAFA,OAKA5pB,KAAK8lB,UAAUxN,WACftK,EAAAA,EAAAA,IAAY46B,GAEd5oC,KAAKyb,KAAK,4BAA8B+F,GACxC,MAAMunB,EAAM,IAAIC,eAChBD,EAAI3mB,mBAAqB,KACvB,GAAI/Z,GAA+B,IAAnB0gC,EAAI1sB,WAAkB,CACpCrc,KAAKyb,KACH,qBAAuB+F,EAAM,qBAC7BunB,EAAI3W,OACJ,YACA2W,EAAIE,cAEN,IAAI97B,EAAM,KACV,GAAI47B,EAAI3W,QAAU,KAAO2W,EAAI3W,OAAS,IAAK,CACzC,IACEjlB,GAAMjB,EAAAA,EAAAA,IAAS68B,EAAIE,cACnB,MAAO5jC,GACPtE,EACE,qCACEygB,EACA,KACAunB,EAAIE,cAGV5gC,EAAS,KAAM8E,QAGI,MAAf47B,EAAI3W,QAAiC,MAAf2W,EAAI3W,QAC5BrxB,EACE,sCACEygB,EACA,YACAunB,EAAI3W,QAGV/pB,EAAS0gC,EAAI3W,QAEf/pB,EAAW,OAIf0gC,EAAIx+B,KAAK,MAAOiX,GAAuB,GACvCunB,EAAIhqB,MAAM,WClOHmqB,GAAbvpC,WAAAA,GACU,KAAAwpC,UAAkBlJ,GAAajI,WAEvCoR,OAAAA,CAAQld,GACN,OAAOlsB,KAAKmpC,UAAU9N,SAASnP,GAGjCmd,cAAAA,CAAend,EAAYod,GACzBtpC,KAAKmpC,UAAYnpC,KAAKmpC,UAAUxN,YAAYzP,EAAMod,aCHtCC,KACd,MAAO,CACLhkC,MAAO,KACP68B,SAAU,IAAI/S,IAElB,UAoCgBma,GACdC,EACAvd,EACAtgB,GAEA,GAAIkhB,GAAYZ,GACdud,EAAmBlkC,MAAQqG,EAC3B69B,EAAmBrH,SAASsH,aACvB,GAAiC,OAA7BD,EAAmBlkC,MAC5BkkC,EAAmBlkC,MAAQkkC,EAAmBlkC,MAAMo2B,YAAYzP,EAAMtgB,OACjE,CACL,MAAM06B,EAAWra,GAAaC,GACzBud,EAAmBrH,SAASxQ,IAAI0U,IACnCmD,EAAmBrH,SAASzxB,IAAI21B,EAAUiD,MAK5CC,GAFcC,EAAmBrH,SAASrxB,IAAIu1B,GAC9Cpa,EAAOE,GAAaF,GACoBtgB,GAE5C,UA0DgB+9B,GACdF,EACAG,EACAC,GAEiC,OAA7BJ,EAAmBlkC,MACrBskC,EAAKD,EAAYH,EAAmBlkC,OAexB,SACdkkC,EACAI,GAEAJ,EAAmBrH,SAASh0B,SAAQ,CAAC07B,EAAM/9B,KACzC89B,EAAK99B,EAAK+9B,EAAK,GAEnB,CApBIC,CAA+BN,GAAoB,CAAC19B,EAAK+9B,KAEvDH,GAA8BG,EADjB,IAAIpe,GAAKke,EAAWz4B,WAAa,IAAMpF,GACV89B,EAAK,GAGrD,OCvIaG,GAGXrqC,WAAAA,CAAoBsqC,GAAA,KAAWA,YAAXA,EAFZ,KAAKC,MAAmC,KAIhDn5B,GAAAA,GACE,MAAMo5B,EAAWnqC,KAAKiqC,YAAYl5B,MAE5BukB,EAAK1vB,OAAAoD,OAAA,GAAQmhC,GAQnB,OAPInqC,KAAKkqC,OACPl2B,EAAKhU,KAAKkqC,OAAO,CAACE,EAAc7kC,KAC9B+vB,EAAM8U,GAAQ9U,EAAM8U,GAAQ7kC,CAAK,IAGrCvF,KAAKkqC,MAAQC,EAEN7U,SCRE+U,GAIX1qC,WAAAA,CAAY2qC,EAAqCC,GAAA,KAAOA,QAAPA,EAFjD,KAAcC,eAA6B,CAAC,EAG1CxqC,KAAKyqC,eAAiB,IAAIT,GAAcM,GAExC,MAAM10B,EAbmB,IAevB,IAAgDrB,KAAKkJ,SACvD/H,EAAsB1V,KAAK0qC,aAAaj4B,KAAKzS,MAAOuU,KAAKI,MAAMiB,IAGzD80B,YAAAA,GACN,MAAMpgB,EAAQtqB,KAAKyqC,eAAe15B,MAC5B45B,EAA8B,CAAC,EACrC,IAAIC,GAAoB,EAExB52B,EAAKsW,GAAO,CAAC8f,EAAc7kC,KACrBA,EAAQ,IAAKoH,EAAAA,EAAAA,IAAS3M,KAAKwqC,eAAgBJ,KAC7CO,EAAcP,GAAQ7kC,EACtBqlC,GAAoB,MAIpBA,GACF5qC,KAAKuqC,QAAQlgB,YAAYsgB,GAI3Bj1B,EACE1V,KAAK0qC,aAAaj4B,KAAKzS,MACvBuU,KAAKI,MAAsB,EAAhBJ,KAAKkJ,SAlCQ,OCT9B,IAAYotB,GA6CN,SAAUC,GACdpZ,GAEA,MAAO,CACLqZ,UAAU,EACVC,YAAY,EACZtZ,UACAuZ,QAAQ,EAEZ,EAtDA,SAAYJ,GACVA,EAAAA,EAAA,yBACAA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,mCACAA,EAAAA,EAAA,oCACD,CALD,CAAYA,KAAAA,GAKX,WCEYK,GAUXvrC,WAAAA,CAC4BusB,EACAif,EACAC,GAFA,KAAIlf,KAAJA,EACA,KAAYif,aAAZA,EACA,KAAMC,OAANA,EAX5B,KAAA1hC,KAAOmhC,GAAcQ,eAGrB,KAAM1lC,ODgBC,CACLolC,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GCVVK,iBAAAA,CAAkBlQ,GAChB,GAAKtO,GAAY9sB,KAAKksB,MAUf,IAA+B,MAA3BlsB,KAAKmrC,aAAa5lC,MAM3B,OALA9D,EAAAA,EAAAA,IACEzB,KAAKmrC,aAAa/I,SAASr1B,UAC3B,4DAGK/M,KACF,CACL,MAAMo+B,EAAYp+B,KAAKmrC,aAAaI,QAAQ,IAAI7f,GAAK0P,IACrD,OAAO,IAAI8P,GAAalf,KAAgBoS,EAAWp+B,KAAKorC,SAdxD,OAJA3pC,EAAAA,EAAAA,IACEwqB,GAAajsB,KAAKksB,QAAUkP,EAC5B,iDAEK,IAAI8P,GACT9e,GAAapsB,KAAKksB,MAClBlsB,KAAKmrC,aACLnrC,KAAKorC,eCjCAI,GAIX7rC,WAAAA,CAAmBgG,EAAgCumB,GAAhC,KAAMvmB,OAANA,EAAgC,KAAIumB,KAAJA,EAFnD,KAAAxiB,KAAOmhC,GAAcY,gBAIrBH,iBAAAA,CAAkBlQ,GAChB,OAAItO,GAAY9sB,KAAKksB,MACZ,IAAIsf,GAAexrC,KAAK2F,OAAQqmB,MAEhC,IAAIwf,GAAexrC,KAAK2F,OAAQymB,GAAapsB,KAAKksB,cCTlDwf,GAIX/rC,WAAAA,CACSgG,EACAumB,EACA0W,GAFA,KAAMj9B,OAANA,EACA,KAAIumB,KAAJA,EACA,KAAI0W,KAAJA,EALT,KAAAl5B,KAAOmhC,GAAcc,UAQrBL,iBAAAA,CAAkBlQ,GAChB,OAAItO,GAAY9sB,KAAKksB,MACZ,IAAIwf,GACT1rC,KAAK2F,OACLqmB,KACAhsB,KAAK4iC,KAAKzH,kBAAkBC,IAGvB,IAAIsQ,GAAU1rC,KAAK2F,OAAQymB,GAAapsB,KAAKksB,MAAOlsB,KAAK4iC,aCRzDgJ,GAIXjsC,WAAAA,CAC4BgG,EACAumB,EACAkW,GAFA,KAAMz8B,OAANA,EACA,KAAIumB,KAAJA,EACA,KAAQkW,SAARA,EAL5B,KAAA14B,KAAOmhC,GAAcgB,MAOrBP,iBAAAA,CAAkBlQ,GAChB,GAAItO,GAAY9sB,KAAKksB,MAAO,CAC1B,MAAMkS,EAAYp+B,KAAKoiC,SAASmJ,QAAQ,IAAI7f,GAAK0P,IACjD,OAAIgD,EAAUrxB,UAEL,KACEqxB,EAAU74B,MAEZ,IAAImmC,GAAU1rC,KAAK2F,OAAQqmB,KAAgBoS,EAAU74B,OAGrD,IAAIqmC,GAAM5rC,KAAK2F,OAAQqmB,KAAgBoS,GAOhD,OAJA38B,EAAAA,EAAAA,IACEwqB,GAAajsB,KAAKksB,QAAUkP,EAC5B,kEAEK,IAAIwQ,GAAM5rC,KAAK2F,OAAQymB,GAAapsB,KAAKksB,MAAOlsB,KAAKoiC,UAGhEjxB,QAAAA,GACE,MACE,aACAnR,KAAKksB,KACL,KACAlsB,KAAK2F,OAAOwL,WACZ,WACAnR,KAAKoiC,SAASjxB,WACd,WC5CO26B,GACXnsC,WAAAA,CACUosC,EACAC,EACAC,GAFA,KAAKF,MAALA,EACA,KAAiBC,kBAAjBA,EACA,KAASC,UAATA,EAMVC,kBAAAA,GACE,OAAOlsC,KAAKgsC,kBAMdG,UAAAA,GACE,OAAOnsC,KAAKisC,UAGdG,iBAAAA,CAAkBlgB,GAChB,GAAIY,GAAYZ,GACd,OAAOlsB,KAAKksC,uBAAyBlsC,KAAKisC,UAG5C,MAAM3F,EAAWra,GAAaC,GAC9B,OAAOlsB,KAAKqsC,mBAAmB/F,GAGjC+F,kBAAAA,CAAmBtgC,GACjB,OACG/L,KAAKksC,uBAAyBlsC,KAAKisC,WAAcjsC,KAAK+rC,MAAMzQ,SAASvvB,GAI1Eq9B,OAAAA,GACE,OAAOppC,KAAK+rC,aC/BHO,GAGX3sC,WAAAA,CAAmB4sC,GAAA,KAAMA,OAANA,EACjBvsC,KAAKwjC,OAASxjC,KAAKusC,OAAO1a,aAAaY,YAiF3C,SAAS+Z,GACPC,EACAC,EACA/hB,EACAgiB,EACAC,EACAC,GAEA,MAAMC,EAAkBH,EAAQI,QAAOC,GAAUA,EAAOtjC,OAASihB,IAEjEmiB,EAAgBn5B,MAAK,CAACtG,EAAGC,IAoC3B,SACEm/B,EACAp/B,EACAC,GAEA,GAAmB,MAAfD,EAAE+tB,WAAoC,MAAf9tB,EAAE8tB,UAC3B,MAAMx5B,EAAAA,EAAAA,IAAe,sCAEvB,MAAMqrC,EAAW,IAAInX,GAAUzoB,EAAE+tB,UAAW/tB,EAAE61B,cACxCgK,EAAW,IAAIpX,GAAUxoB,EAAE8tB,UAAW9tB,EAAE41B,cAC9C,OAAOuJ,EAAejJ,OAAOrN,QAAQ8W,EAAUC,EACjD,CA9CIC,CAA6BV,EAAgBp/B,EAAGC,KAElDw/B,EAAgB1+B,SAAQ4+B,IACtB,MAAMI,EAeV,SACEX,EACAO,EACAH,GAEA,MAAoB,UAAhBG,EAAOtjC,MAAoC,kBAAhBsjC,EAAOtjC,OAGpCsjC,EAAOK,SAAWR,EAAWtR,wBAC3ByR,EAAO5R,UACP4R,EAAO9J,aACPuJ,EAAejJ,SALVwJ,CASX,CA9B+BM,CACzBb,EACAO,EACAH,GAEFD,EAAcx+B,SAAQm/B,IAChBA,EAAaC,WAAWR,EAAOtjC,OACjCgjC,EAAO3sC,KACLwtC,EAAaE,YAAYL,EAAoBX,EAAeF,WAGhE,GAEN,CCjHgB,SAAAmB,GACdb,EACAc,GAEA,MAAO,CAAEd,aAAYc,cACvB,CAEM,SAAUC,GACdC,EACAC,EACAC,EACA9I,GAEA,OAAOyI,GACL,IAAI5B,GAAUgC,EAAWC,EAAU9I,GACnC4I,EAAUF,YAEd,CAEM,SAAUK,GACdH,EACAI,EACAF,EACA9I,GAEA,OAAOyI,GACLG,EAAUhB,WACV,IAAIf,GAAUmC,EAAYF,EAAU9I,GAExC,CAEM,SAAUiJ,GACdL,GAEA,OAAOA,EAAUhB,WAAWX,qBACxB2B,EAAUhB,WAAWzD,UACrB,IACN,CAEM,SAAU+E,GACdN,GAEA,OAAOA,EAAUF,YAAYzB,qBACzB2B,EAAUF,YAAYvE,UACtB,IACN,CChDA,IAAIgF,SAkBSC,GACX,iBAAOC,CAAc1hC,GACnB,IAAIk9B,EAAyB,IAAIuE,GAAiB,MAIlD,OAHAr6B,EAAKpH,GAAK,CAAC2hC,EAAmBhI,KAC5BuD,EAAOA,EAAKn5B,IAAI,IAAI+a,GAAK6iB,GAAYhI,EAAU,IAE1CuD,EAGTnqC,WAAAA,CACkB4F,GAIG,IAHH68B,EAGZjjC,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,IAzBDivC,KACHA,GAAyB,IAAIrW,GAC3BvkB,IAGG46B,IAgBW,KAAK7oC,MAALA,EACA,KAAQ68B,SAARA,EASlBr1B,OAAAA,GACE,OAAsB,OAAf/M,KAAKuF,OAAkBvF,KAAKoiC,SAASr1B,UAa9CyhC,gCAAAA,CACEC,EACAC,GAEA,GAAkB,MAAd1uC,KAAKuF,OAAiBmpC,EAAU1uC,KAAKuF,OACvC,MAAO,CAAE2mB,KAAMF,KAAgBzmB,MAAOvF,KAAKuF,OAE3C,GAAIunB,GAAY2hB,GACd,OAAO,KACF,CACL,MAAM7S,EAAQ3P,GAAawiB,GACrBrO,EAAQpgC,KAAKoiC,SAASrxB,IAAI6qB,GAChC,GAAc,OAAVwE,EAAgB,CAClB,MAAMuO,EACJvO,EAAMoO,iCACJpiB,GAAaqiB,GACbC,GAEJ,GAAiC,MAA7BC,EAAmC,CAKrC,MAAO,CAAEziB,KAJQS,GACf,IAAIjB,GAAKkQ,GACT+S,EAA0BziB,MAEH3mB,MAAOopC,EAA0BppC,OAE1D,OAAO,KAGT,OAAO,MAUfqpC,wBAAAA,CACEH,GAEA,OAAOzuC,KAAKwuC,iCAAiCC,GAAc,KAAM,IAMnElD,OAAAA,CAAQkD,GACN,GAAI3hB,GAAY2hB,GACd,OAAOzuC,KACF,CACL,MAAM47B,EAAQ3P,GAAawiB,GACrBrQ,EAAYp+B,KAAKoiC,SAASrxB,IAAI6qB,GACpC,OAAkB,OAAdwC,EACKA,EAAUmN,QAAQnf,GAAaqiB,IAE/B,IAAIJ,GAAiB,OAYlC19B,GAAAA,CAAI89B,EAAoBI,GACtB,GAAI/hB,GAAY2hB,GACd,OAAO,IAAIJ,GAAcQ,EAAO7uC,KAAKoiC,UAChC,CACL,MAAMxG,EAAQ3P,GAAawiB,GAErBhL,GADQzjC,KAAKoiC,SAASrxB,IAAI6qB,IAAU,IAAIyS,GAAiB,OACxC19B,IAAIyb,GAAaqiB,GAAeI,GACjD9O,EAAc//B,KAAKoiC,SAAS5J,OAAOoD,EAAO6H,GAChD,OAAO,IAAI4K,GAAcruC,KAAKuF,MAAOw6B,IAUzC7uB,MAAAA,CAAOu9B,GACL,GAAI3hB,GAAY2hB,GACd,OAAIzuC,KAAKoiC,SAASr1B,UACT,IAAIshC,GAAiB,MAErB,IAAIA,GAAc,KAAMruC,KAAKoiC,UAEjC,CACL,MAAMxG,EAAQ3P,GAAawiB,GACrBrO,EAAQpgC,KAAKoiC,SAASrxB,IAAI6qB,GAChC,GAAIwE,EAAO,CACT,MAAMqD,EAAWrD,EAAMlvB,OAAOkb,GAAaqiB,IAC3C,IAAI1O,EAMJ,OAJEA,EADE0D,EAAS12B,UACG/M,KAAKoiC,SAASlxB,OAAO0qB,GAErB57B,KAAKoiC,SAAS5J,OAAOoD,EAAO6H,GAEzB,OAAfzjC,KAAKuF,OAAkBw6B,EAAYhzB,UAC9B,IAAIshC,GAAiB,MAErB,IAAIA,GAAcruC,KAAKuF,MAAOw6B,GAGvC,OAAO//B,MAWb+Q,GAAAA,CAAI09B,GACF,GAAI3hB,GAAY2hB,GACd,OAAOzuC,KAAKuF,MACP,CACL,MAAMq2B,EAAQ3P,GAAawiB,GACrBrO,EAAQpgC,KAAKoiC,SAASrxB,IAAI6qB,GAChC,OAAIwE,EACKA,EAAMrvB,IAAIqb,GAAaqiB,IAEvB,MAYbK,OAAAA,CAAQL,EAAoBM,GAC1B,GAAIjiB,GAAY2hB,GACd,OAAOM,EACF,CACL,MAAMnT,EAAQ3P,GAAawiB,GAErBhL,GADQzjC,KAAKoiC,SAASrxB,IAAI6qB,IAAU,IAAIyS,GAAiB,OACxCS,QAAQ1iB,GAAaqiB,GAAeM,GAC3D,IAAIhP,EAMJ,OAJEA,EADE0D,EAAS12B,UACG/M,KAAKoiC,SAASlxB,OAAO0qB,GAErB57B,KAAKoiC,SAAS5J,OAAOoD,EAAO6H,GAErC,IAAI4K,GAAcruC,KAAKuF,MAAOw6B,IASzCiP,IAAAA,CAAQ/hC,GACN,OAAOjN,KAAKivC,MAAMjjB,KAAgB/e,GAM5BgiC,KAAAA,CACNC,EACAjiC,GAEA,MAAMkiC,EAA4B,CAAC,EAMnC,OALAnvC,KAAKoiC,SAASjK,kBACZ,CAACmO,EAAkBlI,KACjB+Q,EAAM7I,GAAYlI,EAAU6Q,MAAMtiB,GAAUuiB,EAAW5I,GAAWr5B,EAAG,IAGlEA,EAAGiiC,EAAWlvC,KAAKuF,MAAO4pC,GAMnCC,UAAAA,CAAcljB,EAAY7c,GACxB,OAAOrP,KAAKqvC,YAAYnjB,EAAMF,KAAgB3c,GAGxCggC,WAAAA,CACNC,EACAJ,EACA7/B,GAEA,MAAM5E,IAASzK,KAAKuF,OAAQ8J,EAAE6/B,EAAWlvC,KAAKuF,OAC9C,GAAIkF,EACF,OAAOA,EAEP,GAAIqiB,GAAYwiB,GACd,OAAO,KACF,CACL,MAAM1T,EAAQ3P,GAAaqjB,GACrBxI,EAAY9mC,KAAKoiC,SAASrxB,IAAI6qB,GACpC,OAAIkL,EACKA,EAAUuI,YACfjjB,GAAakjB,GACb3iB,GAAUuiB,EAAWtT,GACrBvsB,GAGK,MAMfkgC,aAAAA,CACErjB,EACA7c,GAEA,OAAOrP,KAAKwvC,eAAetjB,EAAMF,KAAgB3c,GAG3CmgC,cAAAA,CACNF,EACAG,EACApgC,GAEA,GAAIyd,GAAYwiB,GACd,OAAOtvC,KACF,CACDA,KAAKuF,OACP8J,EAAEogC,EAAqBzvC,KAAKuF,OAE9B,MAAMq2B,EAAQ3P,GAAaqjB,GACrBxI,EAAY9mC,KAAKoiC,SAASrxB,IAAI6qB,GACpC,OAAIkL,EACKA,EAAU0I,eACfpjB,GAAakjB,GACb3iB,GAAU8iB,EAAqB7T,GAC/BvsB,GAGK,IAAIg/B,GAAiB,OAWlCqB,OAAAA,CAAQrgC,GACNrP,KAAK2vC,SAAS3jB,KAAgB3c,GAGxBsgC,QAAAA,CACNF,EACApgC,GAEArP,KAAKoiC,SAASjK,kBAAiB,CAACiD,EAAWgD,KACzCA,EAAUuR,SAAShjB,GAAU8iB,EAAqBrU,GAAY/rB,EAAE,IAE9DrP,KAAKuF,OACP8J,EAAEogC,EAAqBzvC,KAAKuF,OAIhCqqC,YAAAA,CAAavgC,GACXrP,KAAKoiC,SAASjK,kBACZ,CAACiD,EAAmBgD,KACdA,EAAU74B,OACZ8J,EAAE+rB,EAAWgD,EAAU74B,iBC9TpBsqC,GACXlwC,WAAAA,CAAmBmwC,GAAA,KAAUA,WAAVA,EAEnB,YAAOC,GACL,OAAO,IAAIF,GAAc,IAAIxB,GAAc,iBAI/B2B,GACdC,EACA/jB,EACA6J,GAEA,GAAIjJ,GAAYZ,GACd,OAAO,IAAI2jB,GAAc,IAAIxB,GAActY,IACtC,CACL,MAAMma,EAAWD,EAAcH,WAAWlB,yBAAyB1iB,GACnE,GAAgB,MAAZgkB,EAAkB,CACpB,MAAMC,EAAeD,EAAShkB,KAC9B,IAAI3mB,EAAQ2qC,EAAS3qC,MACrB,MAAMkpC,EAAe1hB,GAAgBojB,EAAcjkB,GAEnD,OADA3mB,EAAQA,EAAMo2B,YAAY8S,EAAc1Y,GACjC,IAAI8Z,GACTI,EAAcH,WAAWn/B,IAAIw/B,EAAc5qC,IAExC,CACL,MAAMgmC,EAAU,IAAI8C,GAActY,GAC5Bqa,EAAeH,EAAcH,WAAWhB,QAAQ5iB,EAAMqf,GAC5D,OAAO,IAAIsE,GAAcO,IAG/B,UAEgBC,GACdJ,EACA/jB,EACAokB,GAEA,IAAIC,EAAWN,EAIf,OAHAj8B,EAAKs8B,GAAS,CAAChK,EAAkBvQ,KAC/Bwa,EAAWP,GAAsBO,EAAU5jB,GAAUT,EAAMoa,GAAWvQ,EAAK,IAEtEwa,CACT,CAUgB,SAAAC,GACdP,EACA/jB,GAEA,GAAIY,GAAYZ,GACd,OAAO2jB,GAAcE,QAChB,CACL,MAAMK,EAAeH,EAAcH,WAAWhB,QAC5C5iB,EACA,IAAImiB,GAAoB,OAE1B,OAAO,IAAIwB,GAAcO,GAE7B,CAUgB,SAAAK,GACdR,EACA/jB,GAEA,OAA4D,MAArDwkB,GAA6BT,EAAe/jB,EACrD,CAUgB,SAAAwkB,GACdT,EACA/jB,GAEA,MAAMgkB,EAAWD,EAAcH,WAAWlB,yBAAyB1iB,GACnE,OAAgB,MAAZgkB,EACKD,EAAcH,WAClB/+B,IAAIm/B,EAAShkB,MACbmP,SAAStO,GAAgBmjB,EAAShkB,KAAMA,IAEpC,IAEX,CAQM,SAAUykB,GACdV,GAEA,MAAM7N,EAAwB,GACxBrM,EAAOka,EAAcH,WAAWvqC,MAoBtC,OAnBY,MAARwwB,EAEGA,EAAKyE,cACPzE,EAAsB+F,aACrBe,IACA,CAACzB,EAAWI,KACV4G,EAASriC,KAAK,IAAI+1B,GAAUsF,EAAWI,GAAW,IAKxDyU,EAAcH,WAAW1N,SAASjK,kBAChC,CAACiD,EAAWgD,KACa,MAAnBA,EAAU74B,OACZ68B,EAASriC,KAAK,IAAI+1B,GAAUsF,EAAWgD,EAAU74B,WAKlD68B,CACT,CAEgB,SAAAwO,GACdX,EACA/jB,GAEA,GAAIY,GAAYZ,GACd,OAAO+jB,EACF,CACL,MAAMY,EAAgBH,GAA6BT,EAAe/jB,GAClE,OACS,IAAI2jB,GADQ,MAAjBgB,EACuB,IAAIxC,GAAcwC,GAElBZ,EAAcH,WAAWvE,QAAQrf,IAGhE,CAMM,SAAU4kB,GAAqBb,GACnC,OAAOA,EAAcH,WAAW/iC,SAClC,CAQgB,SAAAgkC,GACdd,EACAla,GAEA,OAAOib,GAAkBhlB,KAAgBikB,EAAcH,WAAY/Z,EACrE,CAEA,SAASib,GACPvC,EACAwC,EACAlb,GAEA,GAAuB,MAAnBkb,EAAU1rC,MAEZ,OAAOwwB,EAAK4F,YAAY8S,EAAcwC,EAAU1rC,OAC3C,CACL,IAAI2rC,EAAgB,KAyBpB,OAxBAD,EAAU7O,SAASjK,kBAAiB,CAACmO,EAAUlI,KAC5B,cAAbkI,IAGF7kC,EAAAA,EAAAA,IACsB,OAApB28B,EAAU74B,MACV,6CAEF2rC,EAAgB9S,EAAU74B,OAE1BwwB,EAAOib,GACLrkB,GAAU8hB,EAAcnI,GACxBlI,EACArI,MAKDA,EAAKsF,SAASoT,GAAc1hC,WAA+B,OAAlBmkC,IAC5Cnb,EAAOA,EAAK4F,YACVhP,GAAU8hB,EAAc,aACxByC,IAGGnb,EAEX,CCzLgB,SAAAob,GACdF,EACA/kB,GAEA,OAAOklB,GAAgBllB,EAAM+kB,EAC/B,CAsFgB,SAAAI,GACdJ,EACAK,GAOA,MAAM1Q,EAAMqQ,EAAUM,UAAUC,WAAUp9B,GACjCA,EAAEk9B,UAAYA,KAEvB7vC,EAAAA,EAAAA,IAAOm/B,GAAO,EAAG,gDACjB,MAAM6Q,EAAgBR,EAAUM,UAAU3Q,GAC1CqQ,EAAUM,UAAUpmB,OAAOyV,EAAK,GAEhC,IAAI8Q,EAAyBD,EAAchjB,QACvCkjB,GAAsC,EAEtC1vC,EAAIgvC,EAAUM,UAAUnyC,OAAS,EAErC,KAAOsyC,GAA0BzvC,GAAK,GAAG,CACvC,MAAM2vC,EAAeX,EAAUM,UAAUtvC,GACrC2vC,EAAanjB,UAEbxsB,GAAK2+B,GACLiR,GAA6BD,EAAcH,EAAcvlB,MAGzDwlB,GAAyB,EAChB9jB,GAAa6jB,EAAcvlB,KAAM0lB,EAAa1lB,QAEvDylB,GAAsC,IAG1C1vC,IAGF,GAAKyvC,EAEE,IAAIC,EAGT,OA2CJ,SAA6BV,GAC3BA,EAAUa,cAAgBC,GACxBd,EAAUM,UACVS,GACAhmB,MAEEilB,EAAUM,UAAUnyC,OAAS,EAC/B6xC,EAAUgB,YACRhB,EAAUM,UAAUN,EAAUM,UAAUnyC,OAAS,GAAGkyC,QAEtDL,EAAUgB,aAAe,CAE7B,CAxDIC,CAAoBjB,IACb,EAGP,GAAIQ,EAAc7O,KAChBqO,EAAUa,cAAgBtB,GACxBS,EAAUa,cACVL,EAAcvlB,UAEX,CAELlY,EADiBy9B,EAAcrP,UACfhH,IACd6V,EAAUa,cAAgBtB,GACxBS,EAAUa,cACVnlB,GAAU8kB,EAAcvlB,KAAMkP,GAC/B,IAGL,OAAO,EArBP,OAAO,CAuBX,CAEA,SAASyW,GACPM,EACAjmB,GAEA,GAAIimB,EAAYvP,KACd,OAAOhV,GAAaukB,EAAYjmB,KAAMA,GAEtC,IAAK,MAAMkP,KAAa+W,EAAY/P,SAClC,GACE+P,EAAY/P,SAASr8B,eAAeq1B,IACpCxN,GAAajB,GAAUwlB,EAAYjmB,KAAMkP,GAAYlP,GAErD,OAAO,EAGX,OAAO,CAEX,CAsBA,SAAS8lB,GAAwB3xB,GAC/B,OAAOA,EAAMoO,OACf,CAMA,SAASsjB,GACPK,EACArF,EACAsF,GAEA,IAAIpC,EAAgBJ,GAAcE,QAClC,IAAK,IAAI9tC,EAAI,EAAGA,EAAImwC,EAAOhzC,SAAU6C,EAAG,CACtC,MAAMoe,EAAQ+xB,EAAOnwC,GAIrB,GAAI8qC,EAAO1sB,GAAQ,CACjB,MAAMiyB,EAAYjyB,EAAM6L,KACxB,IAAIuiB,EACJ,GAAIpuB,EAAMuiB,KACJhV,GAAaykB,EAAUC,IACzB7D,EAAe1hB,GAAgBslB,EAAUC,GACzCrC,EAAgBD,GACdC,EACAxB,EACApuB,EAAMuiB,OAEChV,GAAa0kB,EAAWD,KACjC5D,EAAe1hB,GAAgBulB,EAAWD,GAC1CpC,EAAgBD,GACdC,EACAjkB,KACA3L,EAAMuiB,KAAKvH,SAASoT,SAKnB,KAAIpuB,EAAM+hB,SAgCf,MAAMxgC,EAAAA,EAAAA,IAAe,8CA/BrB,GAAIgsB,GAAaykB,EAAUC,GACzB7D,EAAe1hB,GAAgBslB,EAAUC,GACzCrC,EAAgBI,GACdJ,EACAxB,EACApuB,EAAM+hB,eAEH,GAAIxU,GAAa0kB,EAAWD,GAEjC,GADA5D,EAAe1hB,GAAgBulB,EAAWD,GACtCvlB,GAAY2hB,GACdwB,EAAgBI,GACdJ,EACAjkB,KACA3L,EAAM+hB,cAEH,CACL,MAAMhC,GAAQtzB,EAAAA,EAAAA,IAAQuT,EAAM+hB,SAAUnW,GAAawiB,IACnD,GAAIrO,EAAO,CAET,MAAMmS,EAAWnS,EAAM/E,SAASjP,GAAaqiB,IAC7CwB,EAAgBD,GACdC,EACAjkB,KACAumB,OAYd,OAAOtC,CACT,CAqBM,SAAUuC,GACdvB,EACAwB,EACAC,EACAC,EACAC,GAEA,GAAKD,GAAsBC,EAyBpB,CACL,MAAM7oB,EAAQ6mB,GACZK,EAAUa,cACVW,GAEF,IAAKG,GAAuB9B,GAAqB/mB,GAC/C,OAAO2oB,EAGP,GACGE,GACsB,MAAvBF,GACCjC,GAA8B1mB,EAAOiC,MAGjC,CACL,MAAM+gB,EAAS,SAAU1sB,GACvB,OACGA,EAAMoO,SAAWmkB,MAChBD,KACEA,EAAkB55B,QAAQsH,EAAMixB,YACnC1jB,GAAavN,EAAM6L,KAAMumB,IACxB7kB,GAAa6kB,EAAUpyB,EAAM6L,MAEnC,EAOA,OAAO6kB,GANagB,GAClBd,EAAUM,UACVxE,EACA0F,GAEmBC,GAAuBzS,GAAajI,YAhBzD,OAAO,KAvCmC,CAC9C,MAAM6Y,EAAgBH,GACpBO,EAAUa,cACVW,GAEF,GAAqB,MAAjB5B,EACF,OAAOA,EACF,CACL,MAAMgC,EAAWjC,GACfK,EAAUa,cACVW,GAEF,GAAI3B,GAAqB+B,GACvB,OAAOH,EACF,GACkB,MAAvBA,GACCjC,GAA8BoC,EAAU7mB,MAIpC,CAEL,OAAO+kB,GAAmB8B,EADLH,GAAuBzS,GAAajI,YAFzD,OAAO,MAyCf,CAgQM,SAAU8a,GACdC,EACAL,EACAC,EACAC,GAEA,OAAOJ,GACLO,EAAa9B,UACb8B,EAAaN,SACbC,EACAC,EACAC,EAEJ,CAOgB,SAAAI,GACdD,EACAE,GAEA,gBAjRAhC,EACAwB,EACAQ,GAEA,IAAIC,EAAmBjT,GAAajI,WACpC,MAAMmb,EAAczC,GAClBO,EAAUa,cACVW,GAEF,GAAIU,EAUF,OATKA,EAAY3Y,cAEf2Y,EAAYrX,aAAae,IAAgB,CAACzB,EAAWmL,KACnD2M,EAAmBA,EAAiBzX,qBAClCL,EACAmL,EACD,IAGE2M,EACF,GAAID,EAAwB,CAGjC,MAAMlpB,EAAQ6mB,GACZK,EAAUa,cACVW,GAsBF,OApBAQ,EAAuBnX,aACrBe,IACA,CAACzB,EAAWI,KACV,MAAMzF,EAAOgb,GACXH,GAAgC7mB,EAAO,IAAI2B,GAAK0P,IAChDI,GAEF0X,EAAmBA,EAAiBzX,qBAClCL,EACArF,EACD,IAIL4a,GAAiC5mB,GAAO3b,SAAQ0vB,IAC9CoV,EAAmBA,EAAiBzX,qBAClCqC,EAAUr+B,KACVq+B,EAAU/H,KACX,IAEImd,EAcP,OANAvC,GAJcC,GACZK,EAAUa,cACVW,IAEsCrkC,SAAQ0vB,IAC9CoV,EAAmBA,EAAiBzX,qBAClCqC,EAAUr+B,KACVq+B,EAAU/H,KACX,IAEImd,CAEX,CAkNSE,CACLL,EAAa9B,UACb8B,EAAaN,SACbQ,EAEJ,CAkBM,SAAUI,GACdN,EACA7mB,EACAonB,EACAC,GAEA,OA/NI,SACJtC,EACAwB,EACAlE,EACA+E,EACAC,IAEA9xC,EAAAA,EAAAA,IACE6xC,GAAqBC,EACrB,6DAEF,MAAMrnB,EAAOS,GAAU8lB,EAAUlE,GACjC,GAAIkC,GAA8BQ,EAAUa,cAAe5lB,GAGzD,OAAO,KACF,CAEL,MAAMsnB,EAAa5C,GACjBK,EAAUa,cACV5lB,GAEF,OAAI4kB,GAAqB0C,GAEhBD,EAAmBlY,SAASkT,GAQ5BwC,GACLyC,EACAD,EAAmBlY,SAASkT,IAIpC,CAyLSkF,CACLV,EAAa9B,UACb8B,EAAaN,SACbvmB,EACAonB,EACAC,EAEJ,CAQgB,SAAAG,GACdX,EACA7mB,GAEA,OApKc,SACd+kB,EACA/kB,GAEA,OAAOwkB,GAA6BO,EAAUa,cAAe5lB,EAC/D,CA+JSynB,CACLZ,EAAa9B,UACbtkB,GAAUomB,EAAaN,SAAUvmB,GAErC,CAMgB,SAAA0nB,GACdb,EACAc,EACAzS,EACAlJ,EACAnjB,EACAsc,GAEA,OA3Kc,SACd4f,EACAwB,EACAoB,EACAzS,EACAlJ,EACAnjB,EACAsc,GAEA,IAAIyiB,EACJ,MAAM/pB,EAAQ6mB,GACZK,EAAUa,cACVW,GAEI5B,EAAgBH,GAA6B3mB,EAAOiC,MAC1D,GAAqB,MAAjB6kB,EACFiD,EAAYjD,MACP,IAA0B,MAAtBgD,EAIT,MAAO,GAHPC,EAAY/C,GAAmBhnB,EAAO8pB,GAMxC,GADAC,EAAYA,EAAUpX,UAAUrL,GAC3ByiB,EAAU/mC,WAAc+mC,EAAUtZ,aAerC,MAAO,GAf4C,CACnD,MAAMuZ,EAAQ,GACRtmB,EAAM4D,EAAM6E,aACZoJ,EAAOvqB,EACR++B,EAA2B/Z,uBAAuBqH,EAAW/P,GAC7DyiB,EAA2Bha,gBAAgBsH,EAAW/P,GAC3D,IAAImO,EAAOF,EAAK9H,UAChB,KAAOgI,GAAQuU,EAAM30C,OAAS84B,GACC,IAAzBzK,EAAI+R,EAAM4B,IACZ2S,EAAMh0C,KAAKy/B,GAEbA,EAAOF,EAAK9H,UAEd,OAAOuc,EAIX,CAkISC,CACLjB,EAAa9B,UACb8B,EAAaN,SACboB,EACAzS,EACAlJ,EACAnjB,EACAsc,EAEJ,UAMgB4iB,GACdlB,EACAzM,EACA4N,GAEA,OA5OI,SACJjD,EACAwB,EACAnM,EACAiN,GAEA,MAAMrnB,EAAOS,GAAU8lB,EAAUnM,GAC3BuK,EAAgBH,GACpBO,EAAUa,cACV5lB,GAEF,GAAqB,MAAjB2kB,EACF,OAAOA,EAEP,GAAI0C,EAAmBlH,mBAAmB/F,GAKxC,OAAOyK,GAJYH,GACjBK,EAAUa,cACV5lB,GAIAqnB,EAAmBnK,UAAUjO,kBAAkBmL,IAGjD,OAAO,IAGb,CAiNS6N,CACLpB,EAAa9B,UACb8B,EAAaN,SACbnM,EACA4N,EAEJ,CAKgB,SAAAE,GACdrB,EACA3X,GAEA,OAAOgW,GACLzkB,GAAUomB,EAAaN,SAAUrX,GACjC2X,EAAa9B,UAEjB,CAEgB,SAAAG,GACdllB,EACA+kB,GAEA,MAAO,CACLwB,SAAUvmB,EACV+kB,YAEJ,OCvxBaoD,GAAb10C,WAAAA,GACmB,KAAA20C,UAAiC,IAAIjlB,IAEtDwU,gBAAAA,CAAiBmJ,GACf,MAAMtjC,EAAOsjC,EAAOtjC,KACd48B,EAAW0G,EAAO5R,WACxB35B,EAAAA,EAAAA,IACiC,gBAA/BiI,GACmC,kBAAjCA,GACiC,kBAAjCA,EACF,8CAEFjI,EAAAA,EAAAA,IACe,cAAb6kC,EACA,mDAEF,MAAMiO,EAAYv0C,KAAKs0C,UAAUvjC,IAAIu1B,GACrC,GAAIiO,EAAW,CACb,MAAMC,EAAUD,EAAU7qC,KAC1B,GACiC,gBAA/BA,GACY,kBAAZ8qC,EAEAx0C,KAAKs0C,UAAU3jC,IACb21B,EACAjD,GACEiD,EACA0G,EAAO9J,aACPqR,EAAUrR,oBAGT,GAC4B,kBAAjCx5B,GACY,gBAAZ8qC,EAEAx0C,KAAKs0C,UAAU1yB,OAAO0kB,QACjB,GAC4B,kBAAjC58B,GACY,kBAAZ8qC,EAEAx0C,KAAKs0C,UAAU3jC,IACb21B,EACAlD,GAAmBkD,EAAUiO,EAAUjR,eAEpC,GAC4B,kBAAjC55B,GACY,gBAAZ8qC,EAEAx0C,KAAKs0C,UAAU3jC,IACb21B,EACAnD,GAAiBmD,EAAU0G,EAAO9J,mBAE/B,IAC4B,kBAAjCx5B,GACY,kBAAZ8qC,EAOA,MAAM5yC,EAAAA,EAAAA,IACJ,mCACEorC,EACA,mBACAuH,GATJv0C,KAAKs0C,UAAU3jC,IACb21B,EACAjD,GAAmBiD,EAAU0G,EAAO9J,aAAcqR,EAAUjR,gBAWhEtjC,KAAKs0C,UAAU3jC,IAAI21B,EAAU0G,GAIjCyH,UAAAA,GACE,OAAOn1C,MAAMo1C,KAAK10C,KAAKs0C,UAAU1e,WCnC9B,MAAM+e,GAA2B,UAftCC,gBAAAA,CAAiBtO,GACf,OAAO,KAETS,kBAAAA,CACE1V,EACA+O,EACArrB,GAEA,OAAO,aAaE8/B,GACXl1C,WAAAA,CACUm1C,EACAC,GAC2C,IAA3CC,EAAA71C,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAuC,KAFvC,KAAO21C,QAAPA,EACA,KAAUC,WAAVA,EACA,KAAuBC,wBAAvBA,EAEVJ,gBAAAA,CAAiBtO,GACf,MAAMvQ,EAAO/1B,KAAK+0C,WAAWlI,WAC7B,GAAI9W,EAAKsW,mBAAmB/F,GAC1B,OAAOvQ,EAAKqT,UAAUjO,kBAAkBmL,GACnC,CACL,MAAM2O,EAC4B,MAAhCj1C,KAAKg1C,wBACD,IAAIlJ,GAAU9rC,KAAKg1C,yBAAyB,GAAM,GAClDh1C,KAAK+0C,WAAWpH,YACtB,OAAOsG,GAA8Bj0C,KAAK80C,QAASxO,EAAU2O,IAGjElO,kBAAAA,CACE1V,EACA+O,EACArrB,GAEA,MAAM8+B,EAC4B,MAAhC7zC,KAAKg1C,wBACDh1C,KAAKg1C,wBACL7G,GAA+BnuC,KAAK+0C,YACpChB,EAAQH,GACZ5zC,KAAK80C,QACLjB,EACAzT,EACA,EACArrB,EACAsc,GAEF,OAAqB,IAAjB0iB,EAAM30C,OACD,KAEA20C,EAAM,ICpBb,SAAUmB,GACdC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAc,IAAInB,GACxB,IAAI3G,EAAc+H,EAClB,GAAIJ,EAAU3rC,OAASmhC,GAAcc,UAAW,CAC9C,MAAM+J,EAAYL,EACdK,EAAU/vC,OAAOolC,SACnB2C,EAAeiI,GACbR,EACAC,EACAM,EAAUxpB,KACVwpB,EAAU9S,KACV0S,EACAC,EACAC,KAGF/zC,EAAAA,EAAAA,IAAOi0C,EAAU/vC,OAAOqlC,WAAY,mBAIpCyK,EACEC,EAAU/vC,OAAOslC,QAChBmK,EAAazH,YAAYxB,eAAiBrf,GAAY4oB,EAAUxpB,MACnEwhB,EAAekI,GACbT,EACAC,EACAM,EAAUxpB,KACVwpB,EAAU9S,KACV0S,EACAC,EACAE,EACAD,SAGC,GAAIH,EAAU3rC,OAASmhC,GAAcgB,MAAO,CACjD,MAAM9hB,EAAQsrB,EACVtrB,EAAMpkB,OAAOolC,SACf2C,EAqYN,SACEyH,EACAtH,EACA3hB,EACA2pB,EACAP,EACA3H,EACA6H,GAQA,IAAIM,EAAejI,EA+BnB,OA9BAgI,EAAgBnG,SAAQ,CAACjB,EAAcjT,KACrC,MAAM8W,EAAY3lB,GAAUT,EAAMuiB,GAC9BsH,GAA2BlI,EAAW5hB,GAAaqmB,MACrDwD,EAAeH,GACbR,EACAW,EACAxD,EACA9W,EACA8Z,EACA3H,EACA6H,OAKNK,EAAgBnG,SAAQ,CAACjB,EAAcjT,KACrC,MAAM8W,EAAY3lB,GAAUT,EAAMuiB,GAC7BsH,GAA2BlI,EAAW5hB,GAAaqmB,MACtDwD,EAAeH,GACbR,EACAW,EACAxD,EACA9W,EACA8Z,EACA3H,EACA6H,OAKCM,CACT,CApbqBE,CACbb,EACAC,EACArrB,EAAMmC,KACNnC,EAAMqY,SACNkT,EACAC,EACAC,KAGF/zC,EAAAA,EAAAA,IAAOsoB,EAAMpkB,OAAOqlC,WAAY,mBAEhCyK,EACE1rB,EAAMpkB,OAAOslC,QAAUmK,EAAazH,YAAYxB,aAClDuB,EAAeuI,GACbd,EACAC,EACArrB,EAAMmC,KACNnC,EAAMqY,SACNkT,EACAC,EACAE,EACAD,SAGC,GAAIH,EAAU3rC,OAASmhC,GAAcQ,eAAgB,CAC1D,MAAM6K,EAAeb,EAYnB3H,EAXGwI,EAAa9K,OAqmBtB,SACE+J,EACAtH,EACA3hB,EACAopB,EACA5C,EACA8C,GAEA,IAAIzH,EACJ,GAAqD,MAAjD2F,GAA2B4B,EAAappB,GAC1C,OAAO2hB,EACF,CACL,MAAMloC,EAAS,IAAIkvC,GACjBS,EACAzH,EACA6E,GAEIjM,EAAgBoH,EAAUhB,WAAWzD,UAC3C,IAAInC,EACJ,GAAIna,GAAYZ,IAAgC,cAAvBD,GAAaC,GAAuB,CAC3D,IAAIoK,EACJ,GAAIuX,EAAUF,YAAYzB,qBACxB5V,EAAUwc,GACRwC,EACAnH,GAA+BN,QAE5B,CACL,MAAMsI,EAAiBtI,EAAUF,YAAYvE,WAC7C3nC,EAAAA,EAAAA,IACE00C,aAA0BlW,GAC1B,iDAEF3J,EAAU0c,GACRsC,EACAa,GAIJlP,EAAgBkO,EAAcpI,OAAOjJ,eACnC2C,EACAnQ,EACAkf,OAEG,CACL,MAAMlP,EAAWra,GAAaC,GAC9B,IAAIuX,EAAWwQ,GACbqB,EACAhP,EACAuH,EAAUF,aAGE,MAAZlK,GACAoK,EAAUF,YAAYtB,mBAAmB/F,KAEzC7C,EAAWgD,EAActL,kBAAkBmL,IAG3CW,EADc,MAAZxD,EACc0R,EAAcpI,OAAOpR,YACnC8K,EACAH,EACA7C,EACArX,GAAaF,GACbvmB,EACA6vC,GAEO3H,EAAUhB,WAAWzD,UAAU9N,SAASgL,GAEjC6O,EAAcpI,OAAOpR,YACnC8K,EACAH,EACArG,GAAajI,WACb5L,GAAaF,GACbvmB,EACA6vC,GAGc/O,EAGhBQ,EAAcl6B,WACd8gC,EAAUF,YAAYzB,uBAGtB6B,EAAW+E,GACTwC,EACAnH,GAA+BN,IAE7BE,EAASvT,eACXyM,EAAgBkO,EAAcpI,OAAOjJ,eACnCmD,EACA8G,EACAyH,KAQR,OAHAzH,EACEF,EAAUF,YAAYzB,sBACqC,MAA3DwH,GAA2B4B,EAAatpB,MACnC4hB,GACLC,EACA5G,EACA8G,EACAoH,EAAcpI,OAAO/I,gBAG3B,CApsBqBoS,CACbjB,EACAC,EACAc,EAAahqB,KACbopB,EACAC,EACAC,GA4eR,SACEL,EACAtH,EACAwI,EACAlL,EACAmK,EACAC,EACAC,GAEA,GAAwD,MAApD9B,GAA2B4B,EAAae,GAC1C,OAAOxI,EAIT,MAAM4H,EAAmB5H,EAAUF,YAAYxB,aAIzCwB,EAAcE,EAAUF,YAC9B,GAA0B,MAAtBxC,EAAa5lC,MAAe,CAE9B,GACGunB,GAAYupB,IAAY1I,EAAYzB,sBACrCyB,EAAYvB,kBAAkBiK,GAE9B,OAAOT,GACLT,EACAtH,EACAwI,EACA1I,EAAYvE,UAAU/N,SAASgb,GAC/Bf,EACAC,EACAE,EACAD,GAEG,GAAI1oB,GAAYupB,GAAU,CAG/B,IAAIR,EAAkB,IAAIxH,GAAoB,MAI9C,OAHAV,EAAYvE,UAAUtN,aAAa7E,IAAW,CAACx3B,EAAMs2B,KACnD8f,EAAkBA,EAAgBllC,IAAI,IAAI+a,GAAKjsB,GAAOs2B,EAAK,IAEtDkgB,GACLd,EACAtH,EACAwI,EACAR,EACAP,EACAC,EACAE,EACAD,GAGF,OAAO3H,EAEJ,CAEL,IAAIgI,EAAkB,IAAIxH,GAAoB,MAU9C,OATAlD,EAAauE,SAAQ,CAAC4G,EAAW/wC,KAC/B,MAAMgxC,EAAkB5pB,GAAU0pB,EAASC,GACvC3I,EAAYvB,kBAAkBmK,KAChCV,EAAkBA,EAAgBllC,IAChC2lC,EACA3I,EAAYvE,UAAU/N,SAASkb,QAI9BN,GACLd,EACAtH,EACAwI,EACAR,EACAP,EACAC,EACAE,EACAD,GAGN,CA1kBqBgB,CACbrB,EACAC,EACAc,EAAahqB,KACbgqB,EAAa/K,aACbmK,EACAC,EACAC,OAYC,IAAIH,EAAU3rC,OAASmhC,GAAcY,gBAS1C,MAAM7pC,EAAAA,EAAAA,IAAe,2BAA6ByzC,EAAU3rC,MAR5DgkC,EAwjBJ,SACEyH,EACAtH,EACA3hB,EACAopB,EACAE,GAEA,MAAMiB,EAAgB5I,EAAUF,YAC1BD,EAAeM,GACnBH,EACA4I,EAAcrN,UACdqN,EAAcvK,sBAAwBpf,GAAYZ,GAClDuqB,EAActK,cAEhB,OAAOuK,GACLvB,EACAzH,EACAxhB,EACAopB,EACAX,GACAa,EAEJ,CA9kBmBmB,CACbxB,EACAC,EACAC,EAAUnpB,KACVopB,EACAE,GAKJ,MAAM7I,EAAU6I,EAAYf,aAE5B,OAGF,SACEW,EACA1H,EACA8H,GAEA,MAAM1H,EAAYJ,EAAab,WAC/B,GAAIiB,EAAU5B,qBAAsB,CAClC,MAAM0K,EACJ9I,EAAU1E,UAAU5O,cAAgBsT,EAAU1E,UAAUr8B,UACpD8pC,EAAkB3I,GAA8BkH,IAEpDI,EAAYp2C,OAAS,IACpBg2C,EAAavI,WAAWX,sBACxB0K,IAAkB9I,EAAU1E,UAAUxM,OAAOia,KAC7C/I,EAAU1E,UAAU3O,cAAcmC,OAAOia,EAAgBpc,iBAE1D+a,EAAYz1C,KACVkjC,GAAYiL,GAA8BR,KAIlD,CAzBEoJ,CAAgC1B,EAAc1H,EAAcf,GACrD,CAAEkB,UAAWH,EAAcf,UACpC,CAyBA,SAAS+J,GACPvB,EACAtH,EACAkJ,EACAzB,EACA3vC,EACA6vC,GAEA,MAAMwB,EAAenJ,EAAUhB,WAC/B,GAA2D,MAAvD6G,GAA2B4B,EAAayB,GAE1C,OAAOlJ,EACF,CACL,IAAI5G,EAAegO,EACnB,GAAInoB,GAAYiqB,GAMd,IAJAt1C,EAAAA,EAAAA,IACEosC,EAAUF,YAAYzB,qBACtB,8DAEE2B,EAAUF,YAAYxB,aAAc,CAItC,MAAMwB,EAAcQ,GAA+BN,GAK7CoJ,EAAwBjE,GAC5BsC,EAJA3H,aAAuB1N,GACnB0N,EACA1N,GAAajI,YAKnBiP,EAAgBkO,EAAcpI,OAAOjJ,eACnC+J,EAAUhB,WAAWzD,UACrB6N,EACAzB,OAEG,CACL,MAAM0B,EAAepE,GACnBwC,EACAnH,GAA+BN,IAEjC5G,EAAgBkO,EAAcpI,OAAOjJ,eACnC+J,EAAUhB,WAAWzD,UACrB8N,EACA1B,OAGC,CACL,MAAMlP,EAAWra,GAAa8qB,GAC9B,GAAiB,cAAbzQ,EAA0B,EAC5B7kC,EAAAA,EAAAA,IACgC,IAA9B0qB,GAAc4qB,GACd,yDAEF,MAAMI,EAAeH,EAAa5N,UAClC6L,EAAapH,EAAUF,YAAYvE,UAEnC,MAAMgO,EAAkB/D,GACtBiC,EACAyB,EACAI,EACAlC,GAGAhO,EADqB,MAAnBmQ,EACcjC,EAAcpI,OAAO9R,eACnCkc,EACAC,GAIcJ,EAAa5N,cAE1B,CACL,MAAMiO,EAAkBjrB,GAAa2qB,GAErC,IAAIO,EACJ,GAAIN,EAAa3K,mBAAmB/F,GAAW,CAC7C2O,EAAapH,EAAUF,YAAYvE,UACnC,MAAMmO,EACJlE,GACEiC,EACAyB,EACAC,EAAa5N,UACb6L,GAGFqC,EADsB,MAApBC,EACcP,EACb5N,UACAjO,kBAAkBmL,GAClB3K,YAAY0b,EAAiBE,GAGhBP,EAAa5N,UAAUjO,kBAAkBmL,QAG3DgR,EAAgBrD,GACdqB,EACAhP,EACAuH,EAAUF,aAIZ1G,EADmB,MAAjBqQ,EACcnC,EAAcpI,OAAOpR,YACnCqb,EAAa5N,UACb9C,EACAgR,EACAD,EACA1xC,EACA6vC,GAIcwB,EAAa5N,WAInC,OAAOwE,GACLC,EACA5G,EACA+P,EAAa9K,sBAAwBpf,GAAYiqB,GACjD5B,EAAcpI,OAAO/I,gBAG3B,CAEA,SAAS4R,GACPT,EACAC,EACA2B,EACAS,EACAlC,EACAC,EACAE,EACAD,GAEA,MAAMiC,EAAgBrC,EAAazH,YACnC,IAAI+J,EACJ,MAAMC,EAAelC,EACjBN,EAAcpI,OACdoI,EAAcpI,OAAO9I,mBACzB,GAAInX,GAAYiqB,GACdW,EAAiBC,EAAa7T,eAC5B2T,EAAcrO,UACdoO,EACA,WAEG,GAAIG,EAAa3T,iBAAmByT,EAActL,aAAc,CAErE,MAAMyL,EAAgBH,EACnBrO,UACAzN,YAAYob,EAAYS,GAC3BE,EAAiBC,EAAa7T,eAC5B2T,EAAcrO,UACdwO,EACA,UAEG,CACL,MAAMtR,EAAWra,GAAa8qB,GAC9B,IACGU,EAAcrL,kBAAkB2K,IACjC5qB,GAAc4qB,GAAc,EAG5B,OAAO3B,EAET,MAAMiC,EAAkBjrB,GAAa2qB,GAE/Brb,EADY+b,EAAcrO,UAAUjO,kBAAkBmL,GAC7B3K,YAAY0b,EAAiBG,GAE1DE,EADe,cAAbpR,EACeqR,EAAa1c,eAC5Bwc,EAAcrO,UACd1N,GAGeic,EAAahc,YAC5B8b,EAAcrO,UACd9C,EACA5K,EACA2b,EACA1C,GACA,MAIN,MAAMjH,EAAeM,GACnBoH,EACAsC,EACAD,EAAcvL,sBAAwBpf,GAAYiqB,GAClDY,EAAa3T,gBAOf,OAAO0S,GACLvB,EACAzH,EACAqJ,EACAzB,EATa,IAAIT,GACjBS,EACA5H,EACA6H,GAQAC,EAEJ,CAEA,SAASG,GACPR,EACAC,EACA2B,EACAS,EACAlC,EACAC,EACAC,GAEA,MAAMwB,EAAe5B,EAAavI,WAClC,IAAIa,EAAczG,EAClB,MAAMthC,EAAS,IAAIkvC,GACjBS,EACAF,EACAG,GAEF,GAAIzoB,GAAYiqB,GACd9P,EAAgBkO,EAAcpI,OAAOjJ,eACnCsR,EAAavI,WAAWzD,UACxBoO,EACAhC,GAEF9H,EAAeE,GACbwH,EACAnO,GACA,EACAkO,EAAcpI,OAAO/I,oBAElB,CACL,MAAMsC,EAAWra,GAAa8qB,GAC9B,GAAiB,cAAbzQ,EACFW,EAAgBkO,EAAcpI,OAAO9R,eACnCma,EAAavI,WAAWzD,UACxBoO,GAEF9J,EAAeE,GACbwH,EACAnO,EACA+P,EAAa9K,qBACb8K,EAAa7K,kBAEV,CACL,MAAMkL,EAAkBjrB,GAAa2qB,GAC/BnT,EAAWoT,EAAa5N,UAAUjO,kBAAkBmL,GAC1D,IAAI7C,EACJ,GAAI3W,GAAYuqB,GAEd5T,EAAW+T,MACN,CACL,MAAMhc,EAAY71B,EAAOivC,iBAAiBtO,GAQtC7C,EAPa,MAAbjI,EAEiC,cAAjCnP,GAAYgrB,IACZ7b,EAAUH,SAAS5O,GAAW4qB,IAAkBtqC,UAIrCyuB,EAEAA,EAAUG,YAAY0b,EAAiBG,GAIzCvX,GAAajI,WAG5B,GAAK4L,EAAShH,OAAO6G,GAgBnBiK,EAAe0H,MAhBe,CAS9B1H,EAAeE,GACbwH,EATmBD,EAAcpI,OAAOpR,YACxCqb,EAAa5N,UACb9C,EACA7C,EACA4T,EACA1xC,EACA6vC,GAKAwB,EAAa9K,qBACbiJ,EAAcpI,OAAO/I,kBAO7B,OAAO0J,CACT,CAEA,SAASqI,GACPlI,EACAvH,GAEA,OAAOuH,EAAUhB,WAAWR,mBAAmB/F,EACjD,CAmDA,SAASuR,GACP1C,EACApf,EACAhM,GAKA,OAHAA,EAAM2lB,SAAQ,CAACjB,EAAcjT,KAC3BzF,EAAOA,EAAK4F,YAAY8S,EAAcjT,EAAU,IAE3CzF,CACT,CAEA,SAASkgB,GACPd,EACAtH,EACA3hB,EACA2pB,EACAP,EACA3H,EACA8H,EACAD,GAIA,GACE3H,EAAUF,YAAYvE,UAAUr8B,YAC/B8gC,EAAUF,YAAYzB,qBAEvB,OAAO2B,EAST,IACIiK,EADAhC,EAAejI,EAGjBiK,EADEhrB,GAAYZ,GACE2pB,EAEA,IAAIxH,GAAoB,MAAMS,QAC5C5iB,EACA2pB,GAGJ,MAAMZ,EAAapH,EAAUF,YAAYvE,UAiDzC,OAhDA0O,EAAc1V,SAASjK,kBAAiB,CAACmO,EAAUlI,KACjD,GAAI6W,EAAW3Z,SAASgL,GAAW,CACjC,MAGM7C,EAAWoU,GACf1C,EAJkBtH,EAAUF,YAC3BvE,UACAjO,kBAAkBmL,GAInBlI,GAEF0X,EAAeF,GACbT,EACAW,EACA,IAAIpqB,GAAK4a,GACT7C,EACA6R,EACA3H,EACA8H,EACAD,OAINsC,EAAc1V,SAASjK,kBAAiB,CAACmO,EAAUyR,KACjD,MAAMC,GACHnK,EAAUF,YAAYtB,mBAAmB/F,IACjB,OAAzByR,EAAexyC,MACjB,IAAK0vC,EAAW3Z,SAASgL,KAAc0R,EAAoB,CACzD,MAGMvU,EAAWoU,GACf1C,EAJkBtH,EAAUF,YAC3BvE,UACAjO,kBAAkBmL,GAInByR,GAEFjC,EAAeF,GACbT,EACAW,EACA,IAAIpqB,GAAK4a,GACT7C,EACA6R,EACA3H,EACA8H,EACAD,OAKCM,CACT,OCjmBamC,GAMXt4C,WAAAA,CAAoB4sC,EAAsB2L,GAAtB,KAAM3L,OAANA,EAHpB,KAAmB4L,oBAAwB,GAIzC,MAAMjqC,EAASlO,KAAKusC,OAAO1a,aAErBumB,EAAc,IAAI7U,GAAcr1B,EAAOukB,YACvCsa,GpBuI+B/E,EoBvIG95B,GpBwI1B6jB,eACP,IAAIwR,GAAcyE,EAAYvV,YAC5BuV,EAAYH,WACd,IAAInC,GAAcsC,GAElB,IAAI9D,GAAa8D,GANtB,IAAmCA,EoBrIrChoC,KAAKq4C,WDEH,SAA2BtL,GAC/B,MAAO,CAAEA,SACX,CCJsBuL,CAAiBvL,GAEnC,MAAMwL,EAAqBL,EAAiBvK,YACtC6K,EAAoBN,EAAiBrL,WAGrCoB,EAAamK,EAAYtU,eAC7B7D,GAAajI,WACbugB,EAAmBnP,UACnB,MAEI0E,EAAYf,EAAOjJ,eACvB7D,GAAajI,WACbwgB,EAAkBpP,UAClB,MAEIsO,EAAiB,IAAI5L,GACzBmC,EACAsK,EAAmBrM,qBACnBkM,EAAYpU,gBAERiD,EAAgB,IAAI6E,GACxBgC,EACA0K,EAAkBtM,qBAClBa,EAAO/I,gBAGThkC,KAAK+0C,WAAarH,GAAazG,EAAeyQ,GAC9C13C,KAAKy4C,gBAAkB,IAAInM,GAAetsC,KAAKusC,QAGjD,SAAIjzB,GACF,OAAOtZ,KAAKusC,QAYA,SAAAmM,GACdC,EACAzsB,GAEA,MAAM0sB,EAAQzK,GAA+BwK,EAAK5D,YAClD,OAAI6D,IAIAD,EAAKr/B,MAAMuY,aAAaE,iBACtBjF,GAAYZ,KACX0sB,EAAMzd,kBAAkBlP,GAAaC,IAAOnf,WAExC6rC,EAAMvd,SAASnP,GAGnB,IACT,CAEM,SAAU2sB,GAAYF,GAC1B,OAA2C,IAApCA,EAAKR,oBAAoB/4C,MAClC,UAcgB05C,GACdH,EACAI,EACAC,GAEA,MAAMC,EAA8B,GACpC,GAAID,EAAa,EACfv3C,EAAAA,EAAAA,IACuB,MAArBs3C,EACA,mDAEF,MAAM7sB,EAAOysB,EAAKr/B,MAAM4X,MACxBynB,EAAKR,oBAAoB/pC,SAAQm/B,IAC/B,MAAM2L,EAAa3L,EAAa4L,kBAAkBH,EAAa9sB,GAC3DgtB,GACFD,EAAal5C,KAAKm5C,MAKxB,GAAIH,EAAmB,CACrB,IAAIK,EAAY,GAChB,IAAK,IAAIn3C,EAAI,EAAGA,EAAI02C,EAAKR,oBAAoB/4C,SAAU6C,EAAG,CACxD,MAAMo3C,EAAWV,EAAKR,oBAAoBl2C,GAC1C,GAAKo3C,EAASvU,QAAQiU,IAEf,GAAIA,EAAkBO,iBAAkB,CAE7CF,EAAYA,EAAUG,OAAOZ,EAAKR,oBAAoB3rB,MAAMvqB,EAAI,IAChE,YAJAm3C,EAAUr5C,KAAKs5C,GAOnBV,EAAKR,oBAAsBiB,OAE3BT,EAAKR,oBAAsB,GAE7B,OAAOc,CACT,CAKM,SAAUO,GACdb,EACAtD,EACAC,EACA5C,GAGE2C,EAAU3rC,OAASmhC,GAAcgB,OACJ,OAA7BwJ,EAAU1vC,OAAO+rB,WAEjBjwB,EAAAA,EAAAA,IACE0sC,GAA+BwK,EAAK5D,YACpC,8DAEFtzC,EAAAA,EAAAA,IACEysC,GAA8ByK,EAAK5D,YACnC,4DAIJ,MAAMK,EAAeuD,EAAK5D,WACpBtqC,EAASyqC,GACbyD,EAAKN,WACLjD,EACAC,EACAC,EACA5C,GD7IY,IACdyC,EACAtH,ECuJA,ODxJAsH,EC8I2BwD,EAAKN,WD7IhCxK,EC6I4CpjC,EAAOojC,WD3InDpsC,EAAAA,EAAAA,IACEosC,EAAUhB,WAAWzD,UAAUzM,UAAUwY,EAAcpI,OAAOta,YAC9D,2BAEFhxB,EAAAA,EAAAA,IACEosC,EAAUF,YAAYvE,UAAUzM,UAAUwY,EAAcpI,OAAOta,YAC/D,4BCuIFhxB,EAAAA,EAAAA,IACEgJ,EAAOojC,UAAUF,YAAYzB,uBAC1BkJ,EAAazH,YAAYzB,qBAC5B,2DAGFyM,EAAK5D,WAAatqC,EAAOojC,UAElB4L,GACLd,EACAluC,EAAOkiC,QACPliC,EAAOojC,UAAUhB,WAAWzD,UAC5B,KAEJ,CAyBA,SAASqQ,GACPd,EACAhM,EACAE,EACAkM,GAEA,MAAMnM,EAAgBmM,EAClB,CAACA,GACDJ,EAAKR,oBACT,OR5NI,SACJ1L,EACAE,EACAE,EACA6M,GAEA,MAAMhN,EAAkB,GAClBiN,EAAkB,GAuDxB,OArDAhN,EAAQv+B,SAAQ4+B,IhBkBF,IACd5R,EgBjB4C,kBAAxC4R,EAAOtjC,MACP+iC,EAAejJ,OAAOpN,oBACpB4W,EAAO1J,QACP0J,EAAO9J,eAGTyW,EAAM55C,MhBWVq7B,EgBXgC4R,EAAO5R,UhBchC,CAAE1xB,KAA4B,cAAEw5B,agBdW8J,EAAO9J,ahBcJ9H,kBgBVrDoR,GACEC,EACAC,EAAM,gBAENC,EACA+M,EACA7M,GAEFL,GACEC,EACAC,EAAM,cAENC,EACA+M,EACA7M,GAEFL,GACEC,EACAC,EAAM,cAENiN,EACAD,EACA7M,GAEFL,GACEC,EACAC,EAAM,gBAENC,EACA+M,EACA7M,GAEFL,GACEC,EACAC,EAAM,QAENC,EACA+M,EACA7M,GAGKH,CACT,CQ6JSkN,CACLjB,EAAKF,gBACL9L,EACAE,EACAD,EAEJ,CCvOA,IAAIiN,GC6BAC,SDjBSC,GAAbp6C,WAAAA,GAOW,KAAAq6C,MAA2B,IAAI3qB,KAsBpC,SAAU4qB,GACdC,EACA7E,EACAC,EACA6E,GAEA,MAAMzoB,EAAU2jB,EAAU1vC,OAAO+rB,QACjC,GAAgB,OAAZA,EAAkB,CACpB,MAAMinB,EAAOuB,EAAUF,MAAMjpC,IAAI2gB,GAEjC,OADAjwB,EAAAA,EAAAA,IAAe,MAARk3C,EAAc,gDACda,GACLb,EACAtD,EACAC,EACA6E,GAEG,CACL,IAAIzN,EAAkB,GAEtB,IAAK,MAAMiM,KAAQuB,EAAUF,MAAMpkB,SACjC8W,EAASA,EAAO6M,OACdC,GAAmBb,EAAMtD,EAAWC,EAAa6E,IAIrD,OAAOzN,EAEX,CAWM,SAAU0N,GACdF,EACA5gC,EACAg8B,EACA3H,EACA0M,GAEA,MAAM3oB,EAAUpY,EAAMqY,iBAChBgnB,EAAOuB,EAAUF,MAAMjpC,IAAI2gB,GACjC,IAAKinB,EAAM,CAET,IAAI9L,EAAaiG,GACfwC,EACA+E,EAAsB1M,EAAc,MAElC2M,GAAqB,EACrBzN,EACFyN,GAAqB,EACZ3M,aAAuB1N,IAChC4M,EAAamG,GACXsC,EACA3H,GAEF2M,GAAqB,IAErBzN,EAAa5M,GAAajI,WAC1BsiB,GAAqB,GAEvB,MAAMzM,EAAYH,GAChB,IAAI5B,GAAUe,EAAYyN,GAAoB,GAC9C,IAAIxO,GAAU6B,EAAa0M,GAAqB,IAElD,OAAO,IAAIpC,GAAK3+B,EAAOu0B,GAEzB,OAAO8K,CACT,CAYgB,SAAA4B,GACdL,EACA5gC,EACAy/B,EACAzD,EACA3H,EACA0M,GAEA,MAAM1B,EAAOyB,GACXF,EACA5gC,EACAg8B,EACA3H,EACA0M,GAOF,OALKH,EAAUF,MAAMpoB,IAAItY,EAAMqY,mBAC7BuoB,EAAUF,MAAMrpC,IAAI2I,EAAMqY,iBAAkBgnB,GDjDhC,SACdA,EACAI,GAEAJ,EAAKR,oBAAoBp4C,KAAKg5C,EAChC,CC+CEyB,CAAyB7B,EAAMI,GDgDjB,SACdJ,EACApL,GAEA,MAAMO,EAAY6K,EAAK5D,WAAWlI,WAC5B4N,EAA2B,GAC5B3M,EAAU1E,UAAU5O,cACLsT,EAAU1E,UAClBtN,aAAae,IAAgB,CAAC9wB,EAAKyvB,KAC3Cif,EAAe16C,KAAKojC,GAAiBp3B,EAAKyvB,GAAW,IAMzD,OAHIsS,EAAU5B,sBACZuO,EAAe16C,KAAKkjC,GAAY6K,EAAU1E,YAErCqQ,GACLd,EACA8B,EACA3M,EAAU1E,UACVmE,EAEJ,CCpESmN,CAAqB/B,EAAMI,EACpC,CAYM,SAAU4B,GACdT,EACA5gC,EACAy/B,EACAC,GAEA,MAAMtnB,EAAUpY,EAAMqY,iBAChBipB,EAA0B,GAChC,IAAI3B,EAAwB,GAC5B,MAAM4B,EAAkBC,GAAyBZ,GACjD,GAAgB,YAAZxoB,EAEF,IAAK,MAAOqpB,EAAapC,KAASuB,EAAUF,MAAM7rC,UAChD8qC,EAAeA,EAAaM,OAC1BT,GAA4BH,EAAMI,EAAmBC,IAEnDH,GAAYF,KACduB,EAAUF,MAAMp4B,OAAOm5B,GAGlBpC,EAAKr/B,MAAMuY,aAAaE,gBAC3B6oB,EAAQ76C,KAAK44C,EAAKr/B,YAInB,CAEL,MAAMq/B,EAAOuB,EAAUF,MAAMjpC,IAAI2gB,GAC7BinB,IACFM,EAAeA,EAAaM,OAC1BT,GAA4BH,EAAMI,EAAmBC,IAEnDH,GAAYF,KACduB,EAAUF,MAAMp4B,OAAO8P,GAGlBinB,EAAKr/B,MAAMuY,aAAaE,gBAC3B6oB,EAAQ76C,KAAK44C,EAAKr/B,SAa1B,OAPIuhC,IAAoBC,GAAyBZ,IAE/CU,EAAQ76C,KACN,KA5KJ0B,EAAAA,EAAAA,IAAOo4C,GAAsB,oCACtBA,IA2KsCvgC,EAAM0hC,MAAO1hC,EAAM4X,QAIzD,CAAE0pB,UAASlO,OAAQuM,EAC5B,CAEM,SAAUgC,GAAuBf,GACrC,MAAMzvC,EAAS,GACf,IAAK,MAAMkuC,KAAQuB,EAAUF,MAAMpkB,SAC5B+iB,EAAKr/B,MAAMuY,aAAaE,gBAC3BtnB,EAAO1K,KAAK44C,GAGhB,OAAOluC,CACT,CAMgB,SAAAywC,GACdhB,EACAhuB,GAEA,IAAIyhB,EAA2B,KAC/B,IAAK,MAAMgL,KAAQuB,EAAUF,MAAMpkB,SACjC+X,EAAcA,GAAe+K,GAA2BC,EAAMzsB,GAEhE,OAAOyhB,CACT,CAEgB,SAAAwN,GACdjB,EACA5gC,GAGA,GADeA,EAAMuY,aACVE,eACT,OAAOqpB,GAAyBlB,GAC3B,CACL,MAAMxoB,EAAUpY,EAAMqY,iBACtB,OAAOuoB,EAAUF,MAAMjpC,IAAI2gB,GAE/B,CAEgB,SAAA2pB,GACdnB,EACA5gC,GAEA,OAAkD,MAA3C6hC,GAAsBjB,EAAW5gC,EAC1C,CAEM,SAAUwhC,GAAyBZ,GACvC,OAA8C,MAAvCkB,GAAyBlB,EAClC,CAEM,SAAUkB,GAAyBlB,GACvC,IAAK,MAAMvB,KAAQuB,EAAUF,MAAMpkB,SACjC,GAAI+iB,EAAKr/B,MAAMuY,aAAaE,eAC1B,OAAO4mB,EAGX,OAAO,IACT,CChNA,IAAI2C,GAAwB,QA2BfC,GAkBX57C,WAAAA,CAAmB67C,GAAA,KAAeA,gBAAfA,EAdnB,KAAAC,eAA2C,IAAIpN,GAAyB,MAKxE,KAAiBqN,kBNsfV,CACL5J,cAAejC,GAAcE,QAC7BwB,UAAW,GACXU,aAAc,GMvfP,KAAA0J,cAAqC,IAAItsB,IACzC,KAAAusB,cAAqC,IAAIvsB,KAc9C,SAAUwsB,GACdC,EACA5vB,EACA6vB,EACAzK,EACA7iB,GAWA,ONjGI,SACJwiB,EACA/kB,EACA0W,EACA0O,EACA7iB,IAEAhtB,EAAAA,EAAAA,IACE6vC,EAAUL,EAAUgB,YACpB,qDAEcxsC,IAAZgpB,IACFA,GAAU,GAEZwiB,EAAUM,UAAUxxC,KAAK,CACvBmsB,OACA0W,OACA0O,UACA7iB,YAGEA,IACFwiB,EAAUa,cAAgB9B,GACxBiB,EAAUa,cACV5lB,EACA0W,IAGJqO,EAAUgB,YAAcX,CAC1B,CM4DE0K,CACEF,EAASJ,kBACTxvB,EACA6vB,EACAzK,EACA7iB,GAGGA,EAGIwtB,GACLH,EACA,IAAIpQ,GhB/HD,CACLX,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GgB2HkC/e,EAAM6vB,IAJzC,EAOX,CAOM,SAAUG,GACdJ,EACA5vB,EACA2pB,EACAvE,INlFI,SACJL,EACA/kB,EACA2pB,EACAvE,IAEA7vC,EAAAA,EAAAA,IACE6vC,EAAUL,EAAUgB,YACpB,gDAEFhB,EAAUM,UAAUxxC,KAAK,CACvBmsB,OACAkW,SAAUyT,EACVvE,UACA7iB,SAAS,IAGXwiB,EAAUa,cAAgBzB,GACxBY,EAAUa,cACV5lB,EACA2pB,GAEF5E,EAAUgB,YAAcX,CAC1B,CM8DE6K,CAAkBL,EAASJ,kBAAmBxvB,EAAM2pB,EAAiBvE,GAErE,MAAM8K,EAAa/N,GAAcC,WAAWuH,GAE5C,OAAOoG,GACLH,EACA,IAAIlQ,GhBtJC,CACLb,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GgBkJ4B/e,EAAMkwB,GAE9C,CAQM,SAAUC,GACdP,EACAxK,GACuB,IAAvBlG,EAAAjsC,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GAEA,MAAMkhB,ENjFQ,SACd4wB,EACAK,GAEA,IAAK,IAAIrvC,EAAI,EAAGA,EAAIgvC,EAAUM,UAAUnyC,OAAQ6C,IAAK,CACnD,MAAMq6C,EAASrL,EAAUM,UAAUtvC,GACnC,GAAIq6C,EAAOhL,UAAYA,EACrB,OAAOgL,EAGX,OAAO,IACT,CMsEgBC,CAAkBT,EAASJ,kBAAmBpK,GAK5D,GAJyBD,GACvByK,EAASJ,kBACTpK,GAIK,CACL,IAAInG,EAAe,IAAIkD,GAAuB,MAS9C,OARkB,MAAdhuB,EAAMuiB,KAERuI,EAAeA,EAAax6B,IAAIqb,MAAgB,GAEhDhY,EAAKqM,EAAM+hB,UAAWxY,IACpBuhB,EAAeA,EAAax6B,IAAI,IAAI+a,GAAK9B,IAAa,EAAK,IAGxDqyB,GACLH,EACA,IAAI5Q,GAAa7qB,EAAM6L,KAAMif,EAAcC,IAb7C,MAAO,EAgBX,UAOgBoR,GACdV,EACA5vB,EACA6vB,GAEA,OAAOE,GACLH,EACA,IAAIpQ,GhBhMC,CACLX,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GgB4LkC/e,EAAM6vB,GAEpD,CA0EgB,SAAAU,GACdX,EACAxiC,EACAy/B,EACAC,GACyB,IAAzB0D,EAAiBv9C,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GAGjB,MAAM+sB,EAAO5S,EAAM4X,MACbyrB,EAAiBb,EAASL,eAAe1qC,IAAImb,GACnD,IAAI+sB,EAAwB,GAI5B,GACE0D,IAC4B,YAA3BrjC,EAAMqY,kBACL0pB,GAA4BsB,EAAgBrjC,IAC9C,CACA,MAAMsjC,EAAmBjC,GACvBgC,EACArjC,EACAy/B,EACAC,GD7Q4B,IC+QT2D,ED/QN3C,MAAMl5B,OCgRnBg7B,EAASL,eAAiBK,EAASL,eAAevqC,OAAOgb,IAG3D,MAAM0uB,EAAUgC,EAAiBhC,QAGjC,GAFA3B,EAAe2D,EAAiBlQ,QAE3BgQ,EAAmB,CAStB,MAAMG,GACH,IACDjC,EAAQpJ,WAAUl4B,GACTA,EAAMuY,aAAaE,iBAExB+qB,EAAUhB,EAASL,eAAerM,WACtCljB,GACA,CAACuiB,EAAcsO,IACbjC,GAAyBiC,KAG7B,GAAIF,IAAoBC,EAAS,CAC/B,MAAMvR,EAAUuQ,EAASL,eAAelQ,QAAQrf,GAGhD,IAAKqf,EAAQx+B,UAAW,CAEtB,MAAMiwC,EAgfhB,SACEzR,GAEA,OAAOA,EAAQyD,MAAa,CAACP,EAAcwO,EAAqBC,KAC9D,GAAID,GAAuBnC,GAAyBmC,GAAsB,CAExE,MAAO,CADc7B,GAAyB6B,IAEzC,CAEL,IAAIjD,EAAgB,GAOpB,OANIiD,IACFjD,EAAQiB,GAAuBgC,IAEjCjpC,EAAKkpC,GAAU,CAAC39C,EAAc49C,KAC5BnD,EAAQA,EAAMT,OAAO4D,EAAW,IAE3BnD,KAGb,CAngB2BoD,CAAwC7R,GAGzD,IAAK,IAAItpC,EAAI,EAAGA,EAAI+6C,EAAS59C,SAAU6C,EAAG,CACxC,MAAM02C,EAAOqE,EAAS/6C,GACpBo7C,EAAW1E,EAAKr/B,MACZxC,EAAWwmC,GAA+BxB,EAAUnD,GAC1DmD,EAASN,gBAAgB+B,eACvBC,GAA2BH,GAC3BI,GAAoB3B,EAAUuB,GAC9BvmC,EAASmb,OACTnb,EAAS+S,cASjB,IAAKizB,GAAWlC,EAAQx7C,OAAS,IAAM45C,EAGrC,GAAI6D,EAAiB,CAEnB,MAAMa,EAA4B,KAClC5B,EAASN,gBAAgBmC,cACvBH,GAA2BlkC,GAC3BokC,QAGF9C,EAAQxsC,SAASwvC,IACf,MAAMC,EAAc/B,EAASF,cAAc7qC,IACzC+sC,GAAsBF,IAExB9B,EAASN,gBAAgBmC,cACvBH,GAA2BI,GAC3BC,EACD,KA+eb,SAA6B/B,EAAoBnmB,GAC/C,IAAK,IAAI9lB,EAAI,EAAGA,EAAI8lB,EAAQv2B,SAAUyQ,EAAG,CACvC,MAAMkuC,EAAepoB,EAAQ9lB,GAC7B,IAAKkuC,EAAalsB,aAAaE,eAAgB,CAE7C,MAAMisB,EAAkBF,GAAsBC,GACxCE,EAAkBnC,EAASF,cAAc7qC,IAAIitC,GACnDlC,EAASF,cAAch6B,OAAOo8B,GAC9BlC,EAASH,cAAc/5B,OAAOq8B,IAGpC,CApfIC,CAAoBpC,EAAUlB,GAIhC,OAAO3B,CACT,CAOM,SAAUkF,GACdrC,EACA5vB,EACA0W,EACAnR,GAEA,MAAM2sB,EAAWC,GAAwBvC,EAAUrqB,GACnD,GAAgB,MAAZ2sB,EAAkB,CACpB,MAAMttB,EAAIwtB,GAAuBF,GAC3BG,EAAYztB,EAAE5E,KAClBwF,EAAUZ,EAAEY,QACR+c,EAAe1hB,GAAgBwxB,EAAWryB,GAMhD,OAAOsyB,GAA8B1C,EAAUyC,EALpC,IAAI7S,GACbZ,GAAoCpZ,GACpC+c,EACA7L,IAKF,MAAO,EAEX,CAqCM,SAAU6b,GACd3C,EACAxiC,EACAy/B,GACyB,IAAzB2F,EAAiBv/C,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,IAAAA,UAAA,GAEjB,MAAM+sB,EAAO5S,EAAM4X,MAEnB,IAAIyc,EAA2B,KAC3BgR,GAA2B,EAG/B7C,EAASL,eAAelM,cAAcrjB,GAAM,CAAC0yB,EAAiBC,KAC5D,MAAMpQ,EAAe1hB,GAAgB6xB,EAAiB1yB,GACtDyhB,EACEA,GAAeuN,GAAgC2D,EAAIpQ,GACrDkQ,EACEA,GAA4B7D,GAAyB+D,EAAG,IAE5D,IAWIxE,EAXAH,EAAY4B,EAASL,eAAe1qC,IAAImb,GAY5C,GAXKguB,GAIHyE,EACEA,GAA4B7D,GAAyBZ,GACvDvM,EACEA,GAAeuN,GAAgChB,EAAWluB,QAN5DkuB,EAAY,IAAIH,GAChB+B,EAASL,eAAiBK,EAASL,eAAe9qC,IAAIub,EAAMguB,IAS3C,MAAfvM,EACF0M,GAAsB,MACjB,CACLA,GAAsB,EACtB1M,EAAc1N,GAAajI,WACX8jB,EAASL,eAAelQ,QAAQrf,GACxC0jB,cAAa,CAACxU,EAAW0jB,KAC/B,MAAMvJ,EAAgB2F,GACpB4D,EACA9yB,MAEEupB,IACF5H,EAAcA,EAAYlS,qBACxBL,EACAma,OAMR,MAAMwJ,EAAoB1D,GAA4BnB,EAAW5gC,GACjE,IAAKylC,IAAsBzlC,EAAMuY,aAAaE,eAAgB,CAE5D,MAAMqsB,EAAWN,GAAsBxkC,IACvC7X,EAAAA,EAAAA,KACGq6C,EAASF,cAAchqB,IAAIwsB,GAC5B,0CAEF,MAAM3sB,EAwXD6pB,KAvXLQ,EAASF,cAAcjrC,IAAIytC,EAAU3sB,GACrCqqB,EAASH,cAAchrC,IAAI8gB,EAAK2sB,GAGlC,IAAI1R,EAAS6N,GACXL,EACA5gC,EACAy/B,EAJkB5H,GAAqB2K,EAASJ,kBAAmBxvB,GAMnEyhB,EACA0M,GAEF,IAAK0E,IAAsBJ,IAA6BD,EAAmB,CACzE,MAAM/F,EAAOwC,GAAsBjB,EAAW5gC,GAC9CozB,EAASA,EAAO6M,OAiXpB,SACEuC,EACAxiC,EACAq/B,GAEA,MAAMzsB,EAAO5S,EAAM4X,MACbO,EAAMgsB,GAAoB3B,EAAUxiC,GACpCxC,EAAWwmC,GAA+BxB,EAAUnD,GAEpDjM,EAASoP,EAASN,gBAAgB+B,eACtCC,GAA2BlkC,GAC3BmY,EACA3a,EAASmb,OACTnb,EAAS+S,YAGL0hB,EAAUuQ,EAASL,eAAelQ,QAAQrf,GAGhD,GAAIuF,GACFhwB,EAAAA,EAAAA,KACGq5C,GAAyBvP,EAAQhmC,OAClC,yDAEG,CAEL,MAAMy5C,EAAgBzT,EAAQyD,MAC5B,CAACP,EAAcwO,EAAqBC,KAClC,IACGpwB,GAAY2hB,IACbwO,GACAnC,GAAyBmC,GAEzB,MAAO,CAAC7B,GAAyB6B,GAAqB3jC,OACjD,CAEL,IAAIqc,EAA0B,GAW9B,OAVIsnB,IACFtnB,EAAUA,EAAQ4jB,OAChB0B,GAAuBgC,GAAqBjwC,KAC1C2rC,GAAQA,EAAKr/B,UAInBtF,EAAKkpC,GAAU,CAAC39C,EAAc0/C,KAC5BtpB,EAAUA,EAAQ4jB,OAAO0F,EAAa,IAEjCtpB,MAIb,IAAK,IAAI1zB,EAAI,EAAGA,EAAI+8C,EAAc5/C,SAAU6C,EAAG,CAC7C,MAAMi9C,EAAcF,EAAc/8C,GAClC65C,EAASN,gBAAgBmC,cACvBH,GAA2B0B,GAC3BzB,GAAoB3B,EAAUoD,KAIpC,OAAOxS,CACT,CA7a2ByS,CAAuBrD,EAAUxiC,EAAOq/B,IAEjE,OAAOjM,CACT,UAagB0S,GACdtD,EACA5vB,EACAymB,GAEA,MACM1B,EAAY6K,EAASJ,kBACrB/N,EAAcmO,EAASL,eAAerM,WAC1CljB,GACA,CAACgjB,EAAWgL,KACV,MACMvM,EAAcuN,GAClBhB,EAFmBntB,GAAgBmiB,EAAWhjB,IAKhD,GAAIyhB,EACF,OAAOA,KAIb,OAAO6E,GACLvB,EACA/kB,EACAyhB,EACAgF,GAnBwB,EAsB5B,CAEgB,SAAA0M,GACdvD,EACAxiC,GAEA,MAAM4S,EAAO5S,EAAM4X,MACnB,IAAIyc,EAA2B,KAG/BmO,EAASL,eAAelM,cAAcrjB,GAAM,CAAC0yB,EAAiBC,KAC5D,MAAMpQ,EAAe1hB,GAAgB6xB,EAAiB1yB,GACtDyhB,EACEA,GAAeuN,GAAgC2D,EAAIpQ,EAAa,IAEpE,IAAIyL,EAAY4B,EAASL,eAAe1qC,IAAImb,GACvCguB,EAIHvM,EACEA,GAAeuN,GAAgChB,EAAWluB,OAJ5DkuB,EAAY,IAAIH,GAChB+B,EAASL,eAAiBK,EAASL,eAAe9qC,IAAIub,EAAMguB,IAK9D,MAAMG,EAAqC,MAAf1M,EACtB2R,EAAoCjF,EACtC,IAAIvO,GAAU6B,GAAa,GAAM,GACjC,KAYJ,OFliBI,SAA8BgL,GAClC,OAAOzK,GAA8ByK,EAAK5D,WAC5C,CEgiBSwK,CAPYnF,GACjBF,EACA5gC,EANuC63B,GACvC2K,EAASJ,kBACTpiC,EAAM4X,OAMNmpB,EAAsBiF,EAAgBlW,UAAYnJ,GAAajI,WAC/DqiB,GAGJ,CAeA,SAAS4B,GACPH,EACAzG,GAEA,OAAOmK,GACLnK,EACAyG,EAASL,eACQ,KACjBtK,GAAqB2K,EAASJ,kBAAmB1vB,MAErD,CAKA,SAASwzB,GACPnK,EACAoK,EACA9R,EACA2H,GAEA,GAAIxoB,GAAYuoB,EAAUnpB,MACxB,OAAOwzB,GACLrK,EACAoK,EACA9R,EACA2H,GAEG,CACL,MAAM4E,EAAYuF,EAAc1uC,IAAIib,MAGjB,MAAf2hB,GAAoC,MAAbuM,IACzBvM,EAAcuN,GAAgChB,EAAWluB,OAG3D,IAAI0gB,EAAkB,GACtB,MAAMtR,EAAYnP,GAAaopB,EAAUnpB,MACnCyzB,EAAiBtK,EAAU/J,kBAAkBlQ,GAC7CgD,EAAYqhB,EAAcrd,SAASrxB,IAAIqqB,GAC7C,GAAIgD,GAAauhB,EAAgB,CAC/B,MAAMC,EAAmBjS,EACrBA,EAAYxS,kBAAkBC,GAC9B,KACEykB,EAAmBzL,GAAkBkB,EAAala,GACxDsR,EAASA,EAAO6M,OACdiG,GACEG,EACAvhB,EACAwhB,EACAC,IAWN,OANI3F,IACFxN,EAASA,EAAO6M,OACdU,GAAwBC,EAAW7E,EAAWC,EAAa3H,KAIxDjB,EAEX,CAKA,SAASgT,GACPrK,EACAoK,EACA9R,EACA2H,GAEA,MAAM4E,EAAYuF,EAAc1uC,IAAIib,MAGjB,MAAf2hB,GAAoC,MAAbuM,IACzBvM,EAAcuN,GAAgChB,EAAWluB,OAG3D,IAAI0gB,EAAkB,GAyBtB,OAxBA+S,EAAcrd,SAASjK,kBAAiB,CAACiD,EAAWgD,KAClD,MAAMwhB,EAAmBjS,EACrBA,EAAYxS,kBAAkBC,GAC9B,KACEykB,EAAmBzL,GAAkBkB,EAAala,GAClDukB,EAAiBtK,EAAU/J,kBAAkBlQ,GAC/CukB,IACFjT,EAASA,EAAO6M,OACdmG,GACEC,EACAvhB,EACAwhB,EACAC,QAMJ3F,IACFxN,EAASA,EAAO6M,OACdU,GAAwBC,EAAW7E,EAAWC,EAAa3H,KAIxDjB,CACT,CAEA,SAAS4Q,GACPxB,EACAnD,GAEA,MAAMr/B,EAAQq/B,EAAKr/B,MACbmY,EAAMgsB,GAAoB3B,EAAUxiC,GAE1C,MAAO,CACL2Y,OAAQA,KACN,MAAM2mB,EF5qBN,SAA6BD,GACjC,OAAOA,EAAK5D,WAAWpH,YAAYvE,SACrC,CE0qBoB0W,CAAmBnH,IAAS1Y,GAAajI,WACvD,OAAO4gB,EAAM9uB,MAAM,EAErBD,WAAauI,IACX,GAAe,OAAXA,EACF,OAAIX,WApfVqqB,EACA5vB,EACAuF,GAEA,MAAM2sB,EAAWC,GAAwBvC,EAAUrqB,GACnD,GAAI2sB,EAAU,CACZ,MAAMttB,EAAIwtB,GAAuBF,GAC3BG,EAAYztB,EAAE5E,KAClBwF,EAAUZ,EAAEY,QACR+c,EAAe1hB,GAAgBwxB,EAAWryB,GAKhD,OAAOsyB,GAA8B1C,EAAUyC,EAJpC,IAAI/S,GACbV,GAAoCpZ,GACpC+c,IAKF,MAAO,EAEX,CAkeiBsR,CAAkCjE,EAAUxiC,EAAM4X,MAAOO,GArgB1D,SACdqqB,EACA5vB,GAEA,OAAO+vB,GACLH,EACA,IAAItQ,GhBjOC,CACLT,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GgB6NuC/e,GAEnD,CA+fiB8zB,CAA4BlE,EAAUxiC,EAAM4X,OAEhD,CAGL,MAAMhwB,E1D3UE,SAAmB6J,EAAcuO,GAC/C,IAAImQ,EAAS,gBACA,YAAT1e,EACF0e,EACE,0FAEgB,sBAAT1e,EACT0e,EAAS,6DACS,gBAAT1e,IACT0e,EAAS,8BAGX,MAAMvoB,EAAQ,IAAIjC,MAChB8L,EAAO,OAASuO,EAAM4X,MAAM/f,WAAa,KAAOsY,GAIlD,OADCvoB,EAAc6J,KAAOA,EAAKk1C,cACpB/+C,CACT,C0DyTsBg/C,CAAmB9tB,EAAQ9Y,GACzC,OAAOmjC,GACLX,EACAxiC,EACsB,KACtBpY,KAKV,CAKgB,SAAAu8C,GACd3B,EACAxiC,GAEA,MAAM8kC,EAAWN,GAAsBxkC,GACvC,OAAOwiC,EAASF,cAAc7qC,IAAIqtC,EACpC,CAKA,SAASN,GAAsBxkC,GAC7B,OAAOA,EAAM4X,MAAM/f,WAAa,IAAMmI,EAAMqY,gBAC9C,CAKA,SAAS0sB,GACPvC,EACArqB,GAEA,OAAOqqB,EAASH,cAAc5qC,IAAI0gB,EACpC,CAKA,SAAS6sB,GAAuBF,GAI9B,MAAM+B,EAAa/B,EAASrlC,QAAQ,KAKpC,OAJAtX,EAAAA,EAAAA,KACkB,IAAhB0+C,GAAqBA,EAAa/B,EAASh/C,OAAS,EACpD,iBAEK,CACLsyB,QAAS0sB,EAASlpC,OAAOirC,EAAa,GACtCj0B,KAAM,IAAIR,GAAK0yB,EAASlpC,OAAO,EAAGirC,IAEtC,CAKA,SAAS3B,GACP1C,EACAyC,EACAlJ,GAEA,MAAM6E,EAAY4B,EAASL,eAAe1qC,IAAIwtC,IAC9C98C,EAAAA,EAAAA,IAAOy4C,EAAW,wDAKlB,OAAOD,GAAwBC,EAAW7E,EAJtBlE,GAClB2K,EAASJ,kBACT6C,GAEgE,KACpE,CAgCA,SAASf,GAA2BlkC,GAClC,OAAIA,EAAMuY,aAAaE,iBAAmBzY,EAAMuY,aAAaC,YAIpD,KA3zBTrwB,EAAAA,EAAAA,IAAOq4C,GAAsB,oCACtBA,IA0zB0CxgC,EAAM0hC,MAAO1hC,EAAM4X,OAE3D5X,CAEX,CC52BA,MAAM8mC,GACJzgD,WAAAA,CAAqBosC,GAAA,KAAKA,MAALA,EAErB5Q,iBAAAA,CAAkBC,GAChB,MAAMgF,EAAQpgC,KAAK+rC,MAAM5Q,kBAAkBC,GAC3C,OAAO,IAAIglB,GAAsBhgB,GAGnCrK,IAAAA,GACE,OAAO/1B,KAAK+rC,OAIhB,MAAMsU,GAIJ1gD,WAAAA,CAAYm8C,EAAoB5vB,GAC9BlsB,KAAKsgD,UAAYxE,EACjB97C,KAAKugD,MAAQr0B,EAGfiP,iBAAAA,CAAkBC,GAChB,MAAMmT,EAAY5hB,GAAU3sB,KAAKugD,MAAOnlB,GACxC,OAAO,IAAIilB,GAAsBrgD,KAAKsgD,UAAW/R,GAGnDxY,IAAAA,GACE,OAAOqpB,GAA+Bp/C,KAAKsgD,UAAWtgD,KAAKugD,QAOxD,MAAMC,GAAqB,SAChC5qB,GAMA,OAFAA,EAASA,GAAU,CAAC,GACF,UAAIA,EAAkB,YAAK,IAAI92B,MAAO+G,UACjD+vB,CACT,EAMa6qB,GAA2B,SACtCl7C,EACAm7C,EACAC,GAEA,OAAKp7C,GAA0B,kBAAVA,IAGrB9D,EAAAA,EAAAA,IAAO,QAAS8D,EAAO,6CAEK,kBAAjBA,EAAM,OACRq7C,GAA2Br7C,EAAM,OAAQm7C,EAAaC,GAC5B,kBAAjBp7C,EAAM,OACfs7C,GAA4Bt7C,EAAM,OAAQm7C,QAEjDj/C,EAAAA,EAAAA,KAAO,EAAO,4BAA8BiF,KAAK8C,UAAUjE,EAAO,KAAM,KATjEA,CAWX,EAEMq7C,GAA6B,SACjCE,EACAzH,EACAsH,GAEA,GACO,cADCG,EAEJ,OAAOH,EAAwB,WAE/Bl/C,EAAAA,EAAAA,KAAO,EAAO,4BAA8Bq/C,EAElD,EAEMD,GAA8B,SAClCC,EACAzH,EACA0H,GAEKD,EAAG/6C,eAAe,eACrBtE,EAAAA,EAAAA,KAAO,EAAO,4BAA8BiF,KAAK8C,UAAUs3C,EAAI,KAAM,IAEvE,MAAMxrB,EAAQwrB,EAAc,UACP,kBAAVxrB,IACT7zB,EAAAA,EAAAA,KAAO,EAAO,+BAAiC6zB,GAGjD,MAAM0rB,EAAe3H,EAAStjB,OAO9B,IANAt0B,EAAAA,EAAAA,IACmB,OAAjBu/C,GAAiD,qBAAjBA,EAChC,+CAIGA,EAAaxmB,aAChB,OAAOlF,EAGT,MACMorB,EADOM,EACYhlB,WACzB,MAA2B,kBAAhB0kB,EACFprB,EAIForB,EAAcprB,CACvB,EASa2rB,GAA2B,SACtC/0B,EACA6J,EACA+lB,EACA6E,GAEA,OAAOO,GACLnrB,EACA,IAAIsqB,GAAsBvE,EAAU5vB,GACpCy0B,EAEJ,EAOaQ,GAA+B,SAC1CprB,EACAsjB,EACAsH,GAEA,OAAOO,GACLnrB,EACA,IAAIqqB,GAAsB/G,GAC1BsH,EAEJ,EAEA,SAASO,GACPnrB,EACA2qB,EACAC,GAEA,MAAMS,EAASrrB,EAAK0E,cAAcx6B,MAM5Bo6B,EAAWomB,GACfW,EACAV,EAAYvlB,kBAAkB,aAC9BwlB,GAEF,IAAIrqB,EAEJ,GAAIP,EAAKyE,aAAc,CACrB,MAAM6mB,EAAWtrB,EACXxwB,EAAQk7C,GACZY,EAASrlB,WACT0kB,EACAC,GAEF,OACEp7C,IAAU87C,EAASrlB,YACnB3B,IAAagnB,EAAS5mB,cAAcx6B,MAE7B,IAAI46B,GAASt1B,EAAO08B,GAAa5H,IAEjCtE,EAEJ,CACL,MAAMurB,EAAevrB,EAerB,OAdAO,EAAUgrB,EACNjnB,IAAainB,EAAa7mB,cAAcx6B,QAC1Cq2B,EAAUA,EAAQ2E,eAAe,IAAIJ,GAASR,KAEhDinB,EAAaxlB,aAAae,IAAgB,CAACzB,EAAWI,KACpD,MAAME,EAAewlB,GACnB1lB,EACAklB,EAAYvlB,kBAAkBC,GAC9BulB,GAEEjlB,IAAiBF,IACnBlF,EAAUA,EAAQmF,qBAAqBL,EAAWM,OAG/CpF,EAEX,OC9MairB,GAMX5hD,WAAAA,GAG4D,IAFjDF,EAAeN,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,MACfqiD,EAAAriD,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAyB,KAC3B42B,EAAA52B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAoB,CAAEijC,SAAU,CAAC,EAAGqf,WAAY,GAF9C,KAAIhiD,KAAJA,EACA,KAAM+hD,OAANA,EACF,KAAIzrB,KAAJA,GAUK,SAAA2rB,GAAe5X,EAAe6X,GAE5C,IAAIz1B,EAAOy1B,aAAmBj2B,GAAOi2B,EAAU,IAAIj2B,GAAKi2B,GACpDvhB,EAAQ0J,EACVtK,EAAOvT,GAAaC,GACtB,KAAgB,OAATsT,GAAe,CACpB,MAAMhE,GAAY1uB,EAAAA,EAAAA,IAAQszB,EAAMrK,KAAKqM,SAAU5C,IAAS,CACtD4C,SAAU,CAAC,EACXqf,WAAY,GAEdrhB,EAAQ,IAAImhB,GAAQ/hB,EAAMY,EAAO5E,GACjCtP,EAAOE,GAAaF,GACpBsT,EAAOvT,GAAaC,GAGtB,OAAOkU,CACT,CAOM,SAAUwhB,GAAgB9X,GAC9B,OAAOA,EAAK/T,KAAKxwB,KACnB,CAOgB,SAAAs8C,GAAgB/X,EAAevkC,GAC7CukC,EAAK/T,KAAKxwB,MAAQA,EAClBu8C,GAAkBhY,EACpB,CAKM,SAAUiY,GAAmBjY,GACjC,OAAOA,EAAK/T,KAAK0rB,WAAa,CAChC,CAcgB,SAAAO,GACdlY,EACAnZ,GAEA3c,EAAK81B,EAAK/T,KAAKqM,UAAU,CAAChC,EAAehC,KACvCzN,EAAO,IAAI4wB,GAAQnhB,EAAO0J,EAAM1L,GAAW,GAE/C,CAWM,SAAU6jB,GACdnY,EACAnZ,EACAuxB,EACAC,GAEID,IAAgBC,GAClBxxB,EAAOmZ,GAGTkY,GAAiBlY,GAAM1J,IACrB6hB,GAAsB7hB,EAAOzP,GAAQ,EAAMwxB,EAAc,IAGvDD,GAAeC,GACjBxxB,EAAOmZ,EAEX,CAgDM,SAAUsY,GAAetY,GAC7B,OAAO,IAAIpe,GACO,OAAhBoe,EAAK0X,OACD1X,EAAKrqC,KACL2iD,GAAYtY,EAAK0X,QAAU,IAAM1X,EAAKrqC,KAE9C,CAKA,SAASqiD,GAAqBhY,GACR,OAAhBA,EAAK0X,QAWX,SAA4B1X,EAAe1O,EAAmBgF,GAC5D,MAAMiiB,EApHF,SAAyBvY,GAC7B,YAA8BrkC,IAAvBm8C,GAAa9X,KAAwBiY,GAAgBjY,EAC9D,CAkHqBwY,CAAYliB,GACzBmiB,GAAc51C,EAAAA,EAAAA,IAASm9B,EAAK/T,KAAKqM,SAAUhH,GAC7CinB,GAAcE,UACTzY,EAAK/T,KAAKqM,SAAShH,GAC1B0O,EAAK/T,KAAK0rB,aACVK,GAAkBhY,IACRuY,GAAeE,IACzBzY,EAAK/T,KAAKqM,SAAShH,GAAagF,EAAMrK,KACtC+T,EAAK/T,KAAK0rB,aACVK,GAAkBhY,GAEtB,CAtBI0Y,CAAgB1Y,EAAK0X,OAAQ1X,EAAKrqC,KAAMqqC,EAE5C,CCvKO,MAAM2Y,GAAqB,iCAMrBC,GAAsB,+BAKtBC,GAAiB,SAEjBC,GAAa,SAAU72C,GAClC,MACiB,kBAARA,GAAmC,IAAfA,EAAI3M,SAAiBqjD,GAAmB34C,KAAKiC,EAE5E,EAEa82C,GAAoB,SAAUj5B,GACzC,MACwB,kBAAfA,GACe,IAAtBA,EAAWxqB,SACVsjD,GAAoB54C,KAAK8f,EAE9B,EAWak5B,GAAkB,SAAUzoB,GACvC,OACe,OAAbA,GACoB,kBAAbA,GACc,kBAAbA,IAA0BvnB,EAAoBunB,IACrDA,GACqB,kBAAbA,IAEP1tB,EAAAA,EAAAA,IAAS0tB,EAAiB,MAEhC,EAKa0oB,GAA0B,SACrChzC,EACAxK,EACA2mB,EACAzV,GAEIA,QAAsBhR,IAAVF,GAIhBy9C,IAAqBlzC,EAAAA,EAAAA,IAAeC,EAAQ,SAAUxK,EAAO2mB,EAC/D,EAKa82B,GAAuB,SAClClzC,EACAlE,EACA20C,GAEA,MAAMr0B,EACJq0B,aAAiB70B,GAAO,IAAImC,GAAe0yB,EAAOzwC,GAAeywC,EAEnE,QAAa96C,IAATmG,EACF,MAAM,IAAI3M,MACR6Q,EAAc,sBAAwBse,GAA4BlC,IAGtE,GAAoB,oBAATtgB,EACT,MAAM,IAAI3M,MACR6Q,EACE,uBACAse,GAA4BlC,GAC5B,oBACAtgB,EAAKuF,YAGX,GAAI2B,EAAoBlH,GACtB,MAAM,IAAI3M,MACR6Q,EACE,YACAlE,EAAKuF,WACL,IACAid,GAA4BlC,IAKlC,GACkB,kBAATtgB,GACPA,EAAKxM,OAASujD,GAAiB,IAC/BxyC,EAAAA,EAAAA,IAAavE,GAAQ+2C,GAErB,MAAM,IAAI1jD,MACR6Q,EACE,kCACA6yC,GACA,eACAv0B,GAA4BlC,GAC5B,MACAtgB,EAAKhE,UAAU,EAAG,IAClB,SAMN,GAAIgE,GAAwB,kBAATA,EAAmB,CACpC,IAAIq3C,GAAc,EACdC,GAAiB,EAwBrB,GAvBAlvC,EAAKpI,GAAM,CAACG,EAAaxG,KACvB,GAAY,WAARwG,EACFk3C,GAAc,OACT,GAAY,cAARl3C,GAA+B,QAARA,IAChCm3C,GAAiB,GACZN,GAAW72C,IACd,MAAM,IAAI9M,MACR6Q,EACE,6BACA/D,EACA,KACAqiB,GAA4BlC,GAJ9Bpc,yF9C4GI,SACdqe,EACAiS,GAGIjS,EAAeJ,OAAO3uB,OAAS,IACjC+uB,EAAeH,aAAe,GAEhCG,EAAeJ,OAAOhuB,KAAKqgC,GAC3BjS,EAAeH,cAAe7d,EAAAA,EAAAA,IAAaiwB,GAC3ClS,GAAyBC,EAC3B,C8C5GMg1B,CAAmBj3B,EAAMngB,GACzBi3C,GAAqBlzC,EAAavK,EAAO2mB,G9C6GzC,SAA4BiC,GAChC,MAAMi1B,EAAOj1B,EAAeJ,OAAO0J,MACnCtJ,EAAeH,cAAe7d,EAAAA,EAAAA,IAAaizC,GAEvCj1B,EAAeJ,OAAO3uB,OAAS,IACjC+uB,EAAeH,aAAe,EAElC,C8CnHMq1B,CAAkBn3B,EAAK,IAGrB+2B,GAAeC,EACjB,MAAM,IAAIjkD,MACR6Q,EACE,4BACAse,GAA4BlC,GAC5B,oCAIV,EAsDao3B,GAA+B,SAC1CvzC,EACAnE,EACAsgB,EACAzV,GAEA,GAAIA,QAAqBhR,IAATmG,EACd,OAGF,MAAM23C,GAAczzC,EAAAA,EAAAA,IAAeC,EAAQ,UAE3C,IAAMnE,GAAwB,kBAATA,GAAsBtM,MAAM2D,QAAQ2I,GACvD,MAAM,IAAI3M,MACRskD,EAAc,0DAIlB,MAAMC,EAAqB,GAC3BxvC,EAAKpI,GAAM,CAACG,EAAaxG,KACvB,MAAMk+C,EAAU,IAAI/3B,GAAK3f,GAEzB,GADAi3C,GAAqBO,EAAah+C,EAAOonB,GAAUT,EAAMu3B,IAC5B,cAAzBp3B,GAAYo3B,KACTX,GAAgBv9C,GACnB,MAAM,IAAItG,MACRskD,EACE,kCACAE,EAAQtyC,WAFVoyC,gGAQNC,EAAWzjD,KAAK0jD,EAAQ,IAlFc,SACxC3zC,EACA0zC,GAEA,IAAIvhD,EAAGwhD,EACP,IAAKxhD,EAAI,EAAGA,EAAIuhD,EAAWpkD,OAAQ6C,IAAK,CACtCwhD,EAAUD,EAAWvhD,GACrB,MAAMuL,EAAO8e,GAAUm3B,GACvB,IAAK,IAAI5zC,EAAI,EAAGA,EAAIrC,EAAKpO,OAAQyQ,IAC/B,GAAgB,cAAZrC,EAAKqC,IAAsBA,IAAMrC,EAAKpO,OAAS,QAE5C,IAAKwjD,GAAWp1C,EAAKqC,IAC1B,MAAM,IAAI5Q,MACR6Q,EACE,4BACAtC,EAAKqC,GACL,aACA4zC,EAAQtyC,WAJVrB,uFAeR0zC,EAAW7vC,KAAKyZ,IAChB,IAAIs2B,EAAwB,KAC5B,IAAKzhD,EAAI,EAAGA,EAAIuhD,EAAWpkD,OAAQ6C,IAAK,CAEtC,GADAwhD,EAAUD,EAAWvhD,GACJ,OAAbyhD,GAAqB91B,GAAa81B,EAAUD,GAC9C,MAAM,IAAIxkD,MACR6Q,EACE,mBACA4zC,EAASvyC,WACT,qCACAsyC,EAAQtyC,YAGduyC,EAAWD,EAEf,CAyCEE,CAA2BJ,EAAaC,EAC1C,EAoDaI,GAAqB,SAChC7zC,EACA8zC,EACAj6B,EACAnT,GAEA,KAAIA,QAA2BhR,IAAfmkB,KAIXi5B,GAAkBj5B,GACrB,MAAM,IAAI3qB,OACR6Q,EAAAA,EAAAA,IAAeC,EAAQ8zC,GACrB,0BACAj6B,EAFF9Z,mFAON,EAEag0C,GAAyB,SACpC/zC,EACA8zC,EACAj6B,EACAnT,GAEImT,IAEFA,EAAaA,EAAWzkB,QAAQ,mBAAoB,MAGtDy+C,GAAmB7zC,EAAQ8zC,EAAcj6B,EAAYnT,EACvD,EAKastC,GAAuB,SAAUh0C,EAAgBmc,GAC5D,GAA2B,UAAvBD,GAAaC,GACf,MAAM,IAAIjtB,MAAM8Q,EAAS,4CAE7B,EAEai0C,GAAc,SACzBj0C,EACAk0C,GAGA,MAAMr6B,EAAaq6B,EAAU/3B,KAAK/a,WAClC,GACuC,kBAA5B8yC,EAAUzqC,SAASrS,MACO,IAAnC88C,EAAUzqC,SAASrS,KAAK/H,SACtBwjD,GAAWqB,EAAUzqC,SAASlB,YACY,cAA1C2rC,EAAUzqC,SAASrS,KAAKqF,MAAM,KAAK,IACd,IAAtBod,EAAWxqB,SApUqB,SAAUwqB,GAM7C,OALIA,IAEFA,EAAaA,EAAWzkB,QAAQ,mBAAoB,MAG/C09C,GAAkBj5B,EAC3B,CA6TiCs6B,CAAsBt6B,GAEnD,MAAM,IAAI3qB,OACR6Q,EAAAA,EAAAA,IAAeC,EAAQ,OAAvBD,uFAKN,QChXaq0C,GAAbxkD,WAAAA,GACE,KAAWykD,YAAgB,GAK3B,KAAeC,gBAAG,GAMJ,SAAAC,GACdC,EACAC,GAGA,IAAIC,EAA6B,KACjC,IAAK,IAAIxiD,EAAI,EAAGA,EAAIuiD,EAAcplD,OAAQ6C,IAAK,CAC7C,MAAM2J,EAAO44C,EAAcviD,GACrBiqB,EAAOtgB,EAAK84C,UACD,OAAbD,GAAsB/2B,GAAWxB,EAAMu4B,EAASv4B,QAClDq4B,EAAWH,YAAYrkD,KAAK0kD,GAC5BA,EAAW,MAGI,OAAbA,IACFA,EAAW,CAAE/X,OAAQ,GAAIxgB,SAG3Bu4B,EAAS/X,OAAO3sC,KAAK6L,GAEnB64C,GACFF,EAAWH,YAAYrkD,KAAK0kD,EAEhC,UA+BgBE,GACdJ,EACAK,EACAJ,GAEAF,GAAsBC,EAAYC,GAClCK,GACEN,GACAO,GACEl3B,GAAak3B,EAAWF,IACxBh3B,GAAag3B,EAAaE,IAEhC,CAEA,SAASD,GACPN,EACA7V,GAEA6V,EAAWF,kBAEX,IAAIU,GAAU,EACd,IAAK,IAAI9iD,EAAI,EAAGA,EAAIsiD,EAAWH,YAAYhlD,OAAQ6C,IAAK,CACtD,MAAM+iD,EAAYT,EAAWH,YAAYniD,GACzC,GAAI+iD,EAAW,CAETtW,EADcsW,EAAU94B,OAE1B+4B,GAAeV,EAAWH,YAAYniD,IACtCsiD,EAAWH,YAAYniD,GAAK,MAE5B8iD,GAAU,GAKZA,IACFR,EAAWH,YAAc,IAG3BG,EAAWF,iBACb,CAUA,SAASY,GAAeD,GACtB,IAAK,IAAI/iD,EAAI,EAAGA,EAAI+iD,EAAUtY,OAAOttC,OAAQ6C,IAAK,CAChD,MAAM+oB,EAAYg6B,EAAUtY,OAAOzqC,GACnC,GAAkB,OAAd+oB,EAAoB,CACtBg6B,EAAUtY,OAAOzqC,GAAK,KACtB,MAAMijD,EAAUl6B,EAAUm6B,iBACtB/yC,GACF3R,EAAI,UAAYuqB,EAAU7Z,YAE5BoE,EAAe2vC,IAGrB,CCpDA,MAAME,GAAmB,iBAOnBC,GAA0B,SA+CnBC,GA0BX3lD,WAAAA,CACSmmB,EACAy/B,EACAx2B,EACAy2B,GAHA,KAAS1/B,UAATA,EACA,KAAgBy/B,iBAAhBA,EACA,KAAkBx2B,mBAAlBA,EACA,KAAiBy2B,kBAAjBA,EA1BT,KAAeC,gBAAG,EAKlB,KAAchb,eAAyB,KACvC,KAAAib,YAAc,IAAIvB,GAClB,KAAYwB,aAAG,EAIf,KAA4BC,6BAA6C,KAGzE,KAAa5pC,cAAuButB,KAGpC,KAAAsc,sBAAwB,IAAItE,GAG5B,KAAqBuE,sBAAgC,KASnD9lD,KAAK+L,IAAM/L,KAAK8lB,UAAU1M,cAM5BjI,QAAAA,GACE,OACGnR,KAAK8lB,UAAUzN,OAAS,WAAa,WAAarY,KAAK8lB,UAAU3e,eAKxD4+C,GACdC,EACAC,EACAC,GAIA,GAFAF,EAAKtqC,OAASxB,GAA0B8rC,EAAKlgC,WAEzCkgC,EAAKT,mB/D0WY,kBAAXr/C,QACNA,OAAkB,WAClBA,OAAkB,UAAa,WACjC,IAOUigD,OACR,6FACG,E+DrXLH,EAAKzb,QAAU,IAAIhC,GACjByd,EAAKlgC,WACL,CACE8D,EACAhe,EACAw6C,EACA30B,KAEA40B,GAAiBL,EAAMp8B,EAAYhe,EAAMw6C,EAAS30B,EAAI,GAExDu0B,EAAKj3B,mBACLi3B,EAAKR,mBAIPhwC,YAAW,IAAM8wC,GAAoBN,GAA2B,IAAO,OAClE,CAEL,GAA4B,qBAAjBE,GAAiD,OAAjBA,EAAuB,CAChE,GAA4B,kBAAjBA,EACT,MAAM,IAAIjnD,MACR,sEAGJ,KACEuK,EAAAA,EAAAA,IAAU08C,GACV,MAAO7gD,GACP,MAAM,IAAIpG,MAAM,kCAAoCoG,IAIxD2gD,EAAKF,sBAAwB,IAAIn3B,GAC/Bq3B,EAAKlgC,UACLmgC,GACA,CACEr8B,EACAhe,EACAw6C,EACA30B,KAEA40B,GAAiBL,EAAMp8B,EAAYhe,EAAMw6C,EAAS30B,EAAI,IAEvD80B,IACCD,GAAoBN,EAAMO,EAAc,IAEzCjW,KAmKP,SAAgC0V,EAAY1V,GAC1Ct8B,EAAKs8B,GAAS,CAACvkC,EAAaxG,KAC1BihD,GAAeR,EAAMj6C,EAAKxG,EAAM,GAEpC,CAtKQkhD,CAAuBT,EAAM1V,EAAQ,GAEvC0V,EAAKj3B,mBACLi3B,EAAKR,kBACLU,GAGFF,EAAKzb,QAAUyb,EAAKF,sBAGtBE,EAAKj3B,mBAAmBlY,wBAAuBrO,IAC7Cw9C,EAAKzb,QAAQvgB,iBAAiBxhB,EAAM,IAGtCw9C,EAAKR,kBAAkB3uC,wBAAuBpM,IAC5Cu7C,EAAKzb,QAAQtgB,qBAAqBxf,EAAOjC,MAAM,IAKjDw9C,EAAKU,ezD1PS,SACdltC,EACAmtC,GAEA,MAAMxsC,EAAaX,EAASrI,WAM5B,OAJK8I,GAAUE,KACbF,GAAUE,GAAcwsC,KAGnB1sC,GAAUE,EACnB,CyD+OwBysC,CACpBZ,EAAKlgC,WACL,IAAM,IAAIukB,GAAc2b,EAAKtqC,OAAQsqC,EAAKzb,WAI5Cyb,EAAKa,UAAY,IAAI3d,GACrB8c,EAAKc,cAAgB,IAAIvL,GAAS,CAChCgC,eAAgBA,CAACjkC,EAAOmY,EAAKD,EAAe3H,KAC1C,IAAIk9B,EAAsB,GAC1B,MAAMhxB,EAAOiwB,EAAKa,UAAUzd,QAAQ9vB,EAAM4X,OAa1C,OAVK6E,EAAKhpB,YACRg6C,EAAavK,GACXwJ,EAAKc,cACLxtC,EAAM4X,MACN6E,GAEFvgB,YAAW,KACTqU,EAAW,KAAK,GACf,IAEEk9B,CAAU,EAEnBpJ,cAAeA,SAEjB6I,GAAeR,EAAM,aAAa,GAElCA,EAAKgB,gBAAkB,IAAIzL,GAAS,CAClCgC,eAAgBA,CAACjkC,EAAOmY,EAAKD,EAAe3H,KAC1Cm8B,EAAKzb,QAAQhZ,OAAOjY,EAAOkY,EAAeC,GAAK,CAACW,EAAQxmB,KACtD,MAAM8gC,EAAS7iB,EAAWuI,EAAQxmB,GAClC+4C,GACEqB,EAAKN,YACLpsC,EAAM4X,MACNwb,EACD,IAGI,IAETiR,cAAeA,CAACrkC,EAAOmY,KACrBu0B,EAAKzb,QAAQnX,SAAS9Z,EAAOmY,EAAI,GAGvC,CAKM,SAAUw1B,GAAejB,GAC7B,MACM92C,EADa82C,EAAKa,UAAUzd,QAAQ,IAAI1d,GAAK,2BACxBzrB,OAAoB,EAC/C,OAAO,IAAInB,MAAO+G,UAAYqJ,CAChC,CAKM,SAAUg4C,GAAyBlB,GACvC,OAAOxF,GAAmB,CACxBr3B,UAAW89B,GAAejB,IAE9B,CAKA,SAASK,GACPL,EACAp8B,EACAhe,EACAw6C,EACA30B,GAGAu0B,EAAKP,kBACL,MAAMv5B,EAAO,IAAIR,GAAK9B,GACtBhe,EAAOo6C,EAAKJ,6BACRI,EAAKJ,6BAA6Bh8B,EAAYhe,GAC9CA,EACJ,IAAI8gC,EAAS,GACb,GAAIjb,EACF,GAAI20B,EAAS,CACX,MAAMe,GAAiBn6C,EAAAA,EAAAA,IACrBpB,GACCw7C,GAAiBnlB,GAAamlB,KAEjC1a,ELkGA,SACJoP,EACA5vB,EACA2pB,EACApkB,GAEA,MAAM2sB,EAAWC,GAAwBvC,EAAUrqB,GACnD,GAAI2sB,EAAU,CACZ,MAAMttB,EAAIwtB,GAAuBF,GAC3BG,EAAYztB,EAAE5E,KAClBwF,EAAUZ,EAAEY,QACR+c,EAAe1hB,GAAgBwxB,EAAWryB,GAC1CkwB,EAAa/N,GAAcC,WAAWuH,GAM5C,OAAO2I,GAA8B1C,EAAUyC,EALpC,IAAI3S,GACbd,GAAoCpZ,GACpC+c,EACA2N,IAKF,MAAO,EAEX,CKzHeiL,CACPrB,EAAKgB,gBACL96B,EACAi7B,EACA11B,OAEG,CACL,MAAM61B,EAAarlB,GAAar2B,GAChC8gC,EAASyR,GACP6H,EAAKgB,gBACL96B,EACAo7B,EACA71B,QAGC,GAAI20B,EAAS,CAClB,MAAMvQ,GAAkB7oC,EAAAA,EAAAA,IACtBpB,GACCw7C,GAAiBnlB,GAAamlB,KAEjC1a,WLnIFoP,EACA5vB,EACA2pB,GAEA,MAAMuG,EAAa/N,GAAcC,WAAWuH,GAE5C,OAAOoG,GACLH,EACA,IAAIlQ,GhBlNC,CACLb,UAAU,EACVC,YAAY,EACZtZ,QAAS,KACTuZ,QAAQ,GgB8M8B/e,EAAMkwB,GAEhD,CKyHamL,CACPvB,EAAKgB,gBACL96B,EACA2pB,OAEG,CACL,MAAMjT,EAAOX,GAAar2B,GAC1B8gC,EAAS8P,GAA6BwJ,EAAKgB,gBAAiB96B,EAAM0W,GAEpE,IAAIc,EAAexX,EACfwgB,EAAOttC,OAAS,IAGlBskC,EAAe8jB,GAAsBxB,EAAM95B,IAE7Cy4B,GAAoCqB,EAAKN,YAAahiB,EAAcgJ,EACtE,CAUA,SAAS4Z,GAAoBN,EAAYO,GACvCC,GAAeR,EAAM,YAAaO,IACZ,IAAlBA,GAyPN,SAAmCP,GACjCyB,GAAQzB,EAAM,sBAEd,MAAMrF,EAAeuG,GAAyBlB,GACxC0B,EAA2Bne,KACjCI,GACEqc,EAAKhqC,cACLgQ,MACA,CAACE,EAAM6J,KACL,MAAM4xB,EAAW1G,GACf/0B,EACA6J,EACAiwB,EAAKgB,gBACLrG,GAEFnX,GAA2Bke,EAA0Bx7B,EAAMy7B,EAAS,IAGxE,IAAIjb,EAAkB,GAEtB/C,GACE+d,EACA17B,MACA,CAACE,EAAM0W,KACL8J,EAASA,EAAO6M,OACdiD,GAA6BwJ,EAAKgB,gBAAiB96B,EAAM0W,IAE3D,MAAMc,EAAekkB,GAAsB5B,EAAM95B,GACjDs7B,GAAsBxB,EAAMtiB,EAAa,IAI7CsiB,EAAKhqC,cAAgButB,KACrBob,GAAoCqB,EAAKN,YAAa15B,KAAgB0gB,EACxE,CA1RImb,CAA0B7B,EAE9B,CAQA,SAASQ,GAAeR,EAAYp8B,EAAoBrkB,GACtD,MAAM2mB,EAAO,IAAIR,GAAK,UAAY9B,GAC5B0M,EAAU2L,GAAa18B,GAC7BygD,EAAKa,UAAUxd,eAAend,EAAMoK,GACpC,MAAMoW,EAAS8P,GACbwJ,EAAKc,cACL56B,EACAoK,GAEFquB,GAAoCqB,EAAKN,YAAax5B,EAAMwgB,EAC9D,CAEA,SAASob,GAAmB9B,GAC1B,OAAOA,EAAKL,cACd,CA4FM,SAAUoC,GACd/B,EACA95B,EACA87B,EACA1nB,EACAzW,GAEA49B,GAAQzB,EAAM,MAAO,CACnB95B,KAAMA,EAAK/a,WACX5L,MAAOyiD,EACP3tB,SAAUiG,IAKZ,MAAMqgB,EAAeuG,GAAyBlB,GACxCiC,EAAoBhmB,GAAa+lB,EAAQ1nB,GACzC+Y,EAAW+F,GAA+B4G,EAAKgB,gBAAiB96B,GAChEoK,EAAU6qB,GACd8G,EACA5O,EACAsH,GAGIrP,EAAUwW,GAAmB9B,GAC7BtZ,EAASmP,GACbmK,EAAKgB,gBACL96B,EACAoK,EACAgb,GACA,GAEFgT,GAAsB0B,EAAKN,YAAahZ,GACxCsZ,EAAKzb,QAAQ5gB,IACXuC,EAAK/a,WACL82C,EAAkBhoD,KAAgB,IAClC,CAACmyB,EAAQwB,KACP,MAAMs0B,EAAqB,OAAX91B,EACX81B,GACHnnD,EAAK,UAAYmrB,EAAO,YAAckG,GAGxC,MAAM+1B,EAAc9L,GAClB2J,EAAKgB,gBACL1V,GACC4W,GAEHvD,GAAoCqB,EAAKN,YAAax5B,EAAMi8B,GAC5DC,GAA2BpC,EAAMn8B,EAAYuI,EAAQwB,EAAY,IAGrE,MAAM8P,EAAekkB,GAAsB5B,EAAM95B,GACjDs7B,GAAsBxB,EAAMtiB,GAE5BihB,GAAoCqB,EAAKN,YAAahiB,EAAc,GACtE,CAkPM,SAAU2kB,GAAcrC,GACxBA,EAAKF,uBACPE,EAAKF,sBAAsB1wB,UAAUgwB,GAEzC,CA4CA,SAASqC,GAAQzB,GACf,IAAIpzC,EAAS,GACTozC,EAAKF,wBACPlzC,EAASozC,EAAKF,sBAAsBh0C,GAAK,KAC1C,QAAA3Q,EAAAhC,UAAAC,OAJ6BsT,EAAkB,IAAApT,MAAA6B,EAAA,EAAAA,EAAA,KAAAmnD,EAAA,EAAAA,EAAAnnD,EAAAmnD,IAAlB51C,EAAkB41C,EAAA,GAAAnpD,UAAAmpD,GAKhD7nD,EAAImS,KAAWF,EACjB,CAEM,SAAU01C,GACdpC,EACA39C,EACA+pB,EACAwB,GAEIvrB,GACFkN,GAAe,KACb,GAAe,OAAX6c,EACF/pB,EAAS,UACJ,CACL,MAAM0C,GAAQqnB,GAAU,SAAS6tB,cACjC,IAAIt+C,EAAUoJ,EACV6oB,IACFjyB,GAAW,KAAOiyB,GAGpB,MAAM1yB,EAAQ,IAAIjC,MAAM0C,GAGvBT,EAAc6J,KAAOA,EACtB1C,EAASnH,MAIjB,CA6HA,SAASqnD,GACPvC,EACA95B,EACAs8B,GAEA,OACEpJ,GAA+B4G,EAAKgB,gBAAiB96B,EAAMs8B,IAC3DvoB,GAAajI,UAEjB,CAWA,SAASywB,GACPzC,GACsD,IAAtDjwB,EAA4B52B,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAA6mD,EAAKH,sBAOjC,GAJK9vB,GACH2yB,GAAwC1C,EAAMjwB,GAG5C6rB,GAAa7rB,GAAO,CACtB,MAAM4yB,EAAQC,GAA0B5C,EAAMjwB,IAC9Ct0B,EAAAA,EAAAA,IAAOknD,EAAMvpD,OAAS,EAAG,yCAEVupD,EAAME,OAClBC,GAAoD,IAAvBA,EAAY12B,UAqBhD,SACE4zB,EACA95B,EACAy8B,GAGA,MAAMI,EAAeJ,EAAM37C,KAAIg8C,GACtBA,EAAIC,iBAEPC,EAAcX,GAAmBvC,EAAM95B,EAAM68B,GACnD,IAAII,EAAaD,EACjB,MAAME,EAAaF,EAAYp/B,OAC/B,IAAK,IAAI7nB,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IAAK,CACrC,MAAM+mD,EAAML,EAAM1mD,IAClBR,EAAAA,EAAAA,IACiB,IAAfunD,EAAI52B,OACJ,iEAEF42B,EAAI52B,OAAS,EACb42B,EAAIK,aACJ,MAAM5a,EAAe1hB,GAAgBb,EAAM88B,EAAI98B,MAE/Ci9B,EAAaA,EAAWxtB,YACtB8S,EACAua,EAAIM,0BAIR,MAAMC,EAAaJ,EAAWlpD,KAAI,GAC5BupD,EAAat9B,EAGnB85B,EAAKzb,QAAQ5gB,IACX6/B,EAAWr4C,WACXo4C,GACCn3B,IACCq1B,GAAQzB,EAAM,2BAA4B,CACxC95B,KAAMs9B,EAAWr4C,WACjBihB,WAGF,IAAIsa,EAAkB,GACtB,GAAe,OAAXta,EAAiB,CAInB,MAAMq3B,EAAY,GAClB,IAAK,IAAIxnD,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IAChC0mD,EAAM1mD,GAAGmwB,OAAS,EAClBsa,EAASA,EAAO6M,OACd8C,GAAqB2J,EAAKgB,gBAAiB2B,EAAM1mD,GAAGgnD,iBAElDN,EAAM1mD,GAAG4nB,YAGX4/B,EAAU1pD,MAAK,IACb4oD,EAAM1mD,GAAG4nB,WACP,MACA,EACA8+B,EAAM1mD,GAAGynD,iCAIff,EAAM1mD,GAAG0nD,YAIXjB,GACE1C,EACAtE,GAAYsE,EAAKH,sBAAuB35B,IAG1Cu8B,GAA0BzC,EAAMA,EAAKH,uBAErClB,GAAoCqB,EAAKN,YAAax5B,EAAMwgB,GAG5D,IAAK,IAAIzqC,EAAI,EAAGA,EAAIwnD,EAAUrqD,OAAQ6C,IACpCsT,EAAek0C,EAAUxnD,QAEtB,CAEL,GAAe,cAAXmwB,EACF,IAAK,IAAInwB,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IACR,IAApB0mD,EAAM1mD,GAAGmwB,OACXu2B,EAAM1mD,GAAGmwB,OAAS,EAElBu2B,EAAM1mD,GAAGmwB,OAAS,MAGjB,CACLrxB,EACE,kBAAoByoD,EAAWr4C,WAAa,YAAcihB,GAE5D,IAAK,IAAInwB,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IAChC0mD,EAAM1mD,GAAGmwB,OAAS,EAClBu2B,EAAM1mD,GAAG2nD,YAAcx3B,EAI3Bo1B,GAAsBxB,EAAM95B,MAGhCk9B,EAEJ,CAzHMS,CAAyB7D,EAAM5D,GAAYrsB,GAAO4yB,QAE3C5G,GAAgBhsB,IACzBisB,GAAiBjsB,GAAMyF,IACrBitB,GAA0BzC,EAAMxqB,EAAU,GAGhD,CA+HA,SAASgsB,GAAsBxB,EAAYpB,GACzC,MAAMkF,EAA0BC,GAC9B/D,EACApB,GAEI14B,EAAOk2B,GAAY0H,GAKzB,OAUF,SACE9D,EACA2C,EACAz8B,GAEA,GAAqB,IAAjBy8B,EAAMvpD,OACR,OAMF,MAAMqqD,EAAY,GAClB,IAAI/c,EAAkB,GAEtB,MAAMsd,EAAcrB,EAAM5b,QAAO5b,GACX,IAAbA,EAAEiB,SAEL22B,EAAeiB,EAAYh9C,KAAImkB,GAC5BA,EAAE83B,iBAEX,IAAK,IAAIhnD,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IAAK,CACrC,MAAM6mD,EAAcH,EAAM1mD,GACpBwsC,EAAe1hB,GAAgBb,EAAM48B,EAAY58B,MACvD,IACE09B,EADEK,GAAmB,EAOvB,IALAxoD,EAAAA,EAAAA,IACmB,OAAjBgtC,EACA,iEAGyB,IAAvBqa,EAAY12B,OACd63B,GAAmB,EACnBL,EAAcd,EAAYc,YAC1Bld,EAASA,EAAO6M,OACd8C,GACE2J,EAAKgB,gBACL8B,EAAYG,gBACZ,SAGC,GAA2B,IAAvBH,EAAY12B,OACrB,GAAI02B,EAAYO,YAAchE,GAC5B4E,GAAmB,EACnBL,EAAc,WACdld,EAASA,EAAO6M,OACd8C,GACE2J,EAAKgB,gBACL8B,EAAYG,gBACZ,QAGC,CAEL,MAAMiB,EAAc3B,GAClBvC,EACA8C,EAAY58B,KACZ68B,GAEFD,EAAYqB,qBAAuBD,EACnC,MAAMnO,EAAU4M,EAAM1mD,GAAGsN,OAAO26C,EAAYjqD,OAC5C,QAAgBwF,IAAZs2C,EAAuB,CACzBiH,GACE,qCACAjH,EACA+M,EAAY58B,MAEd,IAAIk+B,EAAcnoB,GAAa8Z,GAEV,kBAAZA,GACI,MAAXA,IACApvC,EAAAA,EAAAA,IAASovC,EAAS,eAGlBqO,EAAcA,EAAYnvB,eAAeivB,EAAYzvB,gBAGvD,MAAM4vB,EAAavB,EAAYG,eACzBtI,EAAeuG,GAAyBlB,GACxCsE,EAAkBnJ,GACtBiJ,EACAF,EACAvJ,GAGFmI,EAAYQ,yBAA2Bc,EACvCtB,EAAYY,8BAAgCY,EAC5CxB,EAAYG,eAAiBnB,GAAmB9B,GAEhD+C,EAAa59B,OAAO49B,EAAahwC,QAAQsxC,GAAa,GACtD3d,EAASA,EAAO6M,OACdsC,GACEmK,EAAKgB,gBACL8B,EAAY58B,KACZo+B,EACAxB,EAAYG,eACZH,EAAYyB,eAGhB7d,EAASA,EAAO6M,OACd8C,GAAqB2J,EAAKgB,gBAAiBqD,GAAY,SAGzDJ,GAAmB,EACnBL,EAAc,SACdld,EAASA,EAAO6M,OACd8C,GACE2J,EAAKgB,gBACL8B,EAAYG,gBACZ,IAMVtE,GAAoCqB,EAAKN,YAAax5B,EAAMwgB,GAC5DA,EAAS,GACLud,IAEFtB,EAAM1mD,GAAGmwB,OAAS,EAKPu3B,EAERhB,EAAM1mD,GAAG0nD,UADVn0C,WAAWm0C,EAAWp1C,KAAKI,MAAM,IAG/Bg0C,EAAM1mD,GAAG4nB,aACS,WAAhB+/B,EACFH,EAAU1pD,MAAK,IACb4oD,EAAM1mD,GAAG4nB,WAAW,MAAM,EAAO8+B,EAAM1mD,GAAGkoD,wBAG5CV,EAAU1pD,MAAK,IACb4oD,EAAM1mD,GAAG4nB,WAAW,IAAI5qB,MAAM2qD,IAAc,EAAO,UAXzD,IAAWD,EAmBfjB,GAAwC1C,EAAMA,EAAKH,uBAGnD,IAAK,IAAI5jD,EAAI,EAAGA,EAAIwnD,EAAUrqD,OAAQ6C,IACpCsT,EAAek0C,EAAUxnD,IAI3BwmD,GAA0BzC,EAAMA,EAAKH,sBACvC,CApKE2E,CAA0BxE,EADZ4C,GAA0B5C,EAAM8D,GACP59B,GAEhCA,CACT,CA2KA,SAAS69B,GACP/D,EACA95B,GAEA,IAAI0P,EAIA6uB,EAAkBzE,EAAKH,sBAE3B,IADAjqB,EAAQ3P,GAAaC,GACJ,OAAV0P,QAAoDn2B,IAAlCm8C,GAAa6I,IACpCA,EAAkB/I,GAAY+I,EAAiB7uB,GAE/CA,EAAQ3P,GADRC,EAAOE,GAAaF,IAItB,OAAOu+B,CACT,CASA,SAAS7B,GACP5C,EACAyE,GAGA,MAAMC,EAAkC,GAUxC,OATAC,GACE3E,EACAyE,EACAC,GAIFA,EAAiB/2C,MAAK,CAACtG,EAAGC,IAAMD,EAAEu9C,MAAQt9C,EAAEs9C,QAErCF,CACT,CAEA,SAASC,GACP3E,EACAjwB,EACA4yB,GAEA,MAAMkC,EAAYjJ,GAAa7rB,GAC/B,GAAI80B,EACF,IAAK,IAAI5oD,EAAI,EAAGA,EAAI4oD,EAAUzrD,OAAQ6C,IACpC0mD,EAAM5oD,KAAK8qD,EAAU5oD,IAIzB+/C,GAAiBjsB,GAAMqK,IACrBuqB,GAAsC3E,EAAM5lB,EAAOuoB,EAAM,GAE7D,CAKA,SAASD,GACP1C,EACAjwB,GAEA,MAAM4yB,EAAQ/G,GAAa7rB,GAC3B,GAAI4yB,EAAO,CACT,IAAImC,EAAK,EACT,IAAK,IAAIpW,EAAO,EAAGA,EAAOiU,EAAMvpD,OAAQs1C,IACX,IAAvBiU,EAAMjU,GAAMtiB,SACdu2B,EAAMmC,GAAMnC,EAAMjU,GAClBoW,KAGJnC,EAAMvpD,OAAS0rD,EACfjJ,GAAa9rB,EAAM4yB,EAAMvpD,OAAS,EAAIupD,OAAQljD,GAGhDu8C,GAAiBjsB,GAAMyF,IACrBktB,GAAwC1C,EAAMxqB,EAAU,GAE5D,CASA,SAASosB,GAAsB5B,EAAY95B,GACzC,MAAMwX,EAAe0e,GAAY2H,GAA+B/D,EAAM95B,IAEhEu+B,EAAkB/I,GAAYsE,EAAKH,sBAAuB35B,GAYhE,gBHj0CA4d,EACAnZ,EACAuxB,GAEA,IAAInsB,EAAOmsB,EAAcpY,EAAOA,EAAK0X,OACrC,KAAgB,OAATzrB,GAAe,CACpB,GAAIpF,EAAOoF,GACT,OAAO,EAETA,EAAOA,EAAKyrB,OAGhB,CG2yCEuJ,CAAoBN,GAAkB10B,IACpCi1B,GAA4BhF,EAAMjwB,EAAK,IAGzCi1B,GAA4BhF,EAAMyE,GAElCxI,GAAsBwI,GAAkB10B,IACtCi1B,GAA4BhF,EAAMjwB,EAAK,IAGlC2N,CACT,CAOA,SAASsnB,GACPhF,EACAjwB,GAEA,MAAM4yB,EAAQ/G,GAAa7rB,GAC3B,GAAI4yB,EAAO,CAIT,MAAMc,EAAY,GAIlB,IAAI/c,EAAkB,GAClBue,GAAY,EAChB,IAAK,IAAIhpD,EAAI,EAAGA,EAAI0mD,EAAMvpD,OAAQ6C,IACR,IAApB0mD,EAAM1mD,GAAGmwB,SAEkB,IAApBu2B,EAAM1mD,GAAGmwB,SAClB3wB,EAAAA,EAAAA,IACEwpD,IAAahpD,EAAI,EACjB,mDAEFgpD,EAAWhpD,EAEX0mD,EAAM1mD,GAAGmwB,OAAS,EAClBu2B,EAAM1mD,GAAG2nD,YAAc,SAEvBnoD,EAAAA,EAAAA,IAC2C,IAAzCknD,EAAM1mD,GAAGmwB,OACT,0CAGFu2B,EAAM1mD,GAAG0nD,YACTjd,EAASA,EAAO6M,OACd8C,GACE2J,EAAKgB,gBACL2B,EAAM1mD,GAAGgnD,gBACT,IAGAN,EAAM1mD,GAAG4nB,YACX4/B,EAAU1pD,KACR4oD,EAAM1mD,GAAG4nB,WAAWpX,KAAK,KAAM,IAAIxT,MAAM,QAAQ,EAAO,UAK9C,IAAdgsD,EAEFpJ,GAAa9rB,OAAMtwB,GAGnBkjD,EAAMvpD,OAAS6rD,EAAW,EAI5BtG,GACEqB,EAAKN,YACLtD,GAAYrsB,GACZ2W,GAEF,IAAK,IAAIzqC,EAAI,EAAGA,EAAIwnD,EAAUrqD,OAAQ6C,IACpCsT,EAAek0C,EAAUxnD,IAG/B,CCh/CO,MAAMipD,GAAgB,SAC3BC,EACA3yC,GAEA,MAAMyrC,EAAYmH,GAAiBD,GACjC7yC,EAAY2rC,EAAU3rC,UAEC,iBAArB2rC,EAAU/jC,QACZrN,EACEoxC,EAAU98C,KAAV88C,8EAQA3rC,GAA2B,cAAdA,GACM,cAArB2rC,EAAU/jC,QAEVrN,EACE,gFAICoxC,EAAU5rC,QhEiFK,qBAAXnS,QACPA,OAAOyX,UACPzX,OAAOyX,SAAStE,WACgC,IAAhDnT,OAAOyX,SAAStE,SAASN,QAAQ,WAEjChY,EACE,6FgEnFJ,MAAMwX,EAAqC,OAArB0rC,EAAUoH,QAAwC,QAArBpH,EAAUoH,OAE7D,MAAO,CACL7xC,SAAU,IAAIpB,EACZ6rC,EAAU98C,KACV88C,EAAU5rC,OACVC,EACAC,EACAC,EACoB,GACeF,IAAc2rC,EAAUqH,WAE7Dp/B,KAAM,IAAIR,GAAKu4B,EAAUr6B,YAE7B,EAEawhC,GAAmB,SAAUD,GAWxC,IAAIhkD,EAAO,GACT+Y,EAAS,GACTorC,EAAY,GACZ1hC,EAAa,GACbtR,EAAY,GAGVD,GAAS,EACXgzC,EAAS,QACT3jD,EAAO,IAGT,GAAuB,kBAAZyjD,EAAsB,CAE/B,IAAII,EAAWJ,EAAQpyC,QAAQ,MAC3BwyC,GAAY,IACdF,EAASF,EAAQvjD,UAAU,EAAG2jD,EAAW,GACzCJ,EAAUA,EAAQvjD,UAAU2jD,EAAW,IAIzC,IAAIC,EAAWL,EAAQpyC,QAAQ,MACb,IAAdyyC,IACFA,EAAWL,EAAQ/rD,QAErB,IAAIqsD,EAAkBN,EAAQpyC,QAAQ,MACb,IAArB0yC,IACFA,EAAkBN,EAAQ/rD,QAE5B+H,EAAOgkD,EAAQvjD,UAAU,EAAG2M,KAAKG,IAAI82C,EAAUC,IAC3CD,EAAWC,IAEb7hC,EA7HN,SAAoBA,GAClB,IAAI8hC,EAAoB,GACxB,MAAMh/B,EAAS9C,EAAWpd,MAAM,KAChC,IAAK,IAAIvK,EAAI,EAAGA,EAAIyqB,EAAOttB,OAAQ6C,IACjC,GAAIyqB,EAAOzqB,GAAG7C,OAAS,EAAG,CACxB,IAAIusD,EAAQj/B,EAAOzqB,GACnB,IACE0pD,EAAQC,mBAAmBD,EAAMxmD,QAAQ,MAAO,MAChD,MAAOE,GAAI,CACbqmD,GAAqB,IAAMC,EAG/B,OAAOD,CACT,CAgHmBG,CAAWV,EAAQvjD,UAAU4jD,EAAUC,KAEtD,MAAMzjB,EA7GV,SAAqB8jB,GACnB,MAAMC,EAAU,CAAC,EACa,MAA1BD,EAAYjnD,OAAO,KACrBinD,EAAcA,EAAYlkD,UAAU,IAEtC,IAAK,MAAMokD,KAAWF,EAAYt/C,MAAM,KAAM,CAC5C,GAAuB,IAAnBw/C,EAAQ5sD,OACV,SAEF,MAAM6sD,EAAKD,EAAQx/C,MAAM,KACP,IAAdy/C,EAAG7sD,OACL2sD,EAAQH,mBAAmBK,EAAG,KAAOL,mBAAmBK,EAAG,IAE3DlrD,EAAK,0BAA0BirD,gBAAsBF,MAGzD,OAAOC,CACT,CA4FwBG,CAClBf,EAAQvjD,UAAU2M,KAAKG,IAAIy2C,EAAQ/rD,OAAQqsD,KAI7CF,EAAWpkD,EAAK4R,QAAQ,KACpBwyC,GAAY,GACdlzC,EAAoB,UAAXgzC,GAAiC,QAAXA,EAC/B3jD,EAAOC,SAASR,EAAKS,UAAU2jD,EAAW,GAAI,KAE9CA,EAAWpkD,EAAK/H,OAGlB,MAAM+sD,EAAkBhlD,EAAKqlB,MAAM,EAAG++B,GACtC,GAAsC,cAAlCY,EAAgBh3C,cAClB+K,EAAS,iBACJ,GAAIisC,EAAgB3/C,MAAM,KAAKpN,QAAU,EAC9C8gB,EAASisC,MACJ,CAEL,MAAMC,EAASjlD,EAAK4R,QAAQ,KAC5BuyC,EAAYnkD,EAAKS,UAAU,EAAGwkD,GAAQj3C,cACtC+K,EAAS/Y,EAAKS,UAAUwkD,EAAS,GAEjC9zC,EAAYgzC,EAGV,OAAQtjB,IACV1vB,EAAY0vB,EAAgB,IAIhC,MAAO,CACL7gC,OACAO,OACAwY,SACAorC,YACAjzC,SACAgzC,SACAzhC,aACAtR,YAEJ,EClKM+zC,GACJ,mEAsBWC,GAAc,WAGzB,IAAIC,EAAe,EAMnB,MAAMC,EAA0B,GAEhC,OAAO,SAAU3tD,GACf,MAAM4tD,EAAgB5tD,IAAQ0tD,EAG9B,IAAItqD,EAFJsqD,EAAe1tD,EAGf,MAAM6tD,EAAiB,IAAIptD,MAAM,GACjC,IAAK2C,EAAI,EAAGA,GAAK,EAAGA,IAClByqD,EAAezqD,GAAKoqD,GAAWxnD,OAAOhG,EAAM,IAG5CA,EAAM0V,KAAKI,MAAM9V,EAAM,KAEzB4C,EAAAA,EAAAA,IAAe,IAAR5C,EAAW,4BAElB,IAAIiT,EAAK46C,EAAe5oD,KAAK,IAE7B,GAAK2oD,EAIE,CAGL,IAAKxqD,EAAI,GAAIA,GAAK,GAA0B,KAArBuqD,EAAcvqD,GAAWA,IAC9CuqD,EAAcvqD,GAAK,EAErBuqD,EAAcvqD,UATd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClBuqD,EAAcvqD,GAAKsS,KAAKI,MAAsB,GAAhBJ,KAAKkJ,UAUvC,IAAKxb,EAAI,EAAGA,EAAI,GAAIA,IAClB6P,GAAMu6C,GAAWxnD,OAAO2nD,EAAcvqD,IAIxC,OAFAR,EAAAA,EAAAA,IAAqB,KAAdqQ,EAAG1S,OAAe,oCAElB0S,CACT,CACF,CA9C2B,SCCd66C,GAOXhtD,WAAAA,CACSgrB,EACAouB,EACA6T,EACAvf,GAHA,KAAS1iB,UAATA,EACA,KAAiBouB,kBAAjBA,EACA,KAAQ6T,SAARA,EACA,KAAQvf,SAARA,EAETqX,OAAAA,GACE,MAAMmI,EAAM7sD,KAAK4sD,SAASC,IAC1B,MAAuB,UAAnB7sD,KAAK2qB,UACAkiC,EAAI37B,MAEJ27B,EAAIrL,OAAOtwB,MAGtB47B,YAAAA,GACE,OAAO9sD,KAAK2qB,UAEdw6B,cAAAA,GACE,OAAOnlD,KAAK+4C,kBAAkBoM,eAAenlD,MAE/CmR,QAAAA,GACE,OACEnR,KAAK0kD,UAAUvzC,WACf,IACAnR,KAAK2qB,UACL,KACAnhB,EAAAA,EAAAA,IAAUxJ,KAAK4sD,SAASG,oBAKjBC,GACXrtD,WAAAA,CACSo5C,EACA73C,EACAgrB,GAFA,KAAiB6sB,kBAAjBA,EACA,KAAK73C,MAALA,EACA,KAAIgrB,KAAJA,EAETw4B,OAAAA,GACE,OAAO1kD,KAAKksB,KAEd4gC,YAAAA,GACE,MAAO,SAET3H,cAAAA,GACE,OAAOnlD,KAAK+4C,kBAAkBoM,eAAenlD,MAE/CmR,QAAAA,GACE,OAAOnR,KAAKksB,KAAK/a,WAAa,iBC3DrB87C,GACXttD,WAAAA,CACmButD,EACAC,GADA,KAAgBD,iBAAhBA,EACA,KAAcC,eAAdA,EAGnBC,OAAAA,CACEC,EACAC,GAEAttD,KAAKktD,iBAAiBrgD,KAAK,KAAMwgD,EAAiBC,GAGpDC,QAAAA,CAASrsD,GAKP,OAJAO,EAAAA,EAAAA,IACEzB,KAAKwtD,kBACL,gEAEKxtD,KAAKmtD,eAAetgD,KAAK,KAAM3L,GAGxC,qBAAIssD,GACF,QAASxtD,KAAKmtD,eAGhBroB,OAAAA,CAAQnX,GACN,OACE3tB,KAAKktD,mBAAqBv/B,EAAMu/B,uBACQznD,IAAvCzF,KAAKktD,iBAAiBO,cACrBztD,KAAKktD,iBAAiBO,eACpB9/B,EAAMu/B,iBAAiBO,cACzBztD,KAAKktD,iBAAiBriC,UAAY8C,EAAMu/B,iBAAiBriC,eCqBpD6iC,GAIX/tD,WAAAA,CACWq7C,EACA9pB,EACAW,EACA87B,GAHA,KAAK3S,MAALA,EACA,KAAK9pB,MAALA,EACA,KAAYW,aAAZA,EACA,KAAc87B,eAAdA,EAGX,OAAI5hD,GACF,OAAI+gB,GAAY9sB,KAAKkxB,OACZ,KAEA7E,GAAYrsB,KAAKkxB,OAI5B,OAAI27B,GACF,OAAO,IAAIe,GAAc5tD,KAAKg7C,MAAOh7C,KAAKkxB,OAG5C,oBAAIS,GACF,MAAM/kB,EAAMy7B,GAA0BroC,KAAK6xB,cACrC/f,EAAK4B,EAAkB9G,GAC7B,MAAc,OAAPkF,EAAc,UAAYA,EAMnC,gBAAIsf,GACF,OAAOiX,GAA0BroC,KAAK6xB,cAGxCg8B,OAAAA,CAAQlgC,GAEN,MADAA,GAAQvd,EAAAA,EAAAA,IAAmBud,cACJ+/B,IACrB,OAAO,EAGT,MAAMI,EAAW9tD,KAAKg7C,QAAUrtB,EAAMqtB,MAChC+S,EAAWrgC,GAAW1tB,KAAKkxB,MAAOvD,EAAMuD,OACxC88B,EACJhuD,KAAK2xB,mBAAqBhE,EAAMgE,iBAElC,OAAOm8B,GAAYC,GAAYC,EAGjCC,MAAAA,GACE,OAAOjuD,KAAKmR,WAGdA,QAAAA,GACE,OAAOnR,KAAKg7C,MAAM7pC,WrD7ChB,SAAiC+a,GACrC,IAAItC,EAAa,GACjB,IAAK,IAAI3nB,EAAIiqB,EAAKH,UAAW9pB,EAAIiqB,EAAKL,QAAQzsB,OAAQ6C,IAC5B,KAApBiqB,EAAKL,QAAQ5pB,KACf2nB,GAAc,IAAMtb,mBAAmBjK,OAAO6nB,EAAKL,QAAQ5pB,MAI/D,OAAO2nB,GAAc,GACvB,CqDoCmCskC,CAAuBluD,KAAKkxB,QAiGzD,MAAO08B,WAAsBF,GAEjC/tD,WAAAA,CAAYqmD,EAAY95B,GACtBjhB,MAAM+6C,EAAM95B,EAAM,IAAIgb,IAAe,GAGvC,UAAIsa,GACF,MAAM2M,EAAa1hC,GAAWzsB,KAAKkxB,OACnC,OAAsB,OAAfi9B,EACH,KACA,IAAIP,GAAc5tD,KAAKg7C,MAAOmT,GAGpC,QAAInwB,GACF,IAAI6uB,EAAqB7sD,KACzB,KAAsB,OAAf6sD,EAAIrL,QACTqL,EAAMA,EAAIrL,OAEZ,OAAOqL,SAkBEuB,GAOXzuD,WAAAA,CACW0uD,EAIAxB,EACAyB,GALA,KAAKD,MAALA,EAIA,KAAGxB,IAAHA,EACA,KAAMyB,OAANA,EAWX,YAAIj0B,GAEF,OAAOr6B,KAAKquD,MAAM5zB,cAAcx6B,MAYlC,OAAI8L,GACF,OAAO/L,KAAK6sD,IAAI9gD,IAIlB,QAAI+U,GACF,OAAO9gB,KAAKquD,MAAMxyB,cAepBuE,KAAAA,CAAMlU,GACJ,MAAMqiB,EAAY,IAAI7iB,GAAKQ,GACrBqiC,EAAWnuB,GAAMpgC,KAAK6sD,IAAK3gC,GACjC,OAAO,IAAIkiC,GACTpuD,KAAKquD,MAAMhzB,SAASkT,GACpBggB,EACA1xB,IAOJ2xB,MAAAA,GACE,OAAQxuD,KAAKquD,MAAMthD,UAarBggD,SAAAA,GACE,OAAO/sD,KAAKquD,MAAMpuD,KAAI,GAqBxBmO,OAAAA,CAAQuiB,GACN,GAAI3wB,KAAKquD,MAAM7zB,aACb,OAAO,EAKT,QAFqBx6B,KAAKquD,MAEJvyB,aAAa97B,KAAKsuD,QAAQ,CAACviD,EAAKgqB,IAC7CpF,EACL,IAAIy9B,GAAar4B,EAAMqK,GAAMpgC,KAAK6sD,IAAK9gD,GAAM8wB,OAYnDvB,QAAAA,CAASpP,GACP,MAAMqiB,EAAY,IAAI7iB,GAAKQ,GAC3B,OAAQlsB,KAAKquD,MAAMhzB,SAASkT,GAAWxhC,UAezC0hD,WAAAA,GACE,OAAIzuD,KAAKquD,MAAM7zB,eAGLx6B,KAAKquD,MAAMthD,UAOvBkhD,MAAAA,GACE,OAAOjuD,KAAK+sD,YAed9sD,GAAAA,GACE,OAAOD,KAAKquD,MAAMpuD,OAyBN,SAAA4sD,GAAI6B,EAAcxiC,GAGhC,OAFAwiC,GAAKt+C,EAAAA,EAAAA,IAAmBs+C,IACrBC,iBAAiB,YACJlpD,IAATymB,EAAqBkU,GAAMsuB,EAAGE,MAAO1iC,GAAQwiC,EAAGE,KACzD,CAqDgB,SAAAxuB,GACdohB,EACAt1B,GAQA,OALmC,OAA/BD,IADJu1B,GAASpxC,EAAAA,EAAAA,IAAmBoxC,IACJtwB,OACtB4yB,GAAuB,QAAS,OAAQ53B,GAAM,GAE9C03B,GAAmB,QAAS,OAAQ13B,GAAM,GAErC,IAAI0hC,GAAcpM,EAAOxG,MAAOruB,GAAU60B,EAAOtwB,MAAOhF,GACjE,CAyCgB,SAAAnsB,GACdyhD,EACAj8C,GAEAi8C,GAASpxC,EAAAA,EAAAA,IAAmBoxC,GAC5BuC,GAAqB,OAAQvC,EAAOtwB,OACpC6xB,GAAwB,OAAQx9C,EAAOi8C,EAAOtwB,OAAO,GACrD,MAAMryB,EAAMooD,GAAezF,EAAOxG,OAC5Bv7C,EAAO6sD,GAAWztD,GAQlBgwD,EAAkDzuB,GACtDohB,EACA/hD,GAEIqvD,EAAU1uB,GAAMohB,EAAQ/hD,GAE9B,IAAIyI,EASJ,OAPEA,EADW,MAAT3C,EACQoL,GAAIm+C,EAASvpD,GAAOmR,MAAK,IAAMo4C,IAE/B3mD,QAAQF,QAAQ6mD,GAG5BD,EAAgBn4C,KAAOxO,EAAQwO,KAAKjE,KAAKvK,GACzC2mD,EAAgBvmD,MAAQJ,EAAQwO,KAAKjE,KAAKvK,OAASzC,GAC5CopD,CACT,CAkDgB,SAAAl+C,GAAIk8C,EAAwBtnD,GAC1CsnD,GAAMz8C,EAAAA,EAAAA,IAAmBy8C,GACzB9I,GAAqB,MAAO8I,EAAI37B,OAChC6xB,GAAwB,MAAOx9C,EAAOsnD,EAAI37B,OAAO,GACjD,MAAMF,EAAW,IAAIjpB,EAAAA,GAQrB,OAPAggD,GACE8E,EAAI7R,MACJ6R,EAAI37B,MACJ3rB,EACc,KACdyrB,EAAS5oB,cAAa,UAEjB4oB,EAAS9oB,OAClB,CAyGgB,SAAAqH,GAAOs9C,EAAwBj3B,GAC7C0tB,GAA6B,SAAU1tB,EAAQi3B,EAAI37B,OAAO,GAC1D,MAAMF,EAAW,IAAIjpB,EAAAA,GAOrB,OLjNI,SACJi+C,EACA95B,EACA6iC,EACAllC,GAEA49B,GAAQzB,EAAM,SAAU,CAAE95B,KAAMA,EAAK/a,WAAY5L,MAAOwpD,IAGxD,IAAIhf,GAAQ,EACZ,MAAM4Q,EAAeuG,GAAyBlB,GACxCnQ,EAAyC,CAAC,EAWhD,GAVA7hC,EAAK+6C,GAAiB,CAACC,EAAoBC,KACzClf,GAAQ,EACR8F,EAAgBmZ,GAAc/N,GAC5Bt0B,GAAUT,EAAM8iC,GAChB/sB,GAAagtB,GACbjJ,EAAKgB,gBACLrG,EACD,IAGE5Q,EA6CHtvC,EAAI,wDACJ2nD,GAA2BpC,EAAMn8B,EAAY,UAAMpkB,OA9CzC,CACV,MAAM6rC,EAAUwW,GAAmB9B,GAC7BtZ,EAASwP,GACb8J,EAAKgB,gBACL96B,EACA2pB,EACAvE,GAEFgT,GAAsB0B,EAAKN,YAAahZ,GACxCsZ,EAAKzb,QAAQxgB,MACXmC,EAAK/a,WACL49C,GACA,CAAC38B,EAAQwB,KACP,MAAMs0B,EAAqB,OAAX91B,EACX81B,GACHnnD,EAAK,aAAemrB,EAAO,YAAckG,GAG3C,MAAM+1B,EAAc9L,GAClB2J,EAAKgB,gBACL1V,GACC4W,GAEGxkB,EACJykB,EAAY/oD,OAAS,EAAIooD,GAAsBxB,EAAM95B,GAAQA,EAC/Dy4B,GACEqB,EAAKN,YACLhiB,EACAykB,GAEFC,GAA2BpC,EAAMn8B,EAAYuI,EAAQwB,EAAY,IAIrE5f,EAAK+6C,GAAkBnK,IACrB,MAAMlhB,EAAekkB,GACnB5B,EACAr5B,GAAUT,EAAM04B,IAElB4C,GAAsBxB,EAAMtiB,EAAa,IAI3CihB,GAAoCqB,EAAKN,YAAax5B,EAAM,IAKhE,CKqIEgjC,CACErC,EAAI7R,MACJ6R,EAAI37B,MACJ0E,EACA5E,EAAS5oB,cAAa,UAEjB4oB,EAAS9oB,OAClB,CAUM,SAAU6I,GAAIuI,GAClBA,GAAQlJ,EAAAA,EAAAA,IAAmBkJ,GAC3B,MAAM61C,EAAkB,IAAIlC,IAAgB,SACtCmC,EAAY,IAAIC,GAAuBF,GAC7C,gBLnWAnJ,EACA1sC,EACAy/B,GAGA,MAAMuW,EAASjQ,GAAuB2G,EAAKgB,gBAAiB1tC,GAC5D,OAAc,MAAVg2C,EACKnnD,QAAQF,QAAQqnD,GAElBtJ,EAAKzb,QAAQx5B,IAAIuI,GAAO5C,MAC7B3N,IACE,MAAMgtB,EAAOkM,GAAal5B,GAAS2zB,UACjCpjB,EAAMuY,aAAaY,YAerB,IAAIia,EACJ,GAPA+R,GACEuH,EAAKgB,gBACL1tC,EACAy/B,GACA,GAGEz/B,EAAMuY,aAAaE,eACrB2a,EAAS8P,GACPwJ,EAAKgB,gBACL1tC,EAAM4X,MACN6E,OAEG,CACL,MAAMtE,EAAMgsB,GAAoBuI,EAAKgB,gBAAiB1tC,GACtDozB,EAASyR,GACP6H,EAAKgB,gBACL1tC,EAAM4X,MACN6E,EACAtE,GAyBJ,OAZAkzB,GACEqB,EAAKN,YACLpsC,EAAM4X,MACNwb,GAEF+P,GACEuJ,EAAKgB,gBACL1tC,EACAy/B,EACA,MACA,GAEKhjB,CAAI,IAEbw5B,IACE9H,GAAQzB,EAAM,kBAAmBx8C,EAAAA,EAAAA,IAAU8P,GAAS,YAAci2C,GAC3DpnD,QAAQH,OAAO,IAAI/I,MAAMswD,MAGtC,CK2RSC,CAAal2C,EAAM0hC,MAAO1hC,EAAO81C,GAAW14C,MAAKqf,GAC/C,IAAIq4B,GACTr4B,EACA,IAAI63B,GAAct0C,EAAM0hC,MAAO1hC,EAAM4X,OACrC5X,EAAMuY,aAAaY,aAGzB,OAIa48B,GACX1vD,WAAAA,CAAoBwvD,GAAA,KAAeA,gBAAfA,EAEpB3hB,UAAAA,CAAW7iB,GACT,MAAqB,UAAdA,EAGT8iB,WAAAA,CAAYT,EAAgB1zB,GAC1B,MAAM+X,EAAQ/X,EAAMuY,aAAaY,WACjC,OAAO,IAAIk6B,GACT,QACA3sD,KACA,IAAIouD,GACFphB,EAAO9J,aACP,IAAI0qB,GAAct0C,EAAM0hC,MAAO1hC,EAAM4X,OACrCG,IAKN8zB,cAAAA,CAAen6B,GACb,MAAiC,WAA7BA,EAAU8hC,eACL,IACL9sD,KAAKmvD,gBAAgB5B,SAAUviC,EAA0B9pB,OAEpD,IACLlB,KAAKmvD,gBAAgB/B,QAASpiC,EAAwB4hC,SAAU,MAItEzT,iBAAAA,CAAkBj4C,EAAcgrB,GAC9B,OAAIlsB,KAAKmvD,gBAAgB3B,kBAChB,IAAIR,GAAYhtD,KAAMkB,EAAOgrB,GAE7B,KAIX4Y,OAAAA,CAAQnX,GACN,OAAMA,aAAiB0hC,MAEX1hC,EAAMwhC,kBAAoBnvD,KAAKmvD,iBAIlCxhC,EAAMwhC,gBAAgBrqB,QAAQ9kC,KAAKmvD,kBAI9C7V,cAAAA,GACE,OAAgC,OAAzBt5C,KAAKmvD,kBX9yBV,SACJlvD,IAEAwB,EAAAA,EAAAA,KACGo4C,GACD,mDAEFA,GAAuB55C,CACzB,CWgpEAwvD,CAAiC7B,IV/oE3B,SACJ3tD,IAEAwB,EAAAA,EAAAA,KACGq4C,GACD,mDAEFA,GAAuB75C,CACzB,CUwoEAyvD,CAAgC9B,ICzpEhC,MAKM+B,GAIF,CAAC,EAKL,IAAIC,IAAgB,EAgCd,SAAUC,GACd75C,EACA85C,EACA75C,EACAuL,EACAhJ,GAEA,IAAIu3C,EAA4BvuC,GAAOxL,EAAI+M,QAAQitC,iBACrCvqD,IAAVsqD,IACG/5C,EAAI+M,QAAQta,WACfoK,EACE,kHAKJpS,EAAI,kCAAmCuV,EAAI+M,QAAQta,WACnDsnD,EAAQ,GAAG/5C,EAAI+M,QAAQta,yCAGzB,IAGIwnD,EAEAC,EALAjM,EAAYiH,GAAc6E,EAAOv3C,GACjCgB,EAAWyqC,EAAUzqC,SAKF,qBAAZhT,UACT0pD,EAAiB1pD,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAA+C,iCAG9D0pD,GACFD,GAAa,EACbF,EAAQ,UAAUG,QAAqB12C,EAASlB,YAChD2rC,EAAYiH,GAAc6E,EAAOv3C,GACjCgB,EAAWyqC,EAAUzqC,UAErBy2C,GAAchM,EAAUzqC,SAASnB,OAGnC,MAAM83C,EACJ33C,GAAay3C,EACT,IAAIr4C,EAAsBA,EAAsBE,OAChD,IAAIb,EAA0BjB,EAAIvW,KAAMuW,EAAI+M,QAAS+sC,GAE3D9L,GAAY,gCAAiCC,GACxCn3B,GAAYm3B,EAAU/3B,OACzBrZ,EACE,4FAKJ,MAAMmzC,EA8BR,SACExsC,EACAxD,EACAm6C,EACAl6C,GAEA,IAAIm6C,EAAWT,GAAM35C,EAAIvW,MAEpB2wD,IACHA,EAAW,CAAC,EACZT,GAAM35C,EAAIvW,MAAQ2wD,GAGpB,IAAIpK,EAAOoK,EAAS52C,EAASJ,eACzB4sC,GACFnzC,EACE,2HAMJ,OAHAmzC,EAAO,IAAIV,GAAK9rC,EAAUo2C,GAAeO,EAAmBl6C,GAC5Dm6C,EAAS52C,EAASJ,eAAiB4sC,EAE5BA,CACT,CArDeqK,CACX72C,EACAxD,EACAm6C,EACA,IAAIp6C,EAAsBC,EAAKC,IAEjC,OAAO,IAAIq6C,GAAStK,EAAMhwC,EAC5B,OA0Das6C,GAWX3wD,WAAAA,CACS4wD,EAEEv6C,GAFF,KAAau6C,cAAbA,EAEE,KAAGv6C,IAAHA,EAZF,KAAM,KAAG,WAGlB,KAAgBw6C,kBAAY,EAY5B,SAAIxV,GASF,OARKh7C,KAAKwwD,mBACRzK,GACE/lD,KAAKuwD,cACLvwD,KAAKgW,IAAI+M,QAAQkjC,MACjBjmD,KAAKgW,IAAI+M,QAAsC,8BAEjD/iB,KAAKwwD,kBAAmB,GAEnBxwD,KAAKuwD,cAGd,SAAI3B,GAIF,OAHK5uD,KAAKywD,gBACRzwD,KAAKywD,cAAgB,IAAI7C,GAAc5tD,KAAKg7C,MAAOhvB,OAE9ChsB,KAAKywD,cAGdC,OAAAA,GAME,OAL2B,OAAvB1wD,KAAKywD,iBAzFb,SAA+BzK,EAAY9vC,GACzC,MAAMk6C,EAAWT,GAAMz5C,GAElBk6C,GAAYA,EAASpK,EAAKj6C,OAASi6C,GACtCnzC,EAAM,YAAYqD,KAAW8vC,EAAKlgC,wCAEpCuiC,GAAcrC,UACPoK,EAASpK,EAAKj6C,IACvB,CAkFM4kD,CAAsB3wD,KAAKg7C,MAAOh7C,KAAKgW,IAAIvW,MAC3CO,KAAKuwD,cAAgB,KACrBvwD,KAAKywD,cAAgB,MAEhBtoD,QAAQF,UAGjB0mD,gBAAAA,CAAiBiC,GACY,OAAvB5wD,KAAKywD,eACP59C,EAAM,eAAiB+9C,EAAU,qCAyCvBC,KAEF,IADZ76C,EAAA7W,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,IAAmB2xD,EAAAA,EAAAA,MACnBtvC,EAAYriB,UAAAC,OAAA,EAAAD,UAAA,QAAAsG,EAEZ,MAAMipD,GAAKqC,EAAAA,EAAAA,IAAa/6C,EAAK,YAAYQ,aAAa,CACpDw6C,WAAYxvC,IAEd,IAAKktC,EAAG8B,iBAAkB,CACxB,MAAMS,GAAWhqD,EAAAA,EAAAA,IAAkC,YAC/CgqD,GAkBF,SACJvC,EACAvnD,EACAO,GAGM,IAFNqb,EAAA5jB,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAEI,CAAC,EAELuvD,GAAKt+C,EAAAA,EAAAA,IAAmBs+C,GACxBA,EAAGC,iBAAiB,eACpB,MAAMuC,EAAc,GAAG/pD,KAAQO,IACzBs+C,EAAO0I,EAAG6B,cAChB,GAAI7B,EAAG8B,iBAAkB,CAGvB,GACEU,IAAgBxC,EAAG6B,cAAczqC,UAAU3e,OAC3CiG,EAAAA,EAAAA,IAAU2V,EAASijC,EAAKlgC,UAAUlN,iBAElC,OAEF/F,EACE,4HAIJ,IAAIs+C,EACJ,GAAInL,EAAKlgC,UAAUtN,UACbuK,EAAQquC,eACVv+C,EACE,sJAGJs+C,EAAgB,IAAIv5C,EAAsBA,EAAsBE,YAC3D,GAAIiL,EAAQquC,cAAe,CAChC,MAAM5oD,EAC6B,kBAA1Bua,EAAQquC,cACXruC,EAAQquC,eACR7oD,EAAAA,EAAAA,IAAoBwa,EAAQquC,cAAe1C,EAAG14C,IAAI+M,QAAQta,WAChE0oD,EAAgB,IAAIv5C,EAAsBpP,IA1S9C,SACEw9C,EACAkL,EACAt4C,EACAu4C,GAEAnL,EAAKlgC,UAAY,IAAI1N,EACnB84C,GACc,EACdlL,EAAKlgC,UAAUxN,UACf0tC,EAAKlgC,UAAUvN,cACfytC,EAAKlgC,UAAUtN,UACfwtC,EAAKlgC,UAAUrN,eACfutC,EAAKlgC,UAAUpN,+BACM,EACrBE,GAGEu4C,IACFnL,EAAKj3B,mBAAqBoiC,EAE9B,CAyREE,CAAiCrL,EAAMkL,EAAanuC,EAASouC,EAC/D,CA7DMG,CAAwB5C,KAAOuC,GAGnC,OAAOvC,CACT,CCjTC//B,GAAqBxjB,UAAkBomD,aAAe,SACrD3nC,EACAC,GAEA7pB,KAAK4nB,YAAY,IAAK,CAAE5lB,EAAG4nB,GAAcC,EAC3C,EAGC8E,GAAqBxjB,UAAkBqmD,KAAO,SAC7C5lD,EACA6lD,GAEAzxD,KAAK4nB,YAAY,OAAQ,CAAEtY,EAAG1D,GAAQ6lD,EACxC,ECVM,IAA2BC,GAC/BphD,EAAcqhD,EAAAA,KACdC,EAAAA,EAAAA,IACE,IAAIC,EAAAA,GACF,YACA,CAACzC,EAAS0C,KAAiC,IAA7BC,mBAAoBvwC,GAAKswC,EAIrC,OAAOjC,GAHKT,EAAU4C,YAAY,OAAOx7C,eACpB44C,EAAU4C,YAAY,iBAClB5C,EAAU4C,YAAY,sBAK7CxwC,EACD,GACF,UAEDywC,sBAAqB,KAEzBC,EAAAA,EAAAA,IAAgBzyD,EAAM8Q,EAASmhD,KAE/BQ,EAAAA,EAAAA,IAAgBzyD,EAAM8Q,EAAS,wFC9BlB,SAAS4hD,EAOxB1yD,EAAM2yD,GACJ,MAAM,UACJC,EACAC,YAAaC,EAAkB,WAC/BC,EAAU,uBACVC,EAAsB,uBACtBC,EAAsB,2BACtBC,GAA6B,KAC1BC,GACDR,GAEFS,UAAWC,EAAa,MACxBC,EAAQ,CACN,CAACtzD,QAAOgG,GACT,UACDutD,EAAY,CACV,CAACvzD,QAAOgG,MAEPkoB,GACD8kC,EACEH,EAAcS,EAAMtzD,IAAS8yD,EAI7BU,GAA0BC,EAAAA,EAAAA,GAAsBF,EAAUvzD,GAAO+yD,IAErEW,OACEN,UAAWO,KACRC,GACJ,YACDC,IACEC,EAAAA,EAAAA,GAAe,CACjBlB,eACGO,EACHH,uBAAiC,SAAThzD,EAAkBkuB,OAAQloB,EAClD+tD,kBAAmBP,IAEfpG,GAAM4G,EAAAA,EAAAA,GAAWH,EAAaL,GAAyBpG,IAAKuF,EAAWvF,KACvE6G,EAAyB,SAATj0D,EAAkB2zD,GAAiBN,EAAgBM,EAazE,MAAO,CAACd,GAZMqB,EAAAA,EAAAA,GAAiBrB,EAAa,IAC7B,SAAT7yD,IAAoBqzD,IAAkBC,EAAMtzD,IAASizD,KAC5C,SAATjzD,IAAoBszD,EAAMtzD,IAASizD,KACpCW,KACCK,IAAkBf,GAA8B,CAClDiB,GAAIF,MAEFA,GAAiBf,GAA8B,CACjDE,UAAWa,GAEb7G,OACC2F,GAEL,mEC7EO,SAASqB,EAAuBC,GACrC,OAAOC,EAAAA,EAAAA,IAAqB,aAAcD,EAC5C,CACA,MACA,GADuBE,EAAAA,EAAAA,GAAuB,aAAc,CAAC,OAAQ,WAAY,YAAa,QAAS,SAAU,WAAY,QAAS,WAAY,eAAgB,uBAAwB,iBAAkB,gBAAiB,UAAW,qDCKxO,QANA,SAA+BC,EAAgBzB,EAAY0B,GACzD,MAA8B,oBAAnBD,EACFA,EAAezB,EAAY0B,GAE7BD,CACT,mCCQA,QAVA,SAA8BE,GAA0B,IAAlBC,EAAWj1D,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAG,GAClD,QAAesG,IAAX0uD,EACF,MAAO,CAAC,EAEV,MAAM1pD,EAAS,CAAC,EAIhB,OAHA7E,OAAO4H,KAAK2mD,GAAQpnB,QAAOjnC,GAAQA,EAAKgB,MAAM,aAAuC,oBAAjBqtD,EAAOruD,KAAyBsuD,EAAYzmD,SAAS7H,KAAOsI,SAAQtI,IACtI2E,EAAO3E,GAAQquD,EAAOruD,EAAK,IAEtB2E,CACT,iECYaonD,EAiBXlyD,WAAAA,CACWF,EACA40D,EACA3qD,GAFA,KAAIjK,KAAJA,EACA,KAAe40D,gBAAfA,EACA,KAAI3qD,KAAJA,EAnBX,KAAiB4qD,mBAAG,EAIpB,KAAYC,aAAe,CAAC,EAE5B,KAAAC,kBAA2C,OAE3C,KAAiBC,kBAAwC,KAczDC,oBAAAA,CAAqBC,GAEnB,OADA30D,KAAKw0D,kBAAoBG,EAClB30D,KAGTiyD,oBAAAA,CAAqBqC,GAEnB,OADAt0D,KAAKs0D,kBAAoBA,EAClBt0D,KAGT40D,eAAAA,CAAgBzB,GAEd,OADAnzD,KAAKu0D,aAAepB,EACbnzD,KAGT60D,0BAAAA,CAA2BxsD,GAEzB,OADArI,KAAKy0D,kBAAoBpsD,EAClBrI,MCnDJ,MAAM80D,EAAqB,kBCgBrBC,EAWXp1D,WAAAA,CACmBF,EACA2vD,GADA,KAAI3vD,KAAJA,EACA,KAAS2vD,UAATA,EAZX,KAASyD,UAAwB,KACxB,KAAA/0D,UAAgD,IAAIuxB,IACpD,KAAA2lC,kBAGb,IAAI3lC,IACS,KAAA4lC,iBACf,IAAI5lC,IACE,KAAA6lC,gBAAuD,IAAI7lC,IAWnEte,GAAAA,CAAIigD,GAEF,MAAMmE,EAAuBn1D,KAAKo1D,4BAA4BpE,GAE9D,IAAKhxD,KAAKg1D,kBAAkBpjC,IAAIujC,GAAuB,CACrD,MAAMnkC,EAAW,IAAIjpB,EAAAA,GAGrB,GAFA/H,KAAKg1D,kBAAkBrkD,IAAIwkD,EAAsBnkC,GAG/ChxB,KAAKq1D,cAAcF,IACnBn1D,KAAKs1D,uBAGL,IACE,MAAM52D,EAAWsB,KAAKu1D,uBAAuB,CAC3CxD,mBAAoBoD,IAElBz2D,GACFsyB,EAAS/oB,QAAQvJ,GAEnB,MAAO2G,KAOb,OAAOrF,KAAKg1D,kBAAkBjkD,IAAIokD,GAAuBjtD,QAmB3DsO,YAAAA,CAAauM,SAKX,MAAMoyC,EAAuBn1D,KAAKo1D,4BAChC,OAAAryC,QAAA,IAAAA,OAAA,EAAAA,EAASiuC,YAELv6C,EAAgC,QAArBrP,EAAA,OAAA2b,QAAA,IAAAA,OAAA,EAAAA,EAAStM,gBAAY,IAAArP,GAAAA,EAEtC,IACEpH,KAAKq1D,cAAcF,KACnBn1D,KAAKs1D,uBAaA,CAEL,GAAI7+C,EACF,OAAO,KAEP,MAAMxX,MAAM,WAAWe,KAAKP,yBAhB9B,IACE,OAAOO,KAAKu1D,uBAAuB,CACjCxD,mBAAoBoD,IAEtB,MAAO9vD,GACP,GAAIoR,EACF,OAAO,KAEP,MAAMpR,GAadmwD,YAAAA,GACE,OAAOx1D,KAAK6yD,UAGd4C,YAAAA,CAAa5C,GACX,GAAIA,EAAUpzD,OAASO,KAAKP,KAC1B,MAAMR,MACJ,yBAAyB4zD,EAAUpzD,qBAAqBO,KAAKP,SAIjE,GAAIO,KAAK6yD,UACP,MAAM5zD,MAAM,iBAAiBe,KAAKP,kCAMpC,GAHAO,KAAK6yD,UAAYA,EAGZ7yD,KAAKs1D,uBAAV,CAKA,GA0NJ,SAA0CzC,GACxC,MAAuC,UAAhCA,EAAU2B,iBACnB,CA5NQkB,CAAiB7C,GACnB,IACE7yD,KAAKu1D,uBAAuB,CAAExD,mBAAoB+C,IAClD,MAAOzvD,IAWX,IAAK,MACH0sD,EACA4D,KACG31D,KAAKg1D,kBAAkB7mD,UAAW,CACrC,MAAMgnD,EACJn1D,KAAKo1D,4BAA4BrD,GAEnC,IAEE,MAAMrzD,EAAWsB,KAAKu1D,uBAAuB,CAC3CxD,mBAAoBoD,IAEtBQ,EAAiB1tD,QAAQvJ,GACzB,MAAO2G,OAObuwD,aAAAA,GAAqD,IAAvC5E,EAAA7xD,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAqB21D,EACjC90D,KAAKg1D,kBAAkBpzC,OAAOovC,GAC9BhxD,KAAKi1D,iBAAiBrzC,OAAOovC,GAC7BhxD,KAAKlC,UAAU8jB,OAAOovC,GAKxB,YAAMpvC,GACJ,MAAMi0C,EAAWv2D,MAAMo1C,KAAK10C,KAAKlC,UAAU83B,gBAErCztB,QAAQgtB,IAAI,IACb0gC,EACA9oB,QAAOxhC,GAAW,aAAcA,IAEhCyB,KAAIzB,GAAYA,EAAgBuqD,SAAUl0C,cAC1Ci0C,EACA9oB,QAAOxhC,GAAW,YAAaA,IAE/ByB,KAAIzB,GAAYA,EAAgBmlD,cAIvCqF,cAAAA,GACE,OAAyB,MAAlB/1D,KAAK6yD,UAGdwC,aAAAA,GAAqD,IAAvCrE,EAAA7xD,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAqB21D,EACjC,OAAO90D,KAAKlC,UAAU8zB,IAAIo/B,GAG5BgF,UAAAA,GAAkD,IAAvChF,EAAA7xD,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAqB21D,EAC9B,OAAO90D,KAAKi1D,iBAAiBlkD,IAAIigD,IAAe,CAAC,EAGnDiF,UAAAA,GAAuC,IAA5BC,EAAA/2D,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAA0B,CAAC,EACpC,MAAM,QAAE4jB,EAAU,CAAC,GAAMmzC,EACnBf,EAAuBn1D,KAAKo1D,4BAChCc,EAAKnE,oBAEP,GAAI/xD,KAAKq1D,cAAcF,GACrB,MAAMl2D,MACJ,GAAGe,KAAKP,QAAQ01D,mCAIpB,IAAKn1D,KAAK+1D,iBACR,MAAM92D,MAAM,aAAae,KAAKP,oCAGhC,MAAMf,EAAWsB,KAAKu1D,uBAAuB,CAC3CxD,mBAAoBoD,EACpBpyC,YAIF,IAAK,MACHgvC,EACA4D,KACG31D,KAAKg1D,kBAAkB7mD,UAAW,CAGjCgnD,IADFn1D,KAAKo1D,4BAA4BrD,IAEjC4D,EAAiB1tD,QAAQvJ,GAI7B,OAAOA,EAWT4Y,MAAAA,CAAOjP,EAA6B2oD,SAClC,MAAMmE,EAAuBn1D,KAAKo1D,4BAA4BpE,GACxDmF,EAC0C,QAA9C/uD,EAAApH,KAAKk1D,gBAAgBnkD,IAAIokD,UAAqB,IAAA/tD,EAAAA,EAC9C,IAAIwY,IACNu2C,EAAkBz0C,IAAIrZ,GACtBrI,KAAKk1D,gBAAgBvkD,IAAIwkD,EAAsBgB,GAE/C,MAAMC,EAAmBp2D,KAAKlC,UAAUiT,IAAIokD,GAK5C,OAJIiB,GACF/tD,EAAS+tD,EAAkBjB,GAGtB,KACLgB,EAAkBv0C,OAAOvZ,EAAS,EAQ9BguD,qBAAAA,CACN33D,EACAsyD,GAEA,MAAMvH,EAAYzpD,KAAKk1D,gBAAgBnkD,IAAIigD,GAC3C,GAAKvH,EAGL,IAAK,MAAMphD,KAAYohD,EACrB,IACEphD,EAAS3J,EAAUsyD,GACnB,MAAA5pD,KAMEmuD,sBAAAA,CAAsBzsB,GAM7B,IAN8B,mBAC7BipB,EAAkB,QAClBhvC,EAAU,CAAC,GAIZ+lB,EACKpqC,EAAWsB,KAAKlC,UAAUiT,IAAIghD,GAClC,IAAKrzD,GAAYsB,KAAK6yD,YACpBn0D,EAAWsB,KAAK6yD,UAAUwB,gBAAgBr0D,KAAKovD,UAAW,CACxD2C,oBAqD+Bf,EArDmBe,EAsDjDf,IAAe8D,OAAqBrvD,EAAYurD,GArDjDjuC,YAEF/iB,KAAKlC,UAAU6S,IAAIohD,EAAoBrzD,GACvCsB,KAAKi1D,iBAAiBtkD,IAAIohD,EAAoBhvC,GAO9C/iB,KAAKq2D,sBAAsB33D,EAAWqzD,GAOlC/xD,KAAK6yD,UAAU4B,mBACjB,IACEz0D,KAAK6yD,UAAU4B,kBACbz0D,KAAKovD,UACL2C,EACArzD,GAEF,MAAA0I,IA4BV,IAAuC4pD,EAtBnC,OAAOtyD,GAAY,KAGb02D,2BAAAA,GACiC,IAAvCpE,EAAA7xD,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAqB21D,EAErB,OAAI90D,KAAK6yD,UACA7yD,KAAK6yD,UAAUyB,kBAAoBtD,EAAa8D,EAEhD9D,EAIHsE,oBAAAA,GACN,QACIt1D,KAAK6yD,WAC8B,aAArC7yD,KAAK6yD,UAAU2B,yBCrVR8B,EAGX32D,WAAAA,CAA6BF,GAAA,KAAIA,KAAJA,EAFZ,KAAA82D,UAAY,IAAIlnC,IAajCmnC,YAAAA,CAA6B3D,GAC3B,MAAM4D,EAAWz2D,KAAKgyD,YAAYa,EAAUpzD,MAC5C,GAAIg3D,EAASV,iBACX,MAAM,IAAI92D,MACR,aAAa4zD,EAAUpzD,yCAAyCO,KAAKP,QAIzEg3D,EAAShB,aAAa5C,GAGxB6D,uBAAAA,CAAwC7D,GACrB7yD,KAAKgyD,YAAYa,EAAUpzD,MAC/Bs2D,kBAEX/1D,KAAKu2D,UAAU30C,OAAOixC,EAAUpzD,MAGlCO,KAAKw2D,aAAa3D,GAUpBb,WAAAA,CAA4BvyD,GAC1B,GAAIO,KAAKu2D,UAAU3kC,IAAInyB,GACrB,OAAOO,KAAKu2D,UAAUxlD,IAAItR,GAI5B,MAAMg3D,EAAW,IAAI1B,EAAYt1D,EAAMO,MAGvC,OAFAA,KAAKu2D,UAAU5lD,IAAIlR,EAAMg3D,GAElBA,EAGTE,YAAAA,GACE,OAAOr3D,MAAMo1C,KAAK10C,KAAKu2D,UAAU3gC,gEC5DrCs8B,EAAAA,EAAAA,wBAA+B,uICjB/B,IAAI0E,EACAC,EAqBJ,MAAMC,EAAmB,IAAIC,QACvBC,EAAqB,IAAID,QACzBE,EAA2B,IAAIF,QAC/BG,EAAiB,IAAIH,QACrBI,EAAwB,IAAIJ,QA0DlC,IAAIK,EAAgB,CAChBrmD,GAAAA,CAAIrL,EAAQI,EAAMuxD,GACd,GAAI3xD,aAAkB4xD,eAAgB,CAElC,GAAa,SAATxxD,EACA,OAAOkxD,EAAmBjmD,IAAIrL,GAElC,GAAa,qBAATI,EACA,OAAOJ,EAAO6xD,kBAAoBN,EAAyBlmD,IAAIrL,GAGnE,GAAa,UAATI,EACA,OAAOuxD,EAASE,iBAAiB,QAC3B9xD,EACA4xD,EAASG,YAAYH,EAASE,iBAAiB,GAE7D,CAEA,OAAOE,EAAK/xD,EAAOI,GACvB,EACA6K,IAAGA,CAACjL,EAAQI,EAAMP,KACdG,EAAOI,GAAQP,GACR,GAEXqsB,IAAGA,CAAClsB,EAAQI,IACJJ,aAAkB4xD,iBACR,SAATxxD,GAA4B,UAATA,IAGjBA,KAAQJ,GAMvB,SAASgyD,EAAa7tB,GAIlB,OAAIA,IAAS8tB,YAAYxsD,UAAU29C,aAC7B,qBAAsBwO,eAAensD,WA7GnC0rD,IACHA,EAAuB,CACpBe,UAAUzsD,UAAU0sD,QACpBD,UAAUzsD,UAAU2sD,SACpBF,UAAUzsD,UAAU4sD,sBAqHEpqD,SAASk8B,GAC5B,WAAmB,QAAAtpC,EAAApB,UAAAC,OAANC,EAAI,IAAAC,MAAAiB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJnB,EAAImB,GAAArB,UAAAqB,GAIpB,OADAqpC,EAAK13B,MAAM6lD,EAAOh4D,MAAOX,GAClBo4D,EAAKX,EAAiB/lD,IAAI/Q,MACrC,EAEG,WAAmB,QAAAU,EAAAvB,UAAAC,OAANC,EAAI,IAAAC,MAAAoB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJtB,EAAIsB,GAAAxB,UAAAwB,GAGpB,OAAO82D,EAAK5tB,EAAK13B,MAAM6lD,EAAOh4D,MAAOX,GACzC,EAvBW,SAAU44D,GAAqB,QAAA/4D,EAAAC,UAAAC,OAANC,EAAI,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,EAAA,GAAAJ,UAAAI,GAChC,MAAM24D,EAAKruB,EAAKh9B,KAAKmrD,EAAOh4D,MAAOi4D,KAAe54D,GAElD,OADA43D,EAAyBtmD,IAAIunD,EAAID,EAAWtkD,KAAOskD,EAAWtkD,OAAS,CAACskD,IACjER,EAAKS,EAChB,CAoBR,CACA,SAASC,EAAuB5yD,GAC5B,MAAqB,oBAAVA,EACAmyD,EAAanyD,IAGpBA,aAAiB+xD,gBAhGzB,SAAwCY,GAEpC,GAAIlB,EAAmBplC,IAAIsmC,GACvB,OACJ,MAAME,EAAO,IAAIjwD,SAAQ,CAACF,EAASD,KAC/B,MAAMorB,EAAWA,KACb8kC,EAAGG,oBAAoB,WAAYtqB,GACnCmqB,EAAGG,oBAAoB,QAASn3D,GAChCg3D,EAAGG,oBAAoB,QAASn3D,EAAM,EAEpC6sC,EAAWA,KACb9lC,IACAmrB,GAAU,EAERlyB,EAAQA,KACV8G,EAAOkwD,EAAGh3D,OAAS,IAAIo3D,aAAa,aAAc,eAClDllC,GAAU,EAEd8kC,EAAGz7C,iBAAiB,WAAYsxB,GAChCmqB,EAAGz7C,iBAAiB,QAASvb,GAC7Bg3D,EAAGz7C,iBAAiB,QAASvb,EAAM,IAGvC81D,EAAmBrmD,IAAIunD,EAAIE,EAC/B,CAyEQG,CAA+BhzD,GA9JhB4uD,EA+JD5uD,GAzJVqxD,IACHA,EAAoB,CACjBe,YACAa,eACAC,SACAb,UACAN,kBAZiDoB,MAAMx2D,GAAMiyD,aAAkBjyD,IAgK5E,IAAIy2D,MAAMpzD,EAAO6xD,GAErB7xD,GAlKWqzD,IAACzE,CAmKvB,CACA,SAASsD,EAAKlyD,GAGV,GAAIA,aAAiBszD,WACjB,OA3IR,SAA0BvuD,GACtB,MAAMpC,EAAU,IAAIC,SAAQ,CAACF,EAASD,KAClC,MAAMorB,EAAWA,KACb9oB,EAAQ+tD,oBAAoB,UAAWnQ,GACvC59C,EAAQ+tD,oBAAoB,QAASn3D,EAAM,EAEzCgnD,EAAUA,KACZjgD,EAAQwvD,EAAKntD,EAAQG,SACrB2oB,GAAU,EAERlyB,EAAQA,KACV8G,EAAOsC,EAAQpJ,OACfkyB,GAAU,EAEd9oB,EAAQmS,iBAAiB,UAAWyrC,GACpC59C,EAAQmS,iBAAiB,QAASvb,EAAM,IAe5C,OAbAgH,EACKwO,MAAMnR,IAGHA,aAAiBqyD,WACjBd,EAAiBnmD,IAAIpL,EAAO+E,EAChC,IAGChC,OAAM,SAGX6uD,EAAsBxmD,IAAIzI,EAASoC,GAC5BpC,CACX,CA4Ge4wD,CAAiBvzD,GAG5B,GAAI2xD,EAAetlC,IAAIrsB,GACnB,OAAO2xD,EAAenmD,IAAIxL,GAC9B,MAAMwzD,EAAWZ,EAAuB5yD,GAOxC,OAJIwzD,IAAaxzD,IACb2xD,EAAevmD,IAAIpL,EAAOwzD,GAC1B5B,EAAsBxmD,IAAIooD,EAAUxzD,IAEjCwzD,CACX,CACA,MAAMf,EAAUzyD,GAAU4xD,EAAsBpmD,IAAIxL,GCrIpD,MAAMyzD,EAAc,CAAC,MAAO,SAAU,SAAU,aAAc,SACxDC,EAAe,CAAC,MAAO,MAAO,SAAU,SACxCC,EAAgB,IAAI7pC,IAC1B,SAAS8pC,EAAUzzD,EAAQI,GACvB,KAAMJ,aAAkBiyD,cAClB7xD,KAAQJ,GACM,kBAATI,EACP,OAEJ,GAAIozD,EAAcnoD,IAAIjL,GAClB,OAAOozD,EAAcnoD,IAAIjL,GAC7B,MAAMszD,EAAiBtzD,EAAKX,QAAQ,aAAc,IAC5Ck0D,EAAWvzD,IAASszD,EACpBE,EAAUL,EAAatrD,SAASyrD,GACtC,KAEEA,KAAmBC,EAAWZ,SAAWD,gBAAgBrtD,aACrDmuD,IAAWN,EAAYrrD,SAASyrD,GAClC,OAEJ,MAAMp6D,EAASkjB,eAAgBq3C,GAE3B,MAAMrB,EAAKl4D,KAAK8oD,YAAYyQ,EAAWD,EAAU,YAAc,YAC/D,IAAI5zD,EAASwyD,EAAGsB,MAAM,QAAAt6D,EAAAC,UAAAC,OAHmBC,EAAI,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,EAAA,GAAAJ,UAAAI,GAW7C,OAPI85D,IACA3zD,EAASA,EAAO2rB,MAAMhyB,EAAK6hB,iBAMjB/Y,QAAQgtB,IAAI,CACtBzvB,EAAO0zD,MAAmB/5D,GAC1Bi6D,GAAWpB,EAAGE,QACd,EACR,EAEA,OADAc,EAAcvoD,IAAI7K,EAAM9G,GACjBA,CACX,CDgCIo4D,EC/BUqC,KAAQ,IACfA,EACH1oD,IAAKA,CAACrL,EAAQI,EAAMuxD,IAAa8B,EAAUzzD,EAAQI,IAAS2zD,EAAS1oD,IAAIrL,EAAQI,EAAMuxD,GACvFzlC,IAAKA,CAAClsB,EAAQI,MAAWqzD,EAAUzzD,EAAQI,IAAS2zD,EAAS7nC,IAAIlsB,EAAQI,KD4BzDuC,CAAS+uD,SE9FhBsC,EACX/5D,WAAAA,CAA6ByvD,GAAA,KAASA,UAATA,EAG7BuK,qBAAAA,GAIE,OAHkB35D,KAAKovD,UAAUuH,eAI9B3pD,KAAIypD,IACH,GAmBR,SAAkCA,GAChC,MAAM5D,EAAY4D,EAASjB,eAC3B,MAAsB,aAAf,OAAA3C,QAAS,IAATA,OAAS,EAATA,EAAWnpD,KACpB,CAtBYkwD,CAAyBnD,GAAW,CACtC,MAAMlrD,EAAUkrD,EAASjgD,eACzB,MAAO,GAAGjL,EAAQsuD,WAAWtuD,EAAQgF,UAErC,OAAO,QAGVw8B,QAAO+sB,GAAaA,IACpBh2D,KAAK,yCCxBCsO,EAAS,IAAI1S,EAAAA,GAAO,0sBC+BpBo1D,EAAqB,YAErBiF,EAAsB,CACjC,CAACC,GAAU,YACX,CAACC,GAAgB,mBACjB,CAACC,GAAgB,iBACjB,CAACC,GAAsB,wBACvB,CAACC,GAAe,iBAChB,CAACC,GAAqB,wBACtB,CAACC,GAAW,YACZ,CAACC,GAAiB,mBAClB,CAACC,GAAe,YAChB,CAACC,GAAkB,oBACnB,CAACC,GAAqB,mBACtB,CAACC,GAAgB,UACjB,CAACC,GAAsB,iBACvB,CAACC,GAAoB,WACrB,CAACC,GAA0B,kBAC3B,CAACC,GAAgB,WACjB,CAACC,GAAsB,kBACvB,CAACC,GAAkB,YACnB,CAACC,GAAwB,mBACzB,CAACC,GAAmB,UACpB,CAACC,GAAyB,iBAC1B,CAACC,GAAc,WACf,CAACC,GAAoB,kBACrB,CAACC,GAAgB,WACjB,CAACC,GAAsB,kBACvB,CAACC,GAAa,cACd,UAAW,UACX,CAACh8D,GAAc,eCjDJi8D,GAAQ,IAAIrsC,IAKZssC,GAAc,IAAItsC,IAQlBusC,GAAc,IAAIvsC,IAOf,SAAAwsC,GACd7lD,EACA68C,GAEA,IACG78C,EAAwBo5C,UAAUoH,aAAa3D,GAChD,MAAOxtD,GACP+M,EAAO9R,MACL,aAAauyD,EAAUpzD,4CAA4CuW,EAAIvW,OACvE4F,GAGN,CAoBM,SAAUusD,GACdiB,GAEA,MAAMiJ,EAAgBjJ,EAAUpzD,KAChC,GAAIm8D,GAAYhqC,IAAIkqC,GAKlB,OAJA1pD,EAAO9R,MACL,sDAAsDw7D,OAGjD,EAGTF,GAAYjrD,IAAImrD,EAAejJ,GAG/B,IAAK,MAAM78C,KAAO0lD,GAAM9lC,SACtBimC,GAAc7lD,EAAwB68C,GAGxC,IAAK,MAAMkJ,KAAaJ,GAAY/lC,SAClCimC,GAAcE,EAAoClJ,GAGpD,OAAO,CACT,CAWgB,SAAA9B,GACd/6C,EACAvW,GAEA,MAAMu8D,EAAuBhmD,EAAwBo5C,UAClD4C,YAAY,aACZx7C,aAAa,CAAEC,UAAU,IAI5B,OAHIulD,GACGA,EAAoBC,mBAEnBjmD,EAAwBo5C,UAAU4C,YAAYvyD,EACxD,CAwCM,SAAU0W,GACdvJ,GAEA,OAAY,OAARA,QAAwBnH,IAARmH,QAG2BnH,IAAvCmH,EAA0BwJ,QACpC,CC5IA,MAAM8lD,GAA6B,CACjC,SACE,6EAEF,eAAyB,iCACzB,gBACE,kFACF,cAAwB,kDACxB,qBAA+B,uCAC/B,aACE,0EACF,uBACE,6EAEF,uBACE,wDACF,WACE,gFACF,UACE,qFACF,UACE,mFACF,aACE,sFACF,sCACE,0GACF,iCACE,6DAgBSC,GAAgB,IAAI9wD,EAAAA,GAC/B,MACA,WACA6wD,UCrDWE,GAcXz8D,WAAAA,CACEojB,EACAjb,EACAsnD,GANQ,KAAUiN,YAAG,EAQrBr8D,KAAKs8D,SAAgB12D,OAAAoD,OAAA,GAAA+Z,GACrB/iB,KAAKu8D,QAAe32D,OAAAoD,OAAA,GAAAlB,GACpB9H,KAAKw8D,MAAQ10D,EAAOrI,KACpBO,KAAKy8D,gCACH30D,EAAO40D,+BACT18D,KAAK28D,WAAavN,EAClBpvD,KAAKovD,UAAUoH,aACb,IAAI3E,EAAAA,GAAU,OAAO,IAAM7xD,MAAM,WAIrC,kCAAI08D,GAEF,OADA18D,KAAK48D,iBACE58D,KAAKy8D,gCAGd,kCAAIC,CAA+Bz8D,GACjCD,KAAK48D,iBACL58D,KAAKy8D,gCAAkCx8D,EAGzC,QAAIR,GAEF,OADAO,KAAK48D,iBACE58D,KAAKw8D,MAGd,WAAIz5C,GAEF,OADA/iB,KAAK48D,iBACE58D,KAAKs8D,SAGd,UAAIx0D,GAEF,OADA9H,KAAK48D,iBACE58D,KAAKu8D,QAGd,aAAInN,GACF,OAAOpvD,KAAK28D,WAGd,aAAIE,GACF,OAAO78D,KAAKq8D,WAGd,aAAIQ,CAAU58D,GACZD,KAAKq8D,WAAap8D,EAOV28D,cAAAA,GACR,GAAI58D,KAAK68D,UACP,MAAMV,GAAc7wD,OAAO,cAAsB,CAAE4K,QAASlW,KAAKw8D,SCtChE,MAAMh7D,qBAoEGs7D,GACdR,GACc,IAAdS,EAAS59D,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAG,CAAC,EAET4jB,EAAUu5C,EAEd,GAAyB,kBAAdS,EAAwB,CAEjCA,EAAY,CAAEt9D,KADDs9D,GAIf,MAAMj1D,EAAMlC,OAAAoD,OAAA,CACVvJ,KAAMq1D,EACN4H,gCAAgC,GAC7BK,GAECt9D,EAAOqI,EAAOrI,KAEpB,GAAoB,kBAATA,IAAsBA,EAC/B,MAAM08D,GAAc7wD,OAA8B,gBAChD4K,QAAS7R,OAAO5E,KAMpB,GAFAsjB,IAAAA,GAAYlb,EAAAA,EAAAA,QAEPkb,EACH,MAAMo5C,GAAc7wD,OAAO,cAG7B,MAAM0xD,EAActB,GAAM3qD,IAAItR,GAC9B,GAAIu9D,EAAa,CAEf,IACE5vD,EAAAA,EAAAA,IAAU2V,EAASi6C,EAAYj6C,WAC/B3V,EAAAA,EAAAA,IAAUtF,EAAQk1D,EAAYl1D,QAE9B,OAAOk1D,EAEP,MAAMb,GAAc7wD,OAA+B,iBAAE4K,QAASzW,IAIlE,MAAM2vD,EAAY,IAAIkH,EAAAA,GAAmB72D,GACzC,IAAK,MAAMozD,KAAa+I,GAAYhmC,SAClCw5B,EAAUoH,aAAa3D,GAGzB,MAAMoK,EAAS,IAAIb,GAAgBr5C,EAASjb,EAAQsnD,GAIpD,OAFAsM,GAAM/qD,IAAIlR,EAAMw9D,GAETA,CACT,CAuJgB,SAAAnM,KAAwC,IAAjCrxD,EAAAN,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAe21D,EACpC,MAAM9+C,EAAM0lD,GAAM3qD,IAAItR,GACtB,IAAKuW,GAAOvW,IAASq1D,IAAsBjtD,EAAAA,EAAAA,MACzC,OAAOi1D,KAET,IAAK9mD,EACH,MAAMmmD,GAAc7wD,OAAwB,UAAE4K,QAASzW,IAGzD,OAAOuW,CACT,UA2DgBk8C,GACdgL,EACA3sD,EACAmhD,SAIA,IAAImI,EAAmD,QAAzCzyD,EAAA2yD,EAAoBmD,UAAqB,IAAA91D,EAAAA,EAAA81D,EACnDxL,IACFmI,GAAW,IAAInI,KAEjB,MAAMyL,EAAkBtD,EAAQ/yD,MAAM,SAChCs2D,EAAkB7sD,EAAQzJ,MAAM,SACtC,GAAIq2D,GAAmBC,EAAiB,CACtC,MAAMC,EAAU,CACd,+BAA+BxD,oBAA0BtpD,OAgB3D,OAdI4sD,GACFE,EAAQt9D,KACN,iBAAiB85D,sDAGjBsD,GAAmBC,GACrBC,EAAQt9D,KAAK,OAEXq9D,GACFC,EAAQt9D,KACN,iBAAiBwQ,2DAGrB6B,EAAOrR,KAAKs8D,EAAQv5D,KAAK,MAG3B8tD,GACE,IAAIC,EAAAA,GACF,GAAGgI,aACH,KAAM,CAAGA,UAAStpD,aAAU,WAIlC,CCraA,MAEM+sD,GAAa,2BASnB,IAAIC,GAAiD,KACrD,SAASC,KA2BP,OA1BKD,KACHA,GR5BJ,SAAgB99D,EAAM8Q,GAA0D,IAAjD,QAAEktD,EAAO,QAAEC,EAAO,SAAEC,EAAQ,WAAEC,GAAYz+D,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzE,MAAMmL,EAAUJ,UAAUK,KAAK9K,EAAM8Q,GAC/BstD,EAAcpG,EAAKntD,GAoBzB,OAnBIozD,GACApzD,EAAQmS,iBAAiB,iBAAkBqhD,IACvCJ,EAAQjG,EAAKntD,EAAQG,QAASqzD,EAAMC,WAAYD,EAAME,WAAYvG,EAAKntD,EAAQw+C,aAAcgV,EAAM,IAGvGL,GACAnzD,EAAQmS,iBAAiB,WAAYqhD,GAAUL,EAE/CK,EAAMC,WAAYD,EAAME,WAAYF,KAExCD,EACKnnD,MAAMg4C,IACHkP,GACAlP,EAAGjyC,iBAAiB,SAAS,IAAMmhD,MACnCD,GACAjP,EAAGjyC,iBAAiB,iBAAkBqhD,GAAUH,EAASG,EAAMC,WAAYD,EAAME,WAAYF,IACjG,IAECx1D,OAAM,SACJu1D,CACX,CQKgBI,CAdA,8BACG,EAagC,CAC7CP,QAASA,CAAChP,EAAIqP,KAMZ,GACO,IADCA,EAEJ,IACErP,EAAGwP,kBAAkBZ,IACrB,MAAOj4D,GAIP7F,QAAQuB,KAAKsE,OAIpBiD,OAAMjD,IACP,MAAM82D,GAAc7wD,OAA0B,YAC5C6yD,qBAAsB94D,EAAE1D,SACxB,KAGC47D,EACT,CAyBOr7C,eAAek8C,GACpBpoD,EACAqoD,GAEA,IACE,MACMnG,SADWsF,MACH1U,YAAYwU,GAAY,aAChC9F,EAAcU,EAAGV,YAAY8F,UAC7B9F,EAAY7tC,IAAI00C,EAAiBC,GAAWtoD,UAC5CkiD,EAAGE,KACT,MAAO/yD,GACP,GAAIA,aAAayF,EAAAA,EACfsH,EAAOrR,KAAKsE,EAAE1D,aACT,CACL,MAAM48D,EAAcpC,GAAc7wD,OAA2B,WAC3D6yD,qBAAkC,OAAX94D,QAAA,IAAAA,OAAA,EAAAA,EAAa1D,UAEtCyQ,EAAOrR,KAAKw9D,EAAY58D,UAG9B,CAEA,SAAS28D,GAAWtoD,GAClB,MAAO,GAAGA,EAAIvW,QAAQuW,EAAI+M,QAAQkjC,OACpC,OCzEauY,GAyBX7+D,WAAAA,CAA6ByvD,GAAA,KAASA,UAATA,EAT7B,KAAgBqP,iBAAiC,KAU/C,MAAMzoD,EAAMhW,KAAKovD,UAAU4C,YAAY,OAAOx7C,eAC9CxW,KAAK0+D,SAAW,IAAIC,GAAqB3oD,GACzChW,KAAK4+D,wBAA0B5+D,KAAK0+D,SAASG,OAAOnoD,MAAKjM,IACvDzK,KAAKy+D,iBAAmBh0D,EACjBA,KAWX,sBAAMwxD,WACJ,IACE,MAMM6C,EANiB9+D,KAAKovD,UACzB4C,YAAY,mBACZx7C,eAI0BmjD,wBACvBoF,EAAOC,KACb,GAAyC,OAAhB,QAArB53D,EAAApH,KAAKy+D,wBAAgB,IAAAr3D,OAAA,EAAAA,EAAE63D,cACzBj/D,KAAKy+D,uBAAyBz+D,KAAK4+D,wBAEM,OAAhB,QAArBv3D,EAAArH,KAAKy+D,wBAAgB,IAAAp3D,OAAA,EAAAA,EAAE43D,aACzB,OAKJ,GACEj/D,KAAKy+D,iBAAiBS,wBAA0BH,GAChD/+D,KAAKy+D,iBAAiBQ,WAAWvG,MAC/ByG,GAAuBA,EAAoBJ,OAASA,IAGtD,OAOA,GAJA/+D,KAAKy+D,iBAAiBQ,WAAWl/D,KAAK,CAAEg/D,OAAMD,UAK5C9+D,KAAKy+D,iBAAiBQ,WAAW7/D,OA5EF,GA6E/B,CACA,MAAMggE,EAsMV,SACJH,GAEA,GAA0B,IAAtBA,EAAW7/D,OACb,OAAQ,EAGV,IAAIggE,EAAuB,EACvBC,EAAwBJ,EAAW,GAAGF,KAE1C,IAAK,IAAI98D,EAAI,EAAGA,EAAIg9D,EAAW7/D,OAAQ6C,IACjCg9D,EAAWh9D,GAAG88D,KAAOM,IACvBA,EAAwBJ,EAAWh9D,GAAG88D,KACtCK,EAAuBn9D,GAI3B,OAAOm9D,CACT,CAxNuCE,CAC3Bt/D,KAAKy+D,iBAAiBQ,YAExBj/D,KAAKy+D,iBAAiBQ,WAAW9zC,OAAOi0C,EAAsB,GAIlE,OAAOp/D,KAAK0+D,SAAShpB,UAAU11C,KAAKy+D,kBACpC,MAAOp5D,GACP+M,EAAOrR,KAAKsE,IAWhB,yBAAMk6D,SACJ,IAKE,GAJ8B,OAA1Bv/D,KAAKy+D,wBACDz+D,KAAK4+D,wBAI0B,OAAd,QAAvBx3D,EAAApH,KAAKy+D,wBAAkB,IAAAr3D,OAAA,EAAAA,EAAA63D,aACqB,IAA5Cj/D,KAAKy+D,iBAAiBQ,WAAW7/D,OAEjC,MAAO,GAET,MAAM2/D,EAAOC,MAEP,iBAAEQ,EAAgB,cAAEC,YAmC9BC,GAC0B,IAA1BC,EAAOxgE,UAAAC,OAAA,QAAAqG,IAAAtG,UAAA,GAAAA,UAAA,GArJgB,KA4JvB,MAAMqgE,EAA4C,GAElD,IAAIC,EAAgBC,EAAgBlzC,QACpC,IAAK,MAAM2yC,KAAuBO,EAAiB,CAEjD,MAAME,EAAiBJ,EAAiBp0C,MACtCy0C,GAAMA,EAAGf,QAAUK,EAAoBL,QAEzC,GAAKc,GAgBH,GAHAA,EAAeE,MAAM//D,KAAKo/D,EAAoBJ,MAG1CgB,GAAWP,GAAoBG,EAAS,CAC1CC,EAAeE,MAAMroC,MACrB,YAZF,GAJA+nC,EAAiBz/D,KAAK,CACpB++D,MAAOK,EAAoBL,MAC3BgB,MAAO,CAACX,EAAoBJ,QAE1BgB,GAAWP,GAAoBG,EAAS,CAG1CH,EAAiB/nC,MACjB,MAaJgoC,EAAgBA,EAAcjzC,MAAM,GAEtC,MAAO,CACLgzC,mBACAC,gBAEJ,CAhFkDO,CAC1ChgE,KAAKy+D,iBAAiBQ,YAElBgB,GAAe/6D,EAAAA,EAAAA,IACnBwB,KAAK8C,UAAU,CAAE+G,QAAS,EAAG0uD,WAAYO,KAgB3C,OAbAx/D,KAAKy+D,iBAAiBS,sBAAwBH,EAC1CU,EAAcrgE,OAAS,GAEzBY,KAAKy+D,iBAAiBQ,WAAaQ,QAI7Bz/D,KAAK0+D,SAAShpB,UAAU11C,KAAKy+D,oBAEnCz+D,KAAKy+D,iBAAiBQ,WAAa,GAE9Bj/D,KAAK0+D,SAAShpB,UAAU11C,KAAKy+D,mBAE7BwB,EACP,MAAO56D,GAEP,OADA+M,EAAOrR,KAAKsE,GACL,KAKb,SAAS25D,KAGP,OAFc,IAAIlgE,MAELC,cAAc6I,UAAU,EAAG,GAC1C,OAkDa+2D,GAEXh/D,WAAAA,CAAmBqW,GAAA,KAAGA,IAAHA,EACjBhW,KAAKkgE,wBAA0BlgE,KAAKmgE,+BAEtC,kCAAMA,GACJ,SAAKl2D,EAAAA,EAAAA,QAGIE,EAAAA,EAAAA,MACJuM,MAAK,KAAM,IACXpO,OAAM,KAAM,IAMnB,UAAMu2D,GAEJ,SAD8B7+D,KAAKkgE,wBAG5B,CACL,MAAME,QD5LLl+C,eACLlM,GAEA,IACE,MACMkiD,SADWsF,MACH1U,YAAYwU,IACpB7yD,QAAeytD,EAAGV,YAAY8F,IAAYvsD,IAAIutD,GAAWtoD,IAI/D,aADMkiD,EAAGE,KACF3tD,EACP,MAAOpF,GACP,GAAIA,aAAayF,EAAAA,EACfsH,EAAOrR,KAAKsE,EAAE1D,aACT,CACL,MAAM48D,EAAcpC,GAAc7wD,OAAyB,WACzD6yD,qBAAkC,OAAX94D,QAAA,IAAAA,OAAA,EAAAA,EAAa1D,UAEtCyQ,EAAOrR,KAAKw9D,EAAY58D,UAG9B,CCuKuC0+D,CAA4BrgE,KAAKgW,KAClE,OAAsB,OAAlBoqD,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBnB,YACfmB,EAEA,CAAEnB,WAAY,IANvB,MAAO,CAAEA,WAAY,IAWzB,eAAMvpB,CAAU4qB,SAEd,SAD8BtgE,KAAKkgE,wBAG5B,CACL,MAAMK,QAAiCvgE,KAAK6+D,OAC5C,OAAOT,GAA2Bp+D,KAAKgW,IAAK,CAC1CkpD,sBAEE,QADA93D,EAAAk5D,EAAiBpB,6BACjB,IAAA93D,EAAAA,EAAAm5D,EAAyBrB,sBAC3BD,WAAYqB,EAAiBrB,cAKnC,SAAMv9C,CAAI4+C,SAER,SAD8BtgE,KAAKkgE,wBAG5B,CACL,MAAMK,QAAiCvgE,KAAK6+D,OAC5C,OAAOT,GAA2Bp+D,KAAKgW,IAAK,CAC1CkpD,sBAEE,QADA93D,EAAAk5D,EAAiBpB,6BACjB,IAAA93D,EAAAA,EAAAm5D,EAAyBrB,sBAC3BD,WAAY,IACPsB,EAAyBtB,cACzBqB,EAAiBrB,gBAYxB,SAAUc,GAAWL,GAEzB,OAAOx6D,EAAAA,EAAAA,IAELwB,KAAK8C,UAAU,CAAE+G,QAAS,EAAG0uD,WAAYS,KACzCtgE,MACJ,CC5RM,IAAiCsyD,MCMhB,GDLrBE,GACE,IAAIC,EAAAA,GACF,mBACAzC,GAAa,IAAIsK,EAA0BtK,IAAU,YAIzDwC,GACE,IAAIC,EAAAA,GACF,aACAzC,GAAa,IAAIoP,GAAqBpP,IAAU,YAMpD8C,GAAgB8H,EAAMwG,EAAS9O,IAE/BQ,GAAgB8H,EAAMwG,EAAS,WAE/BtO,GAAgB,UAAW,kIEjC7B,MAiBMuO,GAAcC,EAAAA,EAAAA,IAAO,MAAO,CAChCjhE,KAAM,aACNq0D,KAAM,OACN6M,kBAAmBA,CAACxN,EAAOyN,KACzB,MAAM,WACJpO,GACEW,EACJ,MAAO,CAACyN,EAAO5iC,KAAMw0B,EAAWqO,UAAYD,EAAOC,SAAUD,EAAOpO,EAAWd,SAAUc,EAAWsO,OAASF,EAAOE,MAAkC,aAA3BtO,EAAWuO,aAA8BH,EAAOI,SAAUxO,EAAWyO,UAAYL,EAAOK,SAAUzO,EAAWpwB,UAAYw+B,EAAOM,aAAc1O,EAAWpwB,UAAuC,aAA3BowB,EAAWuO,aAA8BH,EAAOO,qBAA+C,UAAzB3O,EAAW4O,WAAoD,aAA3B5O,EAAWuO,aAA8BH,EAAOS,eAAyC,SAAzB7O,EAAW4O,WAAmD,aAA3B5O,EAAWuO,aAA8BH,EAAOU,cAAc,GAP3hBZ,EASjBa,EAAAA,EAAAA,IAAUz4B,IAAA,IAAC,MACZ04B,GACD14B,EAAA,MAAM,CACL24B,OAAQ,EAERC,WAAY,EACZC,YAAa,EACbC,YAAa,QACbC,aAAcL,EAAMM,MAAQN,GAAOO,QAAQC,QAC3CC,kBAAmB,OACnBC,SAAU,CAAC,CACT/O,MAAO,CACL0N,UAAU,GAEZvhD,MAAO,CACL6iD,SAAU,WACVC,OAAQ,EACR/0C,KAAM,EACNg1C,MAAO,SAER,CACDlP,MAAO,CACL2N,OAAO,GAETxhD,MAAO,CACLuiD,YAAaL,EAAMM,KAAO,QAAQN,EAAMM,KAAKC,QAAQO,0BAA2BC,EAAAA,EAAAA,IAAMf,EAAMO,QAAQC,QAAS,OAE9G,CACD7O,MAAO,CACLzB,QAAS,SAEXpyC,MAAO,CACLkjD,WAAY,KAEb,CACDrP,MAAO,CACLzB,QAAS,SACTqP,YAAa,cAEfzhD,MAAO,CACLkjD,WAAYhB,EAAMiB,QAAQ,GAC1BC,YAAalB,EAAMiB,QAAQ,KAE5B,CACDtP,MAAO,CACLzB,QAAS,SACTqP,YAAa,YAEfzhD,MAAO,CACLqjD,UAAWnB,EAAMiB,QAAQ,GACzBG,aAAcpB,EAAMiB,QAAQ,KAE7B,CACDtP,MAAO,CACL4N,YAAa,YAEfzhD,MAAO,CACLujD,OAAQ,OACRZ,kBAAmB,EACnBa,iBAAkB,SAEnB,CACD3P,MAAO,CACL8N,UAAU,GAEZ3hD,MAAO,CACLyjD,UAAW,UACXF,OAAQ,SAET,CACD1P,MAAOrB,IAAA,IAAC,WACNU,GACDV,EAAA,QAAOU,EAAWpwB,QAAQ,EAC3B9iB,MAAO,CACLC,QAAS,OACT6hD,UAAW,SACX4B,OAAQ,EACRC,eAAgB,QAChBC,gBAAiB,QACjB,sBAAuB,CACrBC,QAAS,KACTJ,UAAW,YAGd,CACD5P,MAAOiQ,IAAA,IAAC,WACN5Q,GACD4Q,EAAA,OAAK5Q,EAAWpwB,UAAuC,aAA3BowB,EAAWuO,WAA0B,EAClEzhD,MAAO,CACL,sBAAuB,CACrB+iD,MAAO,OACPgB,UAAW,eAAe7B,EAAMM,MAAQN,GAAOO,QAAQC,UACvDiB,eAAgB,aAGnB,CACD9P,MAAOmQ,IAAA,IAAC,WACN9Q,GACD8Q,EAAA,MAAgC,aAA3B9Q,EAAWuO,aAA8BvO,EAAWpwB,QAAQ,EAClE9iB,MAAO,CACLikD,cAAe,SACf,sBAAuB,CACrBV,OAAQ,OACRW,WAAY,eAAehC,EAAMM,MAAQN,GAAOO,QAAQC,UACxDkB,gBAAiB,aAGpB,CACD/P,MAAOsQ,IAAA,IAAC,WACNjR,GACDiR,EAAA,MAA8B,UAAzBjR,EAAW4O,WAAoD,aAA3B5O,EAAWuO,WAA0B,EAC/EzhD,MAAO,CACL,YAAa,CACX+iD,MAAO,OAET,WAAY,CACVA,MAAO,SAGV,CACDlP,MAAOuQ,IAAA,IAAC,WACNlR,GACDkR,EAAA,MAA8B,SAAzBlR,EAAW4O,WAAmD,aAA3B5O,EAAWuO,WAA0B,EAC9EzhD,MAAO,CACL,YAAa,CACX+iD,MAAO,OAET,WAAY,CACVA,MAAO,UAId,KACKsB,GAAiBjD,EAAAA,EAAAA,IAAO,OAAQ,CACpCjhE,KAAM,aACNq0D,KAAM,UACN6M,kBAAmBA,CAACxN,EAAOyN,KACzB,MAAM,WACJpO,GACEW,EACJ,MAAO,CAACyN,EAAOgD,QAAoC,aAA3BpR,EAAWuO,aAA8BH,EAAOiD,gBAAgB,GAPrEnD,EASpBa,EAAAA,EAAAA,IAAUuC,IAAA,IAAC,MACZtC,GACDsC,EAAA,MAAM,CACLvkD,QAAS,eACTwkD,YAAa,QAAQvC,EAAMiB,QAAQ,YACnCuB,aAAc,QAAQxC,EAAMiB,QAAQ,YACpCwB,WAAY,SACZ/B,SAAU,CAAC,CACT/O,MAAO,CACL4N,YAAa,YAEfzhD,MAAO,CACL4kD,WAAY,QAAQ1C,EAAMiB,QAAQ,YAClC0B,cAAe,QAAQ3C,EAAMiB,QAAQ,eAG1C,KACK2B,EAAuBC,EAAAA,YAAiB,SAAiBC,EAASzX,GACtE,MAAMsG,GAAQoR,EAAAA,EAAAA,GAAgB,CAC5BpR,MAAOmR,EACP7kE,KAAM,gBAEF,SACJohE,GAAW,EAAK,SAChBz+B,EAAQ,UACRiwB,EAAS,YACT0O,EAAc,aAAY,UAC1BlO,GAAYzwB,GAA4B,aAAhB2+B,EAA6B,MAAQ,MAAI,SACjEE,GAAW,EAAK,MAChBH,GAAQ,EAAK,KACb0D,GAAqB,OAAd3R,EAAqB,iBAAcptD,GAAS,UACnD27D,EAAY,SAAQ,QACpB1P,EAAU,eACP/jC,GACDwlC,EACEX,EAAa,IACdW,EACH0N,WACAhO,YACAoO,WACAH,QACAC,cACAyD,OACApD,YACA1P,WAEI+S,EAtNkBjS,KACxB,MAAM,SACJqO,EAAQ,SACRz+B,EAAQ,QACRqiC,EAAO,SACPxD,EAAQ,MACRH,EAAK,YACLC,EAAW,UACXK,EAAS,QACT1P,GACEc,EACEO,EAAQ,CACZ/0B,KAAM,CAAC,OAAQ6iC,GAAY,WAAYnP,EAASoP,GAAS,QAAyB,aAAhBC,GAA8B,WAAYE,GAAY,WAAY7+B,GAAY,eAAgBA,GAA4B,aAAhB2+B,GAA8B,uBAAsC,UAAdK,GAAyC,aAAhBL,GAA8B,iBAAgC,SAAdK,GAAwC,aAAhBL,GAA8B,iBACjW6C,QAAS,CAAC,UAA2B,aAAhB7C,GAA8B,oBAErD,OAAO2D,EAAAA,EAAAA,GAAe3R,EAAOc,EAAAA,EAAwB4Q,EAAQ,EAuM7CE,CAAkBnS,GAClC,OAAoBoS,EAAAA,EAAAA,KAAKnE,EAAa,CACpC7M,GAAIf,EACJR,WAAWwS,EAAAA,EAAAA,GAAKJ,EAAQzmC,KAAMq0B,GAC9BmS,KAAMA,EACN3X,IAAKA,EACL2F,WAAYA,EACZ,mBAA6B,cAATgS,GAAuC,OAAd3R,GAAsC,aAAhBkO,OAA4Ct7D,EAAds7D,KAC9FpzC,EACHyU,SAAUA,GAAwBwiC,EAAAA,EAAAA,KAAKjB,EAAgB,CACrDtR,UAAWoS,EAAQb,QACnBpR,WAAYA,EACZpwB,SAAUA,IACP,MAET,IAMIgiC,IACFA,EAAQU,sBAAuB,GAiEjC,2CCnTA,QAHA,SAAyBC,GACvB,MAA0B,kBAAZA,CAChB,ECsBA,QAZA,SAA0BzS,EAAa0S,EAAYxS,GACjD,YAAoB/sD,IAAhB6sD,GAA6B2S,EAAgB3S,GACxC0S,EAEF,IACFA,EACHxS,WAAY,IACPwS,EAAWxS,cACXA,GAGT,2DCTA,QAVA,SAA2B2B,GACzB,QAAe1uD,IAAX0uD,EACF,MAAO,CAAC,EAEV,MAAM1pD,EAAS,CAAC,EAIhB,OAHA7E,OAAO4H,KAAK2mD,GAAQpnB,QAAOjnC,KAAUA,EAAKgB,MAAM,aAAuC,oBAAjBqtD,EAAOruD,MAAuBsI,SAAQtI,IAC1G2E,EAAO3E,GAAQquD,EAAOruD,EAAK,IAEtB2E,CACT,ECyEA,QAzEA,SAAwB2nD,GACtB,MAAM,aACJ8S,EAAY,gBACZC,EAAe,kBACf3R,EAAiB,uBACjBf,EAAsB,UACtBJ,GACED,EACJ,IAAK8S,EAAc,CAGjB,MAAME,GAAgBP,EAAAA,EAAAA,GAAKM,GAAiB9S,UAAWA,EAAWI,GAAwBJ,UAAWmB,GAAmBnB,WAClHgT,EAAc,IACfF,GAAiB7lD,SACjBmzC,GAAwBnzC,SACxBk0C,GAAmBl0C,OAElB6zC,EAAQ,IACTgS,KACA1S,KACAe,GAQL,OANI4R,EAAchmE,OAAS,IACzB+zD,EAAMd,UAAY+S,GAEhBx/D,OAAO4H,KAAK63D,GAAajmE,OAAS,IACpC+zD,EAAM7zC,MAAQ+lD,GAET,CACLlS,QACAG,iBAAa7tD,EAEjB,CAKA,MAAM6/D,GAAgBC,EAAAA,EAAAA,GAAqB,IACtC9S,KACAe,IAECgS,EAAsCC,EAAkBjS,GACxDkS,EAAiCD,EAAkBhT,GACnDkT,EAAoBT,EAAaI,GAMjCF,GAAgBP,EAAAA,EAAAA,GAAKc,GAAmBtT,UAAW8S,GAAiB9S,UAAWA,EAAWI,GAAwBJ,UAAWmB,GAAmBnB,WAChJgT,EAAc,IACfM,GAAmBrmD,SACnB6lD,GAAiB7lD,SACjBmzC,GAAwBnzC,SACxBk0C,GAAmBl0C,OAElB6zC,EAAQ,IACTwS,KACAR,KACAO,KACAF,GAQL,OANIJ,EAAchmE,OAAS,IACzB+zD,EAAMd,UAAY+S,GAEhBx/D,OAAO4H,KAAK63D,GAAajmE,OAAS,IACpC+zD,EAAM7zC,MAAQ+lD,GAET,CACLlS,QACAG,YAAaqS,EAAkB9Y,IAEnC","sources":["../node_modules/@firebase/logger/src/logger.ts","../node_modules/@firebase/util/dist/postinstall.mjs","../node_modules/@firebase/util/src/constants.ts","../node_modules/@firebase/util/src/assert.ts","../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/deepCopy.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/global.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/emulator.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/json.ts","../node_modules/@firebase/util/src/jwt.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/query.ts","../node_modules/@firebase/util/src/sha1.ts","../node_modules/@firebase/util/src/validation.ts","../node_modules/@firebase/util/src/utf8.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/operation/ListenComplete.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Event.ts","../node_modules/@firebase/database/src/core/view/EventRegistration.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts","../node_modules/@mui/material/utils/useSlot.js","../node_modules/@mui/material/Divider/dividerClasses.js","../node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js","../node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/firebase/app/index.ts","../node_modules/idb/build/wrap-idb-value.js","../node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@mui/material/Divider/Divider.js","../node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js","../node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js","../node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js","../node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const getDefaultsFromPostinstall = () => (undefined);\nexport { getDefaultsFromPostinstall };","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\n// TODO(dlarocque): Define this as a class, since we no longer target ES5.\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\nimport { getDefaultsFromPostinstall } from './postinstall';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromPostinstall() ||\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Type placeholder for `WorkerGlobalScope` from `webworker`\n */\ndeclare class WorkerGlobalScope {}\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment.\n * Note: This will return true for certain test frameworks that are incompletely\n * mimicking a browser, and should not lead to assuming all browser APIs are\n * available.\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined' || isWebWorker();\n}\n\n/**\n * Detect Web Worker context.\n */\nexport function isWebWorker(): boolean {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    typeof self !== 'undefined' &&\n    self instanceof WorkerGlobalScope\n  );\n}\n\n/**\n * Detect Cloudflare Worker context.\n */\nexport function isCloudflareWorker(): boolean {\n  return (\n    typeof navigator !== 'undefined' &&\n    navigator.userAgent === 'Cloudflare-Workers'\n  );\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    !!navigator.userAgent &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // TypeScript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget\n    //                   which we can now use since we no longer target ES5.\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data JavaScript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a JavaScript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _isFirebaseServerApp } from '@firebase/app'; // eslint-disable-line import/no-extraneous-dependencies\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  private serverAppAppCheckToken?: string;\n  private appName: string;\n  constructor(\n    app: FirebaseApp,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appName = app.name;\n    if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n      this.serverAppAppCheckToken = app.settings.appCheckToken;\n    }\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (this.serverAppAppCheckToken) {\n      if (forceRefresh) {\n        throw new Error(\n          'Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.'\n        );\n      }\n      return Promise.resolve({ token: this.serverAppAppCheckToken });\n    }\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, EmulatorMockTokenOptions } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\nexport interface RepoInfoEmulatorOptions {\n  mockUserToken?: string | EmulatorMockTokenOptions;\n}\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false,\n    public readonly emulatorOptions: RepoInfoEmulatorOptions | null = null\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are received from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = Math.max(\n        0,\n        new Date().getTime() - this.lastConnectionAttemptTime_\n      );\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap will be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexicographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\nexport interface IteratedDataSnapshot extends DataSnapshot {\n  key: string; // key of the location of this snapshot.\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thenablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thenablePushRef.then = promise.then.bind(promise);\n  thenablePushRef.catch = promise.then.bind(promise, undefined);\n  return thenablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type = 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type = 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type = 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type = 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type = 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type = 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type = 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type = 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type = 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type = 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type = 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  deepEqual,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo, RepoInfoEmulatorOptions } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  hostAndPort: string,\n  emulatorOptions: RepoInfoEmulatorOptions,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    hostAndPort,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true,\n    emulatorOptions\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  const hostAndPort = `${host}:${port}`;\n  const repo = db._repoInternal;\n  if (db._instanceStarted) {\n    // If the instance has already been started, then silenty fail if this function is called again\n    // with the same parameters. If the parameters differ then assert.\n    if (\n      hostAndPort === db._repoInternal.repoInfo_.host &&\n      deepEqual(options, repo.repoInfo_.emulatorOptions)\n    ) {\n      return;\n    }\n    fatal(\n      'connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.'\n    );\n  }\n\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, hostAndPort, options, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nimport appendOwnerState from '@mui/utils/appendOwnerState';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    internalForwardedProps,\n    shouldForwardComponentProp = false,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && !shouldForwardComponentProp && {\n      as: LeafComponent\n    }),\n    ...(LeafComponent && shouldForwardComponentProp && {\n      component: LeafComponent\n    }),\n    ref\n  }, ownerState);\n  return [elementType, props];\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDividerUtilityClass(slot) {\n  return generateUtilityClass('MuiDivider', slot);\n}\nconst dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);\nexport default dividerClasses;","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}\nexport default resolveComponentProps;","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default extractEventHandlers;","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance!);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance!, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance!\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as dataconnectName } from '../../../packages/data-connect/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [dataconnectName]: 'fire-data-connect',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp | null | undefined\n): obj is FirebaseServerApp {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\nimport { logger } from './logger';\n\nconst MAX_HEADER_BYTES = 1024;\nexport const MAX_NUM_STORED_HEARTBEATS = 30;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    try {\n      const platformLogger = this.container\n        .getProvider('platform-logger')\n        .getImmediate();\n\n      // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise;\n        // If we failed to construct a heartbeats cache, then return immediately.\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      }\n      // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n      if (\n        this._heartbeatsCache.lastSentHeartbeatDate === date ||\n        this._heartbeatsCache.heartbeats.some(\n          singleDateHeartbeat => singleDateHeartbeat.date === date\n        )\n      ) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({ date, agent });\n\n        // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n        if (\n          this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS\n        ) {\n          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(\n            this._heartbeatsCache.heartbeats\n          );\n          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n        }\n      }\n\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      }\n      // If it's still null or the array is empty, there is no data to send.\n      if (\n        this._heartbeatsCache?.heartbeats == null ||\n        this._heartbeatsCache.heartbeats.length === 0\n      ) {\n        return '';\n      }\n      const date = getUTCDateString();\n      // Extract as many heartbeats from the cache as will fit under the size limit.\n      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n        this._heartbeatsCache.heartbeats\n      );\n      const headerString = base64urlEncodeWithoutPadding(\n        JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n      );\n      // Store last sent date to prevent another being logged/sent for the same day.\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries;\n        // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = [];\n        // Do not wait for this, to reduce latency.\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\nexport function getEarliestHeartbeatIdx(\n  heartbeats: SingleDateHeartbeat[]\n): number {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  let earliestHeartbeatIdx = 0;\n  let earliestHeartbeatDate = heartbeats[0].date;\n\n  for (let i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getDividerUtilityClass } from \"./dividerClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    absolute,\n    children,\n    classes,\n    flexItem,\n    light,\n    orientation,\n    textAlign,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],\n    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']\n  };\n  return composeClasses(slots, getDividerUtilityClass, classes);\n};\nconst DividerRoot = styled('div', {\n  name: 'MuiDivider',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  margin: 0,\n  // Reset browser default style.\n  flexShrink: 0,\n  borderWidth: 0,\n  borderStyle: 'solid',\n  borderColor: (theme.vars || theme).palette.divider,\n  borderBottomWidth: 'thin',\n  variants: [{\n    props: {\n      absolute: true\n    },\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    }\n  }, {\n    props: {\n      light: true\n    },\n    style: {\n      borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)\n    }\n  }, {\n    props: {\n      variant: 'inset'\n    },\n    style: {\n      marginLeft: 72\n    }\n  }, {\n    props: {\n      variant: 'middle',\n      orientation: 'horizontal'\n    },\n    style: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    }\n  }, {\n    props: {\n      variant: 'middle',\n      orientation: 'vertical'\n    },\n    style: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  }, {\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      height: '100%',\n      borderBottomWidth: 0,\n      borderRightWidth: 'thin'\n    }\n  }, {\n    props: {\n      flexItem: true\n    },\n    style: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !!ownerState.children,\n    style: {\n      display: 'flex',\n      textAlign: 'center',\n      border: 0,\n      borderTopStyle: 'solid',\n      borderLeftStyle: 'solid',\n      '&::before, &::after': {\n        content: '\"\"',\n        alignSelf: 'center'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.children && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before, &::after': {\n        width: '100%',\n        borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,\n        borderTopStyle: 'inherit'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.orientation === 'vertical' && ownerState.children,\n    style: {\n      flexDirection: 'column',\n      '&::before, &::after': {\n        height: '100%',\n        borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,\n        borderLeftStyle: 'inherit'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before': {\n        width: '90%'\n      },\n      '&::after': {\n        width: '10%'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical',\n    style: {\n      '&::before': {\n        width: '10%'\n      },\n      '&::after': {\n        width: '90%'\n      }\n    }\n  }]\n})));\nconst DividerWrapper = styled('span', {\n  name: 'MuiDivider',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-block',\n  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,\n  paddingRight: `calc(${theme.spacing(1)} * 1.2)`,\n  whiteSpace: 'nowrap',\n  variants: [{\n    props: {\n      orientation: 'vertical'\n    },\n    style: {\n      paddingTop: `calc(${theme.spacing(1)} * 1.2)`,\n      paddingBottom: `calc(${theme.spacing(1)} * 1.2)`\n    }\n  }]\n})));\nconst Divider = /*#__PURE__*/React.forwardRef(function Divider(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDivider'\n  });\n  const {\n    absolute = false,\n    children,\n    className,\n    orientation = 'horizontal',\n    component = children || orientation === 'vertical' ? 'div' : 'hr',\n    flexItem = false,\n    light = false,\n    role = component !== 'hr' ? 'separator' : undefined,\n    textAlign = 'center',\n    variant = 'fullWidth',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    absolute,\n    component,\n    flexItem,\n    light,\n    orientation,\n    role,\n    textAlign,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DividerRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    role: role,\n    ref: ref,\n    ownerState: ownerState,\n    \"aria-orientation\": role === 'separator' && (component !== 'hr' || orientation === 'vertical') ? orientation : undefined,\n    ...other,\n    children: children ? /*#__PURE__*/_jsx(DividerWrapper, {\n      className: classes.wrapper,\n      ownerState: ownerState,\n      children: children\n    }) : null\n  });\n});\n\n/**\n * The following flag is used to ensure that this component isn't tabbable i.e.\n * does not get highlight/focus inside of MUI List.\n */\nif (Divider) {\n  Divider.muiSkipListHighlight = true;\n}\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Absolutely position the element.\n   * @default false\n   */\n  absolute: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   * @default false\n   */\n  flexItem: PropTypes.bool,\n  /**\n   * If `true`, the divider will have a lighter color.\n   * @default false\n   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  light: PropTypes.bool,\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The text alignment.\n   * @default 'center'\n   */\n  textAlign: PropTypes.oneOf(['center', 'left', 'right']),\n  /**\n   * The variant to use.\n   * @default 'fullWidth'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['fullWidth', 'inset', 'middle']), PropTypes.string])\n} : void 0;\nexport default Divider;","/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nfunction isHostComponent(element) {\n  return typeof element === 'string';\n}\nexport default isHostComponent;","import isHostComponent from \"../isHostComponent/index.js\";\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return {\n    ...otherProps,\n    ownerState: {\n      ...otherProps.ownerState,\n      ...ownerState\n    }\n  };\n}\nexport default appendOwnerState;","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nfunction omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default omitEventHandlers;","import clsx from 'clsx';\nimport extractEventHandlers from \"../extractEventHandlers/index.js\";\nimport omitEventHandlers from \"../omitEventHandlers/index.js\";\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n    const mergedStyle = {\n      ...additionalProps?.style,\n      ...externalForwardedProps?.style,\n      ...externalSlotProps?.style\n    };\n    const props = {\n      ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers({\n    ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n  const mergedStyle = {\n    ...internalSlotProps?.style,\n    ...additionalProps?.style,\n    ...externalForwardedProps?.style,\n    ...externalSlotProps?.style\n  };\n  const props = {\n    ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\nexport default mergeSlotProps;"],"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","Error","_len","arguments","length","args","Array","_key","console","name","Logger","constructor","_logLevel","_logHandler","_userLogHandler","push","this","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","_len2","_key2","log","_len3","_key3","info","_len4","_key4","warn","_len5","_key5","error","_len6","_key6","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","stringToByteArray$1","str","out","p","i","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","deepCopy","value","deepExtend","undefined","target","source","Object","getTime","prop","hasOwnProperty","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","getDefaultsFromEnvVariable","process","defaultsJsonString","JSON","parse","getDefaultsFromCookie","document","match","cookie","decoded","getDefaultEmulatorHostnameAndPort","productName","host","_a","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","getUA","navigator","isMobileCordova","test","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","FirebaseError","code","customData","super","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","fullCode","template","data","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","decode","header","claims","signature","parts","split","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringToByteArray","high","stringLength","getModularInstance","_delegate","setSDKVersion","version","DOMStorageWrapper","domStorage_","prefix_","set","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","arg","apply","logger","firstLog_","enableLogging$1","logger_","persistent","bind","varArgs","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","app","appCheckProvider","appName","_isFirebaseServerApp","settings","appCheckToken","serverAppAppCheckToken","appCheck","getImmediate","optional","then","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","appName_","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","emulatorOptions","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","_this","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","getInstance","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","outstandingGet","_path","q","_queryObject","index","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","Default","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listens_","listenId","thisListen","queryStringParameters","restRequest_","_ref","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validateFirebaseMergeDataArg","errorPrefix$1","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoInterrupt","_key7","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","thenablePushRef","pushRef","childrenToMerge","changedKey","changedValue","repoUpdate","callbackContext","container","ValueEventRegistration","cached","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","repoManagerDeleteRepo","apiName","getDatabase","getApp","_getProvider","identifier","emulator","hostAndPort","tokenProvider","mockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","simpleListen","echo","onEcho","variant","SDK_VERSION$1","_registerComponent","Component","_ref2","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","useSlot","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","internalForwardedProps","shouldForwardComponentProp","useSlotPropsParams","component","rootComponent","slots","slotProps","resolvedComponentsProps","resolveComponentProps","props","slotComponent","mergedProps","internalRef","mergeSlotProps","externalSlotProps","useForkRef","LeafComponent","appendOwnerState","as","getDividerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","componentProps","slotState","object","excludeKeys","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setServiceProps","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","isInitialized","shouldAutoInitialize","getOrInitializeService","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","services","INTERNAL","isComponentSet","getOptions","initialize","opts","existingCallbacks","existingInstance","invokeOnInitCallbacks","ComponentContainer","providers","addComponent","provider","addOrOverwriteComponent","getProviders","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","IDBDatabase","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","transformCachableValue","done","removeEventListener","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","some","Proxy","instanceOfAny","IDBRequest","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","PLATFORM_LOG_STRING","name$q","name$p","name$n","name$o","name$l","name$m","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$1","name$2","_apps","_serverApps","_components","_addComponent","componentName","serverApp","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","initializeApp","rawConfig","existingApp","newApp","libraryKeyOrName","libraryMismatch","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","computeKey","idbGetError","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","earliestHeartbeatIdx","earliestHeartbeatDate","getEarliestHeartbeatIdx","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","heartbeatEntry","hb","dates","countBytes","extractHeartbeatsForHeader","headerString","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","version$1","DividerRoot","styled","overridesResolver","styles","absolute","light","orientation","vertical","flexItem","withChildren","withChildrenVertical","textAlign","textAlignRight","textAlignLeft","memoTheme","theme","margin","flexShrink","borderWidth","borderStyle","borderColor","vars","palette","divider","borderBottomWidth","variants","position","bottom","width","dividerChannel","alpha","marginLeft","spacing","marginRight","marginTop","marginBottom","height","borderRightWidth","alignSelf","border","borderTopStyle","borderLeftStyle","content","_ref3","borderTop","_ref4","flexDirection","borderLeft","_ref5","_ref6","DividerWrapper","wrapper","wrapperVertical","_ref7","paddingLeft","paddingRight","whiteSpace","paddingTop","paddingBottom","Divider","React","inProps","useDefaultProps","role","classes","composeClasses","useUtilityClasses","_jsx","clsx","muiSkipListHighlight","element","otherProps","isHostComponent","getSlotProps","additionalProps","joinedClasses","mergedStyle","eventHandlers","extractEventHandlers","componentsPropsWithoutEventHandlers","omitEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps"],"sourceRoot":""}