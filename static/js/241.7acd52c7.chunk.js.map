{"version":3,"file":"static/js/241.7acd52c7.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/FormHelperText/formHelperTextClasses.js","../node_modules/@mui/material/FormHelperText/FormHelperText.js","../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js","screens/AddUserScreen.tsx","data/firebase.ts"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getFormHelperTextUtilityClasses(slot) {\n  return generateUtilityClass('MuiFormHelperText', slot);\n}\nconst formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);\nexport default formHelperTextClasses;","'use client';\n\nvar _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport formControlState from \"../FormControl/formControlState.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport formHelperTextClasses, { getFormHelperTextUtilityClasses } from \"./formHelperTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    contained,\n    size,\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']\n  };\n  return composeClasses(slots, getFormHelperTextUtilityClasses, classes);\n};\nconst FormHelperTextRoot = styled('p', {\n  name: 'MuiFormHelperText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  ...theme.typography.caption,\n  textAlign: 'left',\n  marginTop: 3,\n  marginRight: 0,\n  marginBottom: 0,\n  marginLeft: 0,\n  [`&.${formHelperTextClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.text.disabled\n  },\n  [`&.${formHelperTextClasses.error}`]: {\n    color: (theme.vars || theme).palette.error.main\n  },\n  variants: [{\n    props: {\n      size: 'small'\n    },\n    style: {\n      marginTop: 4\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.contained,\n    style: {\n      marginLeft: 14,\n      marginRight: 14\n    }\n  }]\n})));\nconst FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiFormHelperText'\n  });\n  const {\n    children,\n    className,\n    component = 'p',\n    disabled,\n    error,\n    filled,\n    focused,\n    margin,\n    required,\n    variant,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  const ownerState = {\n    ...props,\n    component,\n    contained: fcs.variant === 'filled' || fcs.variant === 'outlined',\n    variant: fcs.variant,\n    size: fcs.size,\n    disabled: fcs.disabled,\n    error: fcs.error,\n    filled: fcs.filled,\n    focused: fcs.focused,\n    required: fcs.required\n  };\n\n  // This issue explains why this is required: https://github.com/mui/material-ui/issues/42184\n  delete ownerState.ownerState;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormHelperTextRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ...other,\n    ownerState: ownerState,\n    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue\n    _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n      className: \"notranslate\",\n      \"aria-hidden\": true,\n      children: \"\\u200B\"\n    })) : children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default FormHelperText;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport refType from '@mui/utils/refType';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Input from \"../Input/index.js\";\nimport FilledInput from \"../FilledInput/index.js\";\nimport OutlinedInput from \"../OutlinedInput/index.js\";\nimport InputLabel from \"../InputLabel/index.js\";\nimport FormControl from \"../FormControl/index.js\";\nimport FormHelperText from \"../FormHelperText/index.js\";\nimport Select from \"../Select/index.js\";\nimport { getTextFieldUtilityClass } from \"./textFieldClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n    autoComplete,\n    autoFocus = false,\n    children,\n    className,\n    color = 'primary',\n    defaultValue,\n    disabled = false,\n    error = false,\n    FormHelperTextProps: FormHelperTextPropsProp,\n    fullWidth = false,\n    helperText,\n    id: idOverride,\n    InputLabelProps: InputLabelPropsProp,\n    inputProps: inputPropsProp,\n    InputProps: InputPropsProp,\n    inputRef,\n    label,\n    maxRows,\n    minRows,\n    multiline = false,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    required = false,\n    rows,\n    select = false,\n    SelectProps: SelectPropsProp,\n    slots = {},\n    slotProps = {},\n    type,\n    value,\n    variant = 'outlined',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const externalForwardedProps = {\n    slots,\n    slotProps: {\n      input: InputPropsProp,\n      inputLabel: InputLabelPropsProp,\n      htmlInput: inputPropsProp,\n      formHelperText: FormHelperTextPropsProp,\n      select: SelectPropsProp,\n      ...slotProps\n    }\n  };\n  const inputAdditionalProps = {};\n  const inputLabelSlotProps = externalForwardedProps.slotProps.inputLabel;\n  if (variant === 'outlined') {\n    if (inputLabelSlotProps && typeof inputLabelSlotProps.shrink !== 'undefined') {\n      inputAdditionalProps.notched = inputLabelSlotProps.shrink;\n    }\n    inputAdditionalProps.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectPropsProp || !SelectPropsProp.native) {\n      inputAdditionalProps.id = undefined;\n    }\n    inputAdditionalProps['aria-describedby'] = undefined;\n  }\n  const [InputSlot, inputProps] = useSlot('input', {\n    elementType: InputComponent,\n    externalForwardedProps,\n    additionalProps: inputAdditionalProps,\n    ownerState\n  });\n  const [InputLabelSlot, inputLabelProps] = useSlot('inputLabel', {\n    elementType: InputLabel,\n    externalForwardedProps,\n    ownerState\n  });\n  const [HtmlInputSlot, htmlInputProps] = useSlot('htmlInput', {\n    elementType: 'input',\n    externalForwardedProps,\n    ownerState\n  });\n  const [FormHelperTextSlot, formHelperTextProps] = useSlot('formHelperText', {\n    elementType: FormHelperText,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SelectSlot, selectProps] = useSlot('select', {\n    elementType: Select,\n    externalForwardedProps,\n    ownerState\n  });\n  const InputElement = /*#__PURE__*/_jsx(InputSlot, {\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: htmlInputProps,\n    slots: {\n      input: slots.htmlInput ? HtmlInputSlot : undefined\n    },\n    ...inputProps\n  });\n  return /*#__PURE__*/_jsxs(TextFieldRoot, {\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState,\n    ...other,\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabelSlot, {\n      htmlFor: id,\n      id: inputLabelId,\n      ...inputLabelProps,\n      children: label\n    }), select ? /*#__PURE__*/_jsx(SelectSlot, {\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement,\n      ...selectProps,\n      children: children\n    }) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperTextSlot, {\n      id: helperTextId,\n      ...formHelperTextProps,\n      children: helperText\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.\n   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),\n   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.\n   * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    formHelperText: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    htmlInput: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    inputLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    select: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    formHelperText: PropTypes.elementType,\n    htmlInput: PropTypes.elementType,\n    input: PropTypes.elementType,\n    inputLabel: PropTypes.elementType,\n    select: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  IconButton,\r\n  AppBar,\r\n  Toolbar,\r\n  Divider,\r\n  Paper,\r\n  CircularProgress,\r\n  Snackbar,\r\n  Alert\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Routes from '../routes/Routes';\r\nimport { addPlayer, getPlayers, playersRef } from '../data/firebase';\r\nimport { Player } from '../data/models';\r\n\r\nconst AddUserScreen: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [playerName, setPlayerName] = useState('');\r\n  const [players, setPlayers] = useState<Player[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error'>('success');\r\n\r\n  // Load players on component mount\r\n  useEffect(() => {\r\n    loadPlayers();\r\n  }, []);\r\n\r\n  const loadPlayers = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const playersList = await getPlayers();\r\n      setPlayers(playersList);\r\n    } catch (error) {\r\n      console.error('Error loading players:', error);\r\n      showSnackbar('Failed to load players', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (!playerName.trim()) {\r\n      showSnackbar('Please enter a player name', 'error');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      await addPlayer(playerName);\r\n      setPlayerName('');\r\n      showSnackbar('Player added successfully', 'success');\r\n      loadPlayers();\r\n    } catch (error) {\r\n      console.error('Error adding player:', error);\r\n      showSnackbar('Failed to add player', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const showSnackbar = (message: string, severity: 'success' | 'error') => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarSeverity(severity);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\" sx={{ bgcolor: 'lightgray' }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"back\"\r\n            onClick={() => navigate(Routes.HOME)}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Add New Player\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 3, mb: 4 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Add a New Player\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', mb: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Player Name\"\r\n              variant=\"outlined\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n              sx={{ mr: 2 }}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleAddPlayer}\r\n              disabled={loading}\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : 'Add'}\r\n            </Button>\r\n          </Box>\r\n        </Paper>\r\n\r\n        <Paper elevation={3} sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Players List\r\n          </Typography>\r\n          <Divider sx={{ mb: 2 }} />\r\n          \r\n          {loading ? (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : (\r\n            <List>\r\n              {players.length === 0 ? (\r\n                <ListItem key=\"empty-list-item\">\r\n                  <ListItemText primary=\"No players added yet\" />\r\n                </ListItem>\r\n              ) : (\r\n                players.map((player) => (\r\n                  <ListItem\r\n                    key={player.id}\r\n                  >\r\n                    <ListItemText\r\n                      primary={player.name}\r\n                      secondary={`Balance: ${player.balance}`}\r\n                    />\r\n                  </ListItem>\r\n                ))\r\n              )}\r\n            </List>\r\n          )}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert\r\n          onClose={handleCloseSnackbar}\r\n          severity={snackbarSeverity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddUserScreen; ","import { initializeApp } from 'firebase/app';\nimport { \n  getDatabase, \n  ref, \n  set, \n  push, \n  get, \n  remove, \n  update,\n  query,\n  orderByChild,\n  startAt,\n  endAt\n} from 'firebase/database';\nimport { Player, Game, Transfer } from './models';\n\n// נגדיר את הטיפוס ישירות בקובץ במקום לייבא אותו\ninterface GamePlayerData {\n  playerName: string;\n  buyIn: number;\n  cashOut: number;\n  profit: number;\n}\n\n// Firebase configuration - replace with your own config\nconst firebaseConfig = {\n  // כאן הכנס את פרטי הקונפיגורציה האמיתיים שלך\n  apiKey: \"AIzaSyB_C62gqBeFuCIEkMrUr3tdEWTCIZX7RyA\",\n  authDomain: \"poker-967ea.firebaseapp.com\",\n  // השאר שדה זה ריק בכוונה\n  // databaseURL: \"https://poker-967ea.firebaseio.com\",\n  projectId: \"poker-967ea\",\n  storageBucket: \"poker-967ea.firebasestorage.app\",\n  messagingSenderId: \"349597163789\",\n  appId: \"1:349597163789:android:c2f23b99100e2176b81044\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\n\n\n// Players API\nexport const playersRef = ref(database, 'PlayersList');\n\nexport const addPlayer = async (name: string): Promise<string> => {\n  const newPlayerRef = push(playersRef);\n  const playerId = newPlayerRef.key as string;\n  \n  await set(newPlayerRef, {\n    id: playerId,\n    name: name,\n    balance: 0\n  });\n  \n  return playerId;\n};\n\nexport const getPlayers = async (): Promise<Player[]> => {\n  const snapshot = await get(playersRef);\n  const players: Player[] = [];\n  \n  if (snapshot.exists()) {\n    snapshot.forEach((childSnapshot) => {\n      const player = childSnapshot.val() as Player;\n      player.id = childSnapshot.key as string;\n      players.push(player);\n    });\n  }\n  \n  return players;\n};\n\nexport const updatePlayerBalance = async (playerId: string, newBalance: number): Promise<void> => {\n  console.log(\"Updating player balance for playerId:\", playerId, \"to newBalance:\", newBalance);\n  const playerRef = ref(database, `PlayersList/${playerId}`);\n  await update(playerRef, { balance: newBalance });\n};\n\n// Date list API\nexport const datesListRef = ref(database, 'dateList');\n\nexport const getDateList = async (): Promise<{ date: string, key: string }[]> => {\n  const snapshot = await get(datesListRef);\n  const dates: { date: string, key: string }[] = [];\n  \n  if (snapshot.exists()) {\n    snapshot.forEach((childSnapshot) => {\n      const date = childSnapshot.child('date').val() as string;\n      if (date) {\n        dates.push({\n          date: date,\n          key: childSnapshot.key as string\n        });\n      }\n    });\n  }\n  \n  // Sort dates in descending order (newest first)\n  return dates.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\nexport const addDateToList = async (date: string): Promise<string> => {\n  // Extract just the date part (YYYY-MM-DD) from the date string\n  const datePart = date.split('T')[0];\n  \n  // Create a new entry in the dateList\n  const newDateRef = push(datesListRef);\n  const dateId = newDateRef.key as string;\n  \n  await set(newDateRef, {\n    date: datePart\n  });\n  \n  return dateId;\n};\n\n// Games API\nexport const gamesRef = ref(database, 'Games');\nexport const datesRef = ref(database, 'dateList');\n\nexport const addGame = async (gameData: { date: string, players: GamePlayerData[] }): Promise<string> => {\n  try {\n    // יצירת מזהה חדש עבור הרשומה של התאריך\n    const newDateRef = push(datesRef);\n    const dateId = newDateRef.key as string;\n    \n    if (!dateId) {\n      throw new Error('Failed to generate date ID');\n    }\n    \n    // שמירת פרטי התאריך\n    const dateData = {\n      date: gameData.date\n    };\n    \n    // שמירת התאריך\n    await set(newDateRef, dateData);\n    \n    // יצירת התייחסות לקולקציית שחקנים תחת התאריך הזה\n    const playerBalanceRef = ref(database, `dateList/${dateId}/playerBalance`);\n    \n    // שמירת כל שחקן עם המאזן שלו\n    for (const player of gameData.players) {\n      // יצירת מזהה חדש עבור כל שחקן\n      const playerRef = push(playerBalanceRef);\n      const playerId = playerRef.key;\n      \n      if (!playerId) {\n        throw new Error('Failed to generate player ID');\n      }\n      \n      // שמירת פרטי השחקן והמאזן שלו\n      const playerData = {\n        name: player.playerName,\n        balance: player.profit // או cashOut - buyIn\n      };\n      \n      await set(playerRef, playerData);\n    }\n    \n    return dateId;\n  } catch (error) {\n    console.error(\"Error adding game:\", error);\n    throw error;\n  }\n};\n\nexport const getGamesByDate = async (dateOrKey: string): Promise<Game[]> => {\n  // First, check if we're getting games by a dateList key\n  const dateListRef = ref(database, `dateList/${dateOrKey}`);\n  const dateSnapshot = await get(dateListRef);\n  \n  let dateString = dateOrKey;\n  \n  // If a valid date key was provided, get the date string from it\n  if (dateSnapshot.exists()) {\n    const date = dateSnapshot.child('date').val() as string;\n    if (date) {\n      dateString = date;\n    }\n  }\n  \n  // Use orderByChild and startAt/endAt for more efficient querying\n  // This filters the games on the server side before data is sent to client\n  const startDate = `${dateString}T00:00:00.000Z`;\n  const endDate = `${dateString}T23:59:59.999Z`;\n  \n  const gamesQuery = query(\n    gamesRef,\n    orderByChild('date'),\n    startAt(startDate),\n    endAt(endDate)\n  );\n  \n  const snapshot = await get(gamesQuery);\n  const games: Game[] = [];\n  \n  if (snapshot.exists()) {\n    snapshot.forEach((childSnapshot) => {\n      const game = childSnapshot.val() as Game;\n      games.push(game);\n    });\n  }\n  \n  return games;\n};\n\nexport const getAllGameDates = async (limit: number = 10, startDate?: string): Promise<string[]> => {\n  let gamesQuery;\n  \n  if (startDate) {\n    // Query games with dates before the startDate (for pagination)\n    gamesQuery = query(\n      gamesRef,\n      orderByChild('date'),\n      endAt(startDate)\n    );\n  } else {\n    // Query all games\n    gamesQuery = query(gamesRef, orderByChild('date'));\n  }\n  \n  const snapshot = await get(gamesQuery);\n  const dates = new Set<string>();\n  \n  if (snapshot.exists()) {\n    // Convert to array to handle pagination properly\n    const games: Game[] = [];\n    snapshot.forEach((childSnapshot) => {\n      games.push(childSnapshot.val() as Game);\n    });\n    \n    // Sort in reverse order (most recent first)\n    games.sort((a, b) => b.date.localeCompare(a.date));\n    \n    // Extract unique dates\n    for (const game of games) {\n      const datePart = game.date.split('T')[0];\n      dates.add(datePart);\n      \n      // Exit early if we've reached the limit\n      if (limit > 0 && dates.size >= limit) {\n        break;\n      }\n    }\n  }\n  \n  // Convert Set to Array and sort in descending order (newest first)\n  return Array.from(dates).sort().reverse();\n};\n\n// Transfers API\nexport const transfersRef = ref(database, 'Transfers');\n\nexport const addTransfer = async (transfer: Omit<Transfer, 'id'>): Promise<string> => {\n  const newTransferRef = push(transfersRef);\n  const transferId = newTransferRef.key as string;\n  \n  await set(newTransferRef, {\n    ...transfer,\n    id: transferId\n  });\n  \n  return transferId;\n};\n\nexport const getTransfers = async (): Promise<Transfer[]> => {\n  const snapshot = await get(transfersRef);\n  const transfers: Transfer[] = [];\n  \n  if (snapshot.exists()) {\n    snapshot.forEach((childSnapshot) => {\n      const transfer = childSnapshot.val() as Transfer;\n      transfers.push(transfer);\n    });\n  }\n  \n  return transfers;\n};\n\n// Player balance by date API\nexport const getPlayerBalanceByDate = async (dateKey: string): Promise<Player[]> => {\n  if (!dateKey) {\n    throw new Error(\"Please select a date\");\n  }\n  \n  const balanceRef = ref(database, `dateList/${dateKey}/playerBalance`);\n  const snapshot = await get(balanceRef);\n  const players: Player[] = [];\n  \n  if (snapshot.exists()) {\n    snapshot.forEach((playerSnapshot) => {\n      const name = playerSnapshot.child('name').val() as string;\n      const balance = playerSnapshot.child('balance').val() as number;\n      const id = playerSnapshot.key as string;\n      \n      if (name && balance !== undefined) {\n        players.push({\n          id,\n          name,\n          balance\n        });\n      }\n    });\n  }\n  \n  // Sort players by balance in descending order\n  return players.sort((a, b) => b.balance - a.balance);\n};\n\n/**\n * Updates the balances of all players after a game is finished\n * @param gameData - The data about the game including players and their profits\n * @returns Promise that resolves when all player balances have been updated\n */\nexport const updatePlayersBalancesAfterGame = async (gameData: { players: GamePlayerData[] }): Promise<void> => {\n  try {\n    // Get all players from the database\n    const allPlayers = await getPlayers();\n    \n    // Create a mapping for quick lookup of player data by name\n    const gamePlayerMap = new Map<string, GamePlayerData>();\n    gameData.players.forEach(player => {\n      gamePlayerMap.set(player.playerName, player);\n    });\n    \n    // Process each player\n    const updatePromises = allPlayers.map(player => {\n      // Check if this player participated in the game\n      const gamePlayerData = gamePlayerMap.get(player.name);\n      \n      if (gamePlayerData) {\n        // Calculate new balance\n        const newBalance = player.balance + gamePlayerData.profit;\n        \n        // Update the player's balance in the database\n        return updatePlayerBalance(player.id, newBalance);\n      }\n      \n      // Player didn't participate, no update needed\n      return Promise.resolve();\n    });\n    \n    // Wait for all updates to complete\n    await Promise.all(updatePromises);\n    \n  } catch (error) {\n    console.error(\"Error updating player balances after game:\", error);\n    throw error;\n  }\n}; "],"names":["getFormHelperTextUtilityClasses","slot","generateUtilityClass","generateUtilityClasses","_span","FormHelperTextRoot","styled","name","overridesResolver","props","styles","ownerState","root","size","capitalize","contained","filled","memoTheme","_ref","theme","color","vars","palette","text","secondary","typography","caption","textAlign","marginTop","marginRight","marginBottom","marginLeft","formHelperTextClasses","disabled","error","main","variants","style","_ref2","React","inProps","ref","useDefaultProps","children","className","component","focused","margin","required","variant","other","muiFormControl","useFormControl","fcs","formControlState","states","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","getTextFieldUtilityClass","variantComponent","standard","Input","FilledInput","outlined","OutlinedInput","TextFieldRoot","FormControl","autoComplete","autoFocus","defaultValue","FormHelperTextProps","FormHelperTextPropsProp","fullWidth","helperText","id","idOverride","InputLabelProps","InputLabelPropsProp","inputProps","inputPropsProp","InputProps","InputPropsProp","inputRef","label","maxRows","minRows","multiline","onBlur","onChange","onFocus","placeholder","rows","select","SelectProps","SelectPropsProp","slotProps","type","value","useId","helperTextId","undefined","inputLabelId","InputComponent","externalForwardedProps","input","inputLabel","htmlInput","formHelperText","inputAdditionalProps","inputLabelSlotProps","shrink","notched","native","InputSlot","useSlot","elementType","additionalProps","InputLabelSlot","inputLabelProps","InputLabel","HtmlInputSlot","htmlInputProps","FormHelperTextSlot","formHelperTextProps","FormHelperText","SelectSlot","selectProps","Select","InputElement","_jsxs","htmlFor","labelId","AddUserScreen","navigate","useNavigate","playerName","setPlayerName","useState","players","setPlayers","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","useEffect","loadPlayers","async","playersList","getPlayers","console","showSnackbar","message","severity","handleCloseSnackbar","Box","sx","flexGrow","AppBar","position","bgcolor","Toolbar","IconButton","edge","onClick","Routes","HOME","mr","ArrowBackIcon","Typography","Container","maxWidth","mt","Paper","elevation","p","mb","gutterBottom","display","TextField","e","target","Button","trim","addPlayer","CircularProgress","Divider","justifyContent","List","length","ListItem","ListItemText","primary","map","player","balance","Snackbar","open","autoHideDuration","onClose","Alert","width","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","getDatabase","playersRef","newPlayerRef","push","playerId","key","set","snapshot","get","exists","forEach","childSnapshot","val","datesListRef","getDateList","dates","date","child","sort","a","b","Date","getTime","datesRef","addGame","newDateRef","dateId","Error","dateData","gameData","playerBalanceRef","playerRef","playerData","profit","getPlayerBalanceByDate","dateKey","balanceRef","playerSnapshot","updatePlayersBalancesAfterGame","allPlayers","gamePlayerMap","Map","updatePromises","gamePlayerData","newBalance","log","update","updatePlayerBalance","Promise","resolve","all"],"sourceRoot":""}